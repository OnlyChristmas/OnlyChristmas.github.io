<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【阅读笔记】项亮前辈的《推荐系统实战》</title>
      <link href="/2019/05/11/Recommended-system/"/>
      <url>/2019/05/11/Recommended-system/</url>
      <content type="html"><![CDATA[<p>推荐系统是个有意思的方向。项亮前辈的《推荐系统实战》来当作入门的第一本书还是很合适的，这段时间断断续续的抽空阅读了一遍。本书写的浅显易懂，很好的勾勒出了推荐引擎十年前的主流算法，以及工业推荐系统是如何打磨的。从这个角度讲，项亮前辈很好地完成了”让学生了解如何将自己了解的算法实现到一个工业系统中去“这一写作目标。</p><p>看书的过程中简单记录了一些内容，夹杂着自己突然产生的一些想法。用以过段时间后的来重新复习消化本书。</p><a id="more"></a><hr><h2 id="序-amp-前言"><a href="#序-amp-前言" class="headerlink" title="序&amp;前言"></a>序&amp;前言</h2><p>随着互联网信息技术的快速发展，我们逐渐从信息匮乏的时代进入了信息过载（information overload）的时代。在这种情况下，不论是对于想要快速找到目标信息的消费者，还是想要让自己的信息脱颖而出的生产者，都是严峻的考验。推荐系统正是在这种环境下有了生长的土壤，它一方面可以提高用户获取有效信息的能力，另一方面可以提升高质量信息的曝光度，实现双赢。但不可避免地，也会产生信息蚕房这样的桎梏。我们该何如构建一个高效的信息推荐系统呢？我们该入何如避免信息蚕房的桎梏呢？</p><p>在写一本书前，应该思考这样几个问题。其实不论做什么事情都是一样的道理。</p><ul><li>为什么要写这本书？</li><li>写给谁看？</li><li>有几种角度去写这本书？</li></ul><blockquote><p>推荐系统的应用前景早在2010年的时候就已经被挖掘出来，并且开始被总结成书……虽然最早提出是在上世纪90年代。那么下一个重要领域是什么？强化学习吗?</p></blockquote><h2 id="评价推荐系统"><a href="#评价推荐系统" class="headerlink" title="评价推荐系统"></a>评价推荐系统</h2><h3 id="什么是推荐系统"><a href="#什么是推荐系统" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h3><p>在互联网经济初兴之时，信息还没有那么的爆炸。一些公司可以人为地收集一些热门网站，对于信息分类组织，方便人们找到自己想要的信息。这个商机造就了第一代互联网巨头，美国有雅虎，中国有腾讯新浪搜狐网易四大门户。当技术发展，人们在明确知道自己的需求的时候，可以通过搜索功能寻找信息，这样的商机成就了Google、百度这样的第二代互联网巨头。而很多时候，人们并没有明确的需求，仅仅是想要从海量信息中找到一些自己感兴趣的信息来进行消遣。这个时候，能够通过历史数据准确捕捉用户兴趣的千人千面推荐系统就派上了用途，第三代巨头字节跳动崛起。</p><p>搜索系统什么时候比较有用呢？当<strong>信息过载</strong>，且用户有明确需求的的时候。但如果用户只是想消遣一下，并<strong>没有明确的需求</strong>该怎么办？你需要一个人或者一个工具来帮你对于过载的信息进行筛选，给出一些建议供你选择。然而人力总是昂贵且不是是实时可得的，这个时候个性化推荐系统就派上了用场。它就是一个能够自动联系物品和用户的工具。</p><h3 id="推荐系统的应用"><a href="#推荐系统的应用" class="headerlink" title="推荐系统的应用"></a>推荐系统的应用</h3><p>推荐系统严重依赖于用户的历史行为数据，因此并不能向搜索引擎那样独立存在，往往内嵌于各个领域之中，成为一个提高网站/APP用户存留，活跃度的利器。</p><p>推荐系统的应用包括不限于</p><ul><li>电子商务商品推荐（例如淘宝有好货）<ul><li>基于购物记录的推荐；基于好友信息的推荐；当前购买物品的相关推荐（打包销售策略）</li></ul></li><li>视频 / 电影推荐<ul><li>基于以往看过 / 喜欢的电影记录进行推荐</li></ul></li><li>音乐推荐<ul><li>标注歌曲计算歌曲之间的相似度推给用户；根据用户行为计算歌曲相似度的推荐</li></ul></li><li>社交网络好友推荐<ul><li>利用社交网络推荐物品；根据社交关系给用户推荐好友；信息流会话的排序推荐</li></ul></li><li>个性化阅读推荐<ul><li>手动关注特定人 / 领域的推荐（Google reader）； 基于文章特征的推荐（Zite / 头条）；基于协同过滤的推荐</li></ul></li><li>LBS 基于位置的服务（各种网上预订服务）</li><li>个性化邮件<ul><li>根据用户的使用历史，对每天处理的大量邮件进行整理分类推荐</li></ul></li><li>个性化广告推荐系统————计算广告学（互联网公司命根子）<ul><li>广告推荐系统是帮助广告找到对它感兴趣的用户，而普通的推荐是帮助用户找到感兴趣的信息，这是它们之间的根本差别。</li><li>搜索广告：根据用户的搜索历史，判断用户的搜索目的，投放相关目的的广告。</li><li>上下文广告：根据用户当前浏览的网页内容推荐相关内容的广告。</li></ul></li></ul><p>尽管推荐系统用于不同的领域，但是他们的内在构造逻辑却基本一致。都是由前台的展示页面（要设计用户的反馈机制，以不断迭代调整后台的算法），后台算法，以及日志系统这三部分组成。</p><blockquote><p>为什么淘宝不建造会员之间添加好友的功能，这样小白用户就可以跟着购物达人去消费。可能是考虑隐私问题？因为淘宝的评论也都是默认匿名。</p><p>为什么音乐电台的个性化推荐这个商机早就存在，网易云音乐（2013）能用推荐系统将它做火？我觉得是因为它构造了一个音乐社区，让大家抒发出获得新奇的音乐推荐的感受，引起用户之间的共鸣，增强产品的使用粘性（听歌之前先看评论已经变成了病……）。推荐引擎也可以通过用户的这些评论反馈用NLU技术作为提取强特征去优化推荐算法，不知道猪场有没有做……应该做了吧……</p><p>未来社交网络的广告的发展空间大概率会超过搜索广告，微信QQ他们沉淀了太多有用的用户数据了！鹅厂的部门墙导致数据的利用率太低了！不知道架构调整之后有没有点起色……微信朋友圈现在全面开放第三条广告商业化不知道是不是为时已晚？现在用户的朋友圈使用时间是不是都快被抖音快手吸干了……</p><p>据说淘宝系现在的推荐、搜索流量比是六比四？</p></blockquote><h3 id="推荐系统评测"><a href="#推荐系统评测" class="headerlink" title="推荐系统评测"></a>推荐系统评测</h3><p>推荐系统本质上是想要消除搜素引擎带来的信息马太效应。但其实基于协同过滤算法的也会在一定程度上造成马太效应。</p><h4 id="评测方法"><a href="#评测方法" class="headerlink" title="评测方法"></a>评测方法</h4><p>一个完整的推荐系统有三个参与方：用户，信息生产者，推荐平台。</p><p>推荐系统是帮助用户挖掘那些他们可能感兴趣却又不那么容易发现的内容（那些埋没在长尾中的信息内容），而不是去一昧的追求高的预测准确率，去预测很多没有新意的东西。（比如：明天太阳一定从东方升起）因为高预测准确率并不等于高的用户满意度。</p><p>通常来说，一个新的推荐系统上线需要走过以下的三个流程：</p><ul><li>离线测试，通过日志系统存留的用户数据对新模型进行离线指标的评测，与现有算法的离线指标比较。</li><li>用户调查，选取一部分用户（注意要与真实用户的分布一致）进行双盲测评（实验人员和用户都不知道测试目标），尽量保证用户和实验人员在评测中不参杂主观性。</li><li>在线AB test，用控制变量的方法，将新系统和原有系统分别给用户成分相似的两个用户组使用，观察两个用户组不同的表现情况，需要长时间的实验才能得到关于新旧系统对比的可靠实验结果。</li></ul><h4 id="评测指标"><a href="#评测指标" class="headerlink" title="评测指标"></a>评测指标</h4><h5 id="用户满意度"><a href="#用户满意度" class="headerlink" title="用户满意度"></a>用户满意度</h5><p>这是推荐系统最重要的指标。但是这个指标只能在用户调查和在线实验中获得。最常用的离线实验中无法使用。</p><h5 id="预测准确度"><a href="#预测准确度" class="headerlink" title="预测准确度"></a>预测准确度</h5><p>推荐系统离线测评中最重要的指标。</p><h6 id="评分预测"><a href="#评分预测" class="headerlink" title="评分预测"></a>评分预测</h6><p>作为一个回归问题，常用以下两种评测指标，均方根误差 $RMSE = \sqrt{ \sum{(r_i - \hat{r} )^2}/|T|} $，以及平均绝对值误差 $MAE= \sum{| r_i - \hat{r}|}/|T|$。相比较之下，RMSE对于预测不准确的评分惩罚更大，是一个更加苛刻的评测指标。</p><h6 id="Top-N推荐"><a href="#Top-N推荐" class="headerlink" title="Top N推荐"></a>Top N推荐</h6><p>推荐的真实应用场景是给用户一个推荐列表，我们对这个列表中的结果进行准确率和召回率的计算。有些时候会选取不同的推荐列表长度N，计算一组评测结果，画出准确率 / 召回率曲线。因为我们更加关心的是用户会不会选取我们推荐列表中的内容，而没有那么关心用户对于选取内容的评价。因此TopN推荐是我们更加关注的一个指标。</p><h5 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h5><p>描述推荐系统对于物品长尾的挖掘能力，这是一个内容生产者极为关心的目标。简单的想，每个内容至少被推荐给用户一下，证明了推荐系统挖掘长尾的能力。但实际情况下，不同物品的流行度极为不同，因为通过研究所有物品的流行度分布可以证明推荐系统长尾信息挖掘能力的差异。物品流行度分布越是平整，这种能力越强，覆盖率也就越高。</p><p>信息论中的信息熵的概念可以评价覆盖率，$H = - \sum p(i)logp(i)$，分布越均匀的时候，信息熵越大，覆盖率越大。</p><p>经济学中的基尼系数也可以评价覆盖率，$i_j$ 是按照物品流行度从小到大排列。 $ G = 1/(n-1) \sum_{j = 1}^{n} (2j - n -1) P(i_j)​$， 分布越平均，基尼系数越小（趋近于零），覆盖率越大。</p><h5 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h5><p>用户的兴趣不是单一的，而是多样的。尽管用户的兴趣在较长的跨度中是不一样的，但是具体到用户访问系统的某一个时刻，这个时刻的兴趣点是确定的。理想化的推荐列表中的内容应该是和用户的兴趣同分布的。</p><p>相似性和多样性是一个相对应的概念。假设$s(i , j)​$定义了物品i，j之间的相似性，那么 用户u 的推荐列表R(u)的多样性定义如下：</p><p>$Diversity(R(u)) = 1 - 2*\sum s(i,j) / |R(u)|(|R(u) - 1|)​$</p><h5 id="新颖性"><a href="#新颖性" class="headerlink" title="新颖性"></a>新颖性</h5><p>推荐系统提高推荐内容新颖性方法很简单，直接过滤掉用户已经关注过的内容就好。但是这种方法不能排除掉用户通过其他途径获得过的信息。另一个想法是，如果推荐物品中的平均流行度更低，那么其对于用户的新颖性是更大的。这很容易做到，其难点在于如何在不牺牲推荐精度的情况下提升推荐内容的多样性和新颖度。</p><h5 id="惊喜度"><a href="#惊喜度" class="headerlink" title="惊喜度"></a>惊喜度</h5><p>惊喜度这个指标乍一看和新颖性关联性很强。但这只是英文翻译成中文后词语之间的相似性对于我们带来的困扰。</p><p>当推荐的一个内容与用户以往的使用记录相关性很低，却又使用户很满意的时候，用户是惊喜的。这就是惊喜度的定性定义。换个角度思考，为了提高用户的惊喜度，需要首先降低推荐内容与用户以往使用记录的相关性，另一方面需要提升用户的满意度。由于第一方面因素的限制，是的惊喜度成为了一个推荐系统比较难以提高的指标。并且，提高这个指标还会冒着相对较大的风险，因为一个与用户以往使用记录不类似的内容不可控因素也会更大。但是这个点倒是可以和强化学习的“探索”结合起来，进一步优化系统。</p><h5 id="信任度"><a href="#信任度" class="headerlink" title="信任度"></a>信任度</h5><p>在电商的推荐场景下，这是一个很重要的指标。当用户信任推荐系统的推荐和不信任时做出的选择是完全不同的。一般来说有以下两种方式：</p><ul><li>提供推荐内容的解释信息；</li><li>根据用户的好友信息进行推荐，博得用户的信任感。</li></ul><h5 id="实时性"><a href="#实时性" class="headerlink" title="实时性"></a>实时性</h5><p>在某些场景下，信息的时效性是非常重要的。比如：新闻的推荐。推荐系统的实效性一般来说分为两个方面。</p><ul><li>实时的更新推荐列表需用户有新的变化行为。这可以通过推荐列表的变化速率来进行测评。如果推荐列表在用户有行为后变化不大或者没有变化，说明其实时性不够高。</li><li>实时的将新加入系统的内容推荐给感兴趣的用户，这主要考验了系统的冷启动能力。可以通过记录用户的推荐列表中有多大比例的物品是当天新加入的来判断这个方面的实时性。</li></ul><h5 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h5><p>任何一个能带来利益的算法都会被人攻击，反作弊能力这个时候就至关重要了，也就是系统的鲁棒性。算法健壮性的检测主要依靠模拟攻击。用常用的攻击方法是向推荐系统中注入噪声，比较攻击前后两次系统生成的推荐列表的内容差异，如果没有太大变化，证明系统比较鲁棒。</p><p>另外，在算法设计的时候，尽量主要考虑使用代价比较高的用户行为特征。这样的数据由于攻击代价较高，因此更不容易受到攻击；另一方面，由于攻击代价较高，这样的数据中本身的混有的噪声也更少。</p><h5 id="商业目标"><a href="#商业目标" class="headerlink" title="商业目标"></a>商业目标</h5><p>对于公司而言，推荐系统是为了提高公司的营收额，本质上是想要提高每个用户为公司带来的营收额。而这种计算指标计算一次的代价过于高昂，不同的公司根据其具体情况设计了不同的商业目标。有的是商品消费额，有的是广告点击总数，有的是广告展示总数等等。</p><h4 id="评测维度"><a href="#评测维度" class="headerlink" title="评测维度"></a>评测维度</h4><p>推荐系统不存在银弹，我们需要根据我们的数据状况，以及实际的应用背景选择合适的推荐系统。这就需要我们从多个维度全面的考虑算法的优劣。一般来说，分为如下三个方面：</p><ul><li>用户维度：新旧用户，活跃度，用户的人口统计学信息。</li><li>物品维度：物品属性、流行度、新旧程度</li><li>时间维度：季节，白天 / 晚上，工作日 / 周末</li></ul><h2 id="利用用户行为数据"><a href="#利用用户行为数据" class="headerlink" title="利用用户行为数据"></a>利用用户行为数据</h2><p>用户的行为数据分为两大类，一类是通过设计的用户反馈模块返回的显性反馈，通常这类数据数量较小，产生代价更高，对于用户画像的描述贡献更大；另一类是用户在网站上的一般性操作（例如浏览）返回的隐性反馈。这类数据并不会十分明确地表达出用户的喜好，但数据量比较大，对于推荐系统的构造也起到了不可忽视的作用。</p><blockquote><p>隐形数据中的大量噪音如何消除？（例如用户被虚假标题诱导的错误点击，或者交互不合理导致的错误点击）</p></blockquote><h3 id="基于邻域的算法"><a href="#基于邻域的算法" class="headerlink" title="基于邻域的算法"></a>基于邻域的算法</h3><h4 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h4><p>基于邻域的用户协同过滤算法是最古老的推荐算法之一。这个算法有两个关键任务。</p><ul><li>如何找到与目标用户兴趣相似的用户集合？<ul><li>两个用户有过正反馈的物品集合越大说明两个用户的相似性越大，但很明显，所有物品在这个方法下的权重不应该是相同的，需要对热门的物品的权重进行一个惩罚。</li></ul></li><li>何如找到这个集合中用户喜欢的，且目标用户没有听说过的物品推荐给用户（新奇）。<ul><li>是否推荐一个物品有两方面因素决定，一方面这个集合中的用户有多少个对这个物品有过正反馈操作？另一方面，这些有正反馈操作的用户与目标用户的兴趣相似度有多大？</li></ul></li></ul><h4 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h4><p>这是2010年左右业界最常用的算法。用以解决基于用户的协同过滤算法的两个弊端。第一，基于用户的协同过滤算法要探究所有用用户之间的相似性，那么随着用户的增加，用户相似度矩阵将越来越大。时间复杂度和空间复杂度也以平方的级别增加，矩阵难以维护。其次，基于用户的协同过滤算法做出推荐的时候没有办法做出推荐解释，用户的信任度比较低。</p><p>基于物品的协同过滤算法有两个关键任务。</p><ul><li>何如获取物品之间的相似度？<ul><li>物品的相似性用后验概率来表示，喜欢物品A的用户中有多少人同时喜欢B，人数越多，说明两个物品的相似度越高。（这里需要对特别活跃的用户降权重）</li></ul></li><li>何如根据物品相似度和用户的历史行为给用户生成推荐列表。<ul><li>某物品与目标用户历史上正反馈的的物品的相似度越高越容易被推荐。相似度归一化可以提高性能。</li></ul></li></ul><h4 id="UserCF-与-ItemCF之间的比较"><a href="#UserCF-与-ItemCF之间的比较" class="headerlink" title="UserCF 与 ItemCF之间的比较"></a>UserCF 与 ItemCF之间的比较</h4><p>UserCF的推荐结果更加着重于反应和用户兴趣相似的小群体的热点，也就是说大家都关心的东西就推荐给新用户，新用户也大概率会关心；ItemCF 的推荐结果更着重于维系用户的历史兴趣，不同用户也有自己所关心的领域。</p><div class="table-container"><table><thead><tr><th></th><th>UserCF</th><th>ItemCF</th></tr></thead><tbody><tr><td>性能</td><td>适用于用户较少的场合，如果用户很多，计算用户相似度矩阵代价很大</td><td>适用于物品数明显小于用户数的场合，如果物品很多（网页），计算物品相似度矩阵代价很大</td></tr><tr><td>领域</td><td>时效性较强，用户个性化兴趣不太明显的领域</td><td>长尾物品丰富，用户个性化需求强烈的领域</td></tr><tr><td>实时性</td><td>用户有新行为，不一定造成推荐结果的立即变化</td><td>用户有新行为，一定会导致推荐结果的实时变化</td></tr><tr><td>冷启动</td><td>在新用户对很少的物品产生行为后，不能立即对他进行个性化推荐，因为用户相似度表是每隔一段时间离线计算的</td><td>新用户只要对一个物品产生行为，就可以给他推荐和该物品相关的其他物品</td></tr><tr><td></td><td>新物品上线后一段时间，一旦有用户对物品产生为，就可以将新物品推荐给和对它产生行为的用</td><td>但没有办法在不离线更新物品相似度表的情况下将新物品推荐给用户</td></tr><tr><td>推荐理由</td><td>很难提供令用户信服的推荐解释</td><td>利用用户的历史行为给用户做推荐解释，可以令用户比较信服</td></tr></tbody></table></div><p>没有“银弹”，在不同的业务场景下，在不同的数据背景下。算法的表现不尽相同，真实的推荐结果往往是扬长避短，多种推荐算法的集成。</p><blockquote><p>一个推荐系统可不可以用户连续的使用时长为标准切换不同的算法。例如抖音，用户刚登陆可以用UserCF推荐一波热点视频，随着用户连续使用的时常增加，可以逐步平滑的切换到ItemCF实时变化，推荐更多兴趣化的内容。</p></blockquote><h3 id="隐语义算法"><a href="#隐语义算法" class="headerlink" title="隐语义算法"></a>隐语义算法</h3><p>就是文本挖掘领域中的主题模型（LSI、pLSA、LDA等）。一方面提取待推荐物品的主题向量，另一方面提取目标用户的兴趣主题向量。当两个向量相似度越高说明越合适被推荐。</p><p>这里有个构造负样本的点需要注意。应该选取那些比较热门但是用户却没有行为的样本作为负样本。</p><p>这类方法有个弊端就是很难做到较高的实时性。因为计算用户隐向量的时候需要扫描用户之前的所有的操作记录，很耗时。在实时性要求比较高的新闻推荐领域不适合使用这种方法。</p><h3 id="基于图的模型"><a href="#基于图的模型" class="headerlink" title="基于图的模型"></a>基于图的模型</h3><p>基于图的推荐算法算法是构造基于用户和物品的二分图，用基于大数据量统计的随机游走算法（PersonalRank）来衡量顶点之间的相似性，进而选择推荐的物品。顶点之间的相似性需要从以下三个方面衡量</p><ul><li>两个顶点之间的路径数（相关性高的两个节点之间的路径数多）</li><li>两个顶点之间的路径长度（相关性高的两个节点之间的路径长度短）</li><li>两个顶点之间的路径经过的顶点（相关性高的两个节点之间的路径不会经过出度比较大的节点）</li></ul><p>随机游走算法就是每次从目标点出发，按照特定的概率$ \alpha $决定是继续走下去还是返回起始点。如果继续走下去，就按照均匀分布的方式随机选择下一个节点作为下次需要经过的结点。循环往复这个过程。但是随机游走算法需要多次迭代才能收敛，只能用早停或者构造转移概率矩阵的方式求解。</p><h2 id="推荐系统冷启动"><a href="#推荐系统冷启动" class="headerlink" title="推荐系统冷启动"></a>推荐系统冷启动</h2><p>推荐系统冷启动就是如何淘来第一桶金的问题。根据对象的不同分为三个方面。</p><ul><li>用户的冷启动</li><li>物品的冷启动</li><li>系统的冷启动</li></ul><h3 id="用户的冷启动"><a href="#用户的冷启动" class="headerlink" title="用户的冷启动"></a>用户的冷启动</h3><p>用户的冷启动指的是一个新用户刚加入网站后没有对应的历史行为数据，如何为他推荐物品。</p><p>首先可以考虑从用户的注册信息破局。其实从引入额外信息的角度考虑，用户的冷启动越来越是个伪问题。随着每个用户再互联网上留下的蛛丝马迹越来越多，冷启动问题也就越来越不是个问题了。</p><p>用户的注册信息分为以下三种：</p><ul><li>人口统计学特征：年龄，性别、职业、民族、学历、居住地等等一系列。</li><li>用户兴趣描述：新用户注册界面可以给之以少许的标签（或者典型物品）选择来让用户表述自己的兴趣。</li><li>建立账号体系：从其它网站导流（社交网站为最佳，可以借助社交推荐的力量）。</li></ul><p>可以根据已有的信息，选择用树状结构对用户进行分组，对新用户进行粗粒度的个性化推荐。或者辅以最热门物品的加权推荐。</p><h3 id="物品冷启动"><a href="#物品冷启动" class="headerlink" title="物品冷启动"></a>物品冷启动</h3><p>UserCF算法对于物品的冷启动是不敏感的。要知道，目标用户获取新推荐物品的方式是根据相似人群喜欢的物品，知道将新物品加入到系统中，只要被一个用户有正反馈就必然会逐步扩散开来。</p><p>对于ItemCF算法来说，新物品的冷启动显然更加的困难。我们想要将一个物品推荐给用户需要先找到与其相似的物品，但是在没有物品使用记录的时候就无法更新物品的相关性表。这时候可以根据物品不同类型的特征构造特征向量，运用向量的相似性度量方法去寻找相似物品（内容过滤算法）。但是这样的方法却没有考虑到用户行为，也忽略了物品流行度，精确性就相对差一些。</p><h3 id="系统冷启动"><a href="#系统冷启动" class="headerlink" title="系统冷启动"></a>系统冷启动</h3><p>在一个新系统一穷二白的时候可以先用热门排行榜（这也是一种推荐方法）的方式积累原始数据。或者用大的代价请专家迅速建立起现有物品的相关性表，就可以初始时候就采用ItemCF的推荐方式。</p><h2 id="利用用户标签数据"><a href="#利用用户标签数据" class="headerlink" title="利用用户标签数据"></a>利用用户标签数据</h2><p>推荐系统中的用户标签数据是重要的用户反馈。相比于用户的行为数据，这样的显性反馈对于捕捉用户的兴趣准确性会更高。但是再或者标签数据的时候，也要关注如何获得更高质量的数据，显然给用户推荐他可能选择的标签可以显著降低用户反馈的成本，同时也能提高反馈标签的质量（用户自己写新标签可能写错，或者新构造出了与现有某标签的同义标签）。因此，关于这个点主要有以下两个问题需要解决。</p><ul><li>如何利用标签数据为用户更好的推荐物品？</li><li>如何为用户推荐标签，以提高标签数据的质量？</li></ul><p>以用户反馈标签构造推荐算法，最简单的想法。首先可以找到用户最喜欢用的若干标签，然后找到拥有这些标签最多的对应物品，将这些物品推荐给用户。这个算法会非常倾向于热门标签对应的热门物品，为了提高推荐系统的新颖性，可以通过TF-IDF的方法去降低热门标签的权重，甚至同时惩罚热门物品。</p><p>复杂一点的算法，可以将用户，标签，物品三部分分别分开，构造成图结构的三部分顶点，然后同样用随机游走算法去推荐物品。基于标签的系统还有一个优点就是可以很好的根据标签生成推荐理由，增加用户的信任度，从而提高点击通过率。</p><p>为用户推荐标签的算法可以简单到只有一行代码，因为仅是一个排序算法。第一种，可以推荐系统中最常出现的标签；第二种方法，可以推荐给用户其本身最喜欢用的标签；第三种，推荐给用户的标签是待打标签物品最经常被打的标签。然后，还可以进一步地将它们线性加权起来使用。当然还可以用图结构下的随机游走算法确定所推荐的标签。</p><h2 id="利用上下文信息"><a href="#利用上下文信息" class="headerlink" title="利用上下文信息"></a>利用上下文信息</h2><p>一个好的推荐系统往往要考虑多方面的信息。前面所述的所有推荐算法都可以增加关于用户时间信息，地理信息，用户心情信息等等上下文信息来辅助进行推荐。</p><p>以时间效应为例，我们在周中搜索的内容往往是工作相关的内容，周末搜索的往往是个人兴趣，呈现出强周期性；我们在冬天想要买的鞋子显然和夏天想要买的鞋子不是一样的种类；一个体育新闻只有刚发生时才是用户想要的，时间越久用户对于他的兴趣是越低的。如果能够基于此能够特定调整推荐系统的推荐内容，相信会提高用户的满意度。加上时间信息之后，推荐系统就相当于多了一个时间的维度，成为一个时变系统。</p><p>推荐系统的时效性分为近期和远期两种。这需要算法平衡用户近期行为和远期行为。既要让推荐列表反映出用户近期行为所体现出的兴趣变化，又不能让推荐列表完全受用户近期行为的影响，保证推荐列表对用户兴趣的预测延续性。</p><p>另一方面，推荐系统应该在时间维度上体现出多样性这一特点。这要求加入用户有一段时间没有操作，推荐列表也能表现出一些变化。要做到这一点比较容易，大体有以下三种方法：</p><ul><li>推荐算法生成的时候本身就加入一些随机性。比如最后展示的是个结果是从排名前二十的结果中随机采样获取的。</li><li>对之前看到过的内容进行降权。减小再次生成的概率。</li><li>推荐系统集成若干种算法，可以根据时间信息，采取不同的算法推荐。</li></ul><p>如果从地理信息的位置信息考虑个性化推荐系统，有一种金字塔模型的集成算法思路。根据用户的地理位置信息进行树结构的划分，可以划分若干层。基于每一层的位置信息进行推荐内容的生成，最后展示的推荐信息是每一层信息的加权结合。心情信息也可以参照此思路采取类似的算法。</p><h2 id="利用社交网络信息"><a href="#利用社交网络信息" class="headerlink" title="利用社交网络信息"></a>利用社交网络信息</h2><p>根据社交网络的推荐给推荐系统带来最大的好处就是可以增加用户的信任度，其实是可以辅助解决新用户的冷启动问题。推荐系统的根本目的是提高用户点击率（满意度），而提升推荐物品的被信任程度和提升被推荐物品的准确度（惊喜度）是同时存在的两种实现方式。这种社会化推荐对于提升用户的广告接受度有着非常强烈的作用。</p><h3 id="基于社交网络的推荐"><a href="#基于社交网络的推荐" class="headerlink" title="基于社交网络的推荐"></a>基于社交网络的推荐</h3><p>最主要的社交网络信息从用户的注册邮件 / 手机通信录来获得，当然了，如果用户愿意绑定 自己的社交帐号到新网站。新网站有可能会获取用户的在社交网络中的关系以及兴趣点，以实现根据社交网络关系的推荐。</p><p>社交网络的数据一般分为三种，基于社区（小组）的弱关联社交关系；基于单向关注的社交关系（例如微博）；基于双向确认的强社交关系（例如微信）。</p><p>社交推荐同样可以采用基于邻域的推荐方法，以及基于图的推荐方法。值得注意的是，同热门物品权重过大的问题一样。社交网络关系中也存在”大V“这样的热门人物，需要有特殊的权重处理。另外，在实际应用中，UserCF的实用价值不高，因为在给一个用户作推荐的时候，需要他所有好友的历史行为数据，计算起来会比较缓慢。现有的社交网络推荐主要以信息流的方式存在，当某用户产生一条内容后，这条内容会出现在所有关注他的人的消息队列当中。如果这个消息是一条广告推荐，非常有利于提升其他用户对于广告品牌的好感以及对广告内容的接受程度。</p><h3 id="给用户推荐好友"><a href="#给用户推荐好友" class="headerlink" title="给用户推荐好友"></a>给用户推荐好友</h3><p>好友推荐系统的目的是根据用户的现有好友、以及用户的行为记录，给用户推荐信的朋友，从而提升整个社区的社交网络稠密性，提升用户粘性以及活跃度。</p><p>具体的推荐思路有以下几种。</p><ul><li>基于用户基本信息：例如用户的地点，年龄，性别，学校，职业等等信息推荐潜在的好友。</li><li>基于共同兴趣：UGC社区中一定会设计若干机制让用户对内容反馈。可以利用这些反馈数据构造用户的兴趣向量，通过计算向量相似度的方式找到潜在的好友。</li><li>基于社交网络图：根据用户的社交关系链进行推荐，就是著名的六度人脉网络理论。</li></ul><h2 id="推荐系统的架构"><a href="#推荐系统的架构" class="headerlink" title="推荐系统的架构"></a>推荐系统的架构</h2><p>推荐系统一般有UI设计，日志系统，后台存储系统，推荐算法等几个部分。</p><p><img src="http://imbowei.com/imagess/Recsys/推荐系统架构.png" alt=""></p><p>推荐系统往往有多个推荐引擎组成，每个推荐引擎负责一类特征和一种任务，而推荐系统的任务只是将推荐引擎的结果按照一定权重或者优先级合并、排序然后返回。所以Ranking组是一个比较核心的组？</p><p>这样组合一方面方便增加或者删除不同推荐引擎；另一方面在使用不同的推荐引擎的时候，可以获得到推荐引擎级别的用户反馈。</p><p><img src="http://imbowei.com/imagess/Recsys/推荐系统架构1.png" alt=""></p><p><img src="http://imbowei.com/imagess/Recsys/推荐系统架构2.png" alt=""></p><ul><li>A模块：负责从用户的基本统计信息，或者隐性、显性的用户行为数据中提取特征向量。</li><li>B模块：维护着若干项物品相关性表（从不同的角度分析）。</li><li>过滤功能：去掉用户已经见过的物品；去掉质量很差的物品；去掉不符合推荐候选（商业因素）的物品</li><li>排名模块：将推荐引擎得到的结果进一步排序（内容展现顺序很影响用户点击率），以期提高用户的满意度。<ul><li>新颖性：将匹配度较高，且流行度较低的长尾物品推荐给过滤模块。</li><li>多样性：精心选择内容属性（影响很大），尽量防止同一个推荐原因出现多次。已经被用过的推荐理由下次采样得到的权重减半就是一个常见的处理方式。</li><li>时间多样性：也就是所谓的实时性。可以记录用户上次的推荐内容，即使上次用户没有操作，用户下次登陆也不会再次推荐重复的内容（对已经看过的内容进行降权）。</li><li>用户反馈：排名模块<strong>最重要的部分</strong>就是用户反馈模块。用户反馈模块主要通过分析用户之前和推荐结果的交互日志，预测用户会对什么样的推荐结果比较感兴趣。如果推荐系统的目标是提高用户对推荐结果的点击率，那么可以利用点击模型（click model）预测用户是否会点击推荐结果。点击模型需要离线计算好，在线将模型加载到内存中。</li></ul></li></ul><h2 id="设计推荐系统的十个建议"><a href="#设计推荐系统的十个建议" class="headerlink" title="设计推荐系统的十个建议"></a>设计推荐系统的十个建议</h2><ol><li>确定你真的需要推荐系统：只有信息过载时候才需要，不要为了推荐而推荐。无论算法是否复杂，能过达到目的的系统就是好的系统。</li><li>确定商业目标和用户满意度之间的关系：用户满意度和商业目标并不一定是完全吻合的。商业目标更多关注短期，用户满意度则是长期收益。</li><li>选择合适的开发人员。</li><li>忘记冷启动：互联网大潮席卷每一个人，每个用户都不断的在互联网都吓自己的蛛丝马迹。我们有越来越多的初始数据来了解一个人，冷启动问题将慢慢消逝。</li><li>数据与算法：深刻理解数据是设计一个好的算法的必要前提。数据分析决定了如何设计模型，算法只是去优化这个模型。</li><li>呈现方式：找到相关值得推荐的物品不难，难的是以何种方式展现给用户，以提高用户的点击率。</li><li>社交网络的力量：社交推荐势必会慢慢替代陈旧的基于邻域的协同过滤算法，这是推荐系统的高地。</li><li>不断提高系统的、模型的可拓展性。</li><li>选择恰当的用户反馈方式。</li><li>设计合理的测评系统，关注推荐系统各个方面的性能。</li></ol><hr><p><a href="https://www.jianshu.com/p/282d1e90aaf9" target="_blank" rel="noopener">十年Recsys 总结</a></p><p><a href="https://blog.csdn.net/s1162276945/article/details/85177861" target="_blank" rel="noopener">2018 推荐系统总结</a></p>]]></content>
      
      <categories>
          
          <category> Recommend-system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UserCF </tag>
            
            <tag> ItemCF </tag>
            
            <tag> Collaborative-filtering </tag>
            
            <tag> Social-recommendation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python3复习总结</title>
      <link href="/2019/01/19/python3-tips/"/>
      <url>/2019/01/19/python3-tips/</url>
      <content type="html"><![CDATA[<p>抽空复习了一下python的语言特性，其中容易忘记、混淆的点特地记录如下。</p><a id="more"></a><hr><h3 id="python-特性"><a href="#python-特性" class="headerlink" title="python 特性"></a>python 特性</h3><ul><li>运行速度 <ol><li>python &gt; java &gt; c</li><li>c 适合充分发挥硬件性能的任务，贴近硬件的任务</li></ol></li><li>python 优点<ol><li>完善的基础代码库，高级语言，易理解，代码短而优雅</li><li>有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</li></ol></li><li>python 缺点<ol><li>因为不能编译后，发布编译后的机器语言文件。因此代码不能加密，如果发布python程序必须发布源代码</li><li>作为解释型语言，需要相应语言的解释器，“翻译”成目标代码后执行，不可脱离解释器运行。所以效率低……（不过这不是事儿，部署线上应用时网络更慢……）</li></ol></li><li>cpython 是使用最广的 python 解释器</li></ul><hr><h3 id="python-基础"><a href="#python-基础" class="headerlink" title="python 基础"></a>python 基础</h3><ul><li>输入输出<ol><li>a = input(‘写输入提示’)  输入数据的默认类型是字符串</li><li>print()</li></ol></li><li>基本数据类型<ol><li>因为是动态语言，不必事先设定好变量类型</li><li>==地板除 // 相当于取除法结果的整数部分==，常搭配取余运算。</li></ol></li><li>编码问题<ol><li>为了能统一表示各种语言，内存中用的是unicode编码，但是为了提升网络传输效率，我们保存的磁盘文件往往应该写成utf-8编码</li><li>格式化输出<ol><li>可以用占位符（%s） %d %f %s %x</li><li>.format() 函数</li></ol></li><li>list 和 tuple<ol><li>能用tuple 就多用，它一经建立就不可进行添加、删除等操作,相当于一个只读的list。这样代码更安全，鲁棒；</li><li>它们内部都可以放多种类型的数据；</li></ol></li><li>尽量避免过多地使用 continue 和 break 提前结束循环，因为这样会造成逻辑混乱。</li></ol></li><li>dic &amp; list<ol><li>随着数据量的变大，dic 的查询性能优势就会越好的体现出来</li><li>但是会比较占用内存</li><li>dic 是一种用空间换时间的方法，查询靠hash表完成</li></ol></li><li><p>set</p><ol><li><p>相当于dic 的 key ,同样不可放入重复的元素。这里的集合不可改变针对的是不可变元素，如果集合内有可变元素列表是可以改变的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">t1[<span class="number">-1</span>][<span class="number">-1</span>]=<span class="number">4</span></span><br><span class="line">t1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure></li></ol></li><li><p>不可变元素</p><ol><li>str、int 、float 、tuple 是不可变元素，对于改变它的操作，本质上是生成了一个新的字符串，应该定义一个新的变量指向这个新的字符串</li></ol></li></ul><hr><h3 id="函数"><a href="#函数" class="headerlink" title="　函数"></a>　函数</h3><ul><li><p>占位符</p><ol><li><strong>pass没有实际意义</strong>，用于没想好怎么写的函数体。先把程序框架搭起来</li></ol></li><li>返回值<ol><li>函数可以返回多个值。但其实相当于返回一个tuple组，多个变量接受对应位置的返回值。</li><li>默认的自动返回值是None</li></ol></li><li><p><strong>检查参数</strong></p><ol><li>在函数体内部首先检查参数的类型是否输入正确是一个好的习惯</li></ol></li><li><p>函数参数类型</p><ol><li>默认参数放在必选参数后面，默认参数一般是<strong>变化小的数</strong>。</li><li>使用默认参数可以有效降低调用函数的难度。<ol><li>==默认参数一定要是不可变对象==，否则每次调用默认参数其实都会改变默认参数的值，程序可能会出错<blockquote><p>程序设计能设计成不变对象（例如：str,None等扽那个）是最好的。因为不易导致修改数据带来的错误。而且在多任务的环境下不用加锁，因为数据是不会改变的。</p></blockquote></li></ol></li><li>当参数数量不确定的时候用可变参数，普通参数nums可以变成可变参数<em>nums。想将一个列表中数据都传入的时候也可以用 </em>list ， 可变参数传入函数后一一个元组的形式存在。</li><li>关键字参数**other 可以接受一个dic，即任意个数的带名字的参数。调用的时候和可变参数一样，可以直接传入一个dic </li><li>命名关键字参数。放在函数参数的最后，用一个 <em> 将他们与前面的位置参数分隔开。如果有可变参数将命名关键字参数与位置参数分隔开了，就不必再单独用一个 </em> 隔开他们</li><li>函数参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</li><li>但是最好不要同时使用多种参数类型，导致程序可解释性太差</li></ol></li><li><p>递归函数</p><ol><li>理论上，所有的递归函数都可以写成循环的形式。但是写成循环逻辑不清晰</li><li>递归函数要小心过深的调用会导致堆栈溢出（缺点）</li><li>采取尾递归的方式，递归函数值只会占用一个栈帧，就不会堆栈溢出了。即，return 的就是递归函数本身，而不是包含递归函数的一个表达式</li><li>可惜的是，与大多数编程语言一样，python 并没有实现尾递归的优化。任何递归函数都存在栈溢出的风险。</li><li>一个递归函数例子：汉诺塔！</li><li>对字符串进行递归删除的时候小心索引错误。</li></ol></li></ul><hr><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><ul><li><p>切片</p><ol><li>切片操作为什么在对于空字符串只能用S[0:1]不报错，而用s[0]就会报错？</li><li>==切片操作允许超出索引，或者部分缺失；但是对于数组取值是不可以的!==</li><li>切片操作能有效代替循环,简化程序</li></ol></li><li><p>迭代</p><ol><li>判断某变量是否可以迭代  isinstance(s, Iterable)</li><li>想获得迭代对象的角标可以用 enumerate()函数</li></ol></li><li><p>列表生成式</p><ol><li>把代码写在一行非常的简洁</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os <span class="comment"># 导入os模块，模块的概念后面讲到</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)] <span class="comment"># os.listdir可以列出文件和目录</span></span><br><span class="line">[<span class="string">'.emacs.d'</span>, <span class="string">'.ssh'</span>, <span class="string">'.Trash'</span>, <span class="string">'Adlm'</span>, <span class="string">'Applications'</span>, <span class="string">'Desktop'</span>, <span class="string">'Documents'</span>, <span class="string">'Downloads'</span>, <span class="string">'Library'</span>, <span class="string">'Movies'</span>, <span class="string">'Music'</span>, <span class="string">'Pictures'</span>, <span class="string">'Public'</span>, <span class="string">'VirtualBox VMs'</span>, <span class="string">'Workspace'</span>, <span class="string">'XCode'</span>]</span><br></pre></td></tr></table></figure><ul><li>生成器<ol><li>可以有效节省程序的内存，一个大的列表，其中的元素随着程序的运行而一个一个的生成。</li><li>直接将列表生成式的[] 改成（）就可以得到一个生成器</li><li>generator 保存的是生成数据的算法，可以通过for循环或者next()函数不断的迭代新生成的数据。</li><li>可以把生成器做成一个函数的形式调用，他和一般的函数执行顺序不一样。执行一小段，然后返回 yield，下次调用的时候接着上次执行的地方继续往下执行。</li><li>注意为生成器设置一个程序停止条件。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杨辉三角的迭代生成</span></span><br><span class="line"><span class="comment"># 停止条件和输出格式在调用的时候定义，最大限度地提高函数的重用率</span></span><br><span class="line"><span class="comment"># 列表元素还可以直接加？</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    l = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> l</span><br><span class="line">        l = [<span class="number">1</span>] + [l[n] + l[n + <span class="number">1</span>] <span class="keyword">for</span> n <span class="keyword">in</span> range(len(l) - <span class="number">1</span>)] + [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列的迭代生成</span></span><br><span class="line"><span class="comment"># 不需要中间变量的变量赋值方法，节省一点内存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br></pre></td></tr></table></figure><ul><li>迭代器<ol><li>可迭代对象list、tuple、dict、set、str、generator,带有yield 的generator function</li><li>判断是否可迭代 isinstance({}, Iterable)<br> True</li><li>相比于可迭代对象list ,迭代器iter([])的好处就是可以放入一个任意大的迭代对象，不会占用大量内存。</li></ol></li></ul><hr><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li><p>作用域</p><ol><li>类似_xxx和<strong>xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，</strong>abc等。一般的变量就是公开的</li><li>对于那些不需要外部引用的函数，都可以定义成_private()的private形式，代码更规范</li></ol></li><li><p>system</p><ol><li>sys.argv 可以存储命令行调用函数的所有变量（至少会有一个，就是.py的文件名本身）</li></ol></li></ul><hr><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h4><div class="table-container"><table><thead><tr><th>Func</th><th>语法</th><th>作用</th><th>retype</th></tr></thead><tbody><tr><td>hasattr</td><td>hasattr(object, name)</td><td>判断 对象中是否含有 该属性。</td><td>True / False</td></tr><tr><td>setattr</td><td>setattr(object, name, values)</td><td>给对象的属性 赋值，若属性不存在，先创建再赋值。</td><td>None</td></tr><tr><td>getattr</td><td>getattr(object, name[,default])</td><td>获取 属性数值。</td><td>属性存在时，返回 属性数值；否则根据 默认输出值 返回 或 报 AttributeError。</td></tr><tr><td>delattr</td><td>delattr(object, name)</td><td>删除属性。</td><td>属性存在则无返回，否则报 AttributeError。</td></tr></tbody></table></div><hr><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul><li>map &amp; reduce<ol><li>map(f(),iterable)  相当于把函数f作用在一个可迭代对象中的每一个元素，返回指是对应的处理后的 iterable 。</li><li>再看reduce的用法。reduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><ul><li><p>有用的 nonlocal 声明</p><ol><li>用于函数套嵌的内部函数。如果内部函数的变量与外部函数的变量重名，相当于在内部函数新建了一个同名变量，内部函数并不能访问修改外部函数的变量。</li><li>但是只要在内部函数声明 nonlocal ‘变量名’ 就可以让内部函数对外部变量进行==赋值==操作。</li><li>字典不需要nonlocal 声明就可以在内部函数改变外部字典。</li><li><strong>可以起到像静态变量的作用，‘只初始化一次，然后不断改变它</strong> ’ </li></ol></li><li><p>filter 过滤函数</p><ol><li>与map()函数的用法一致，都是输入量两个参数，第一个是一个函数，第二个是iterable</li><li>所需要的返回是True or False 返回的是一个iter（惰性计算） ,所以需要套一个list 才能继续工作</li><li><strong>字符串倒序技巧 str(s)[::-1]</strong></li></ol></li><li><p>sorted 排序高阶函数</p><ol><li>可以接受三个参数(‘排序对象’,key = ‘函数’,reverse = True)</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</span><br><span class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</span><br></pre></td></tr></table></figure><ul><li><p>返回函数</p><ol><li>当某些功能不必立即执行的时候，定义一个内部函数，返回该内部函数。</li><li>同样的语句调用两次，返回的两个函数也不会是一样的，他们的运行结果也相互独立</li><li>相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。++<em>编写起来都是坑</em>++</li><li>==返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。==</li></ol></li><li><p>lambda 函数</p><ol><li>冒号前面是函数参数，后面是函数体，运算结果就是函数返回值</li><li>匿名函数也是一个函数对象，也可以将其复制给一个变量，然后再通过变量调用它</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><ul><li><p>decorator 装饰器高级函数</p><ol><li>输入一个函数，返回一个函数。在代码运行的期间动态的为一些函数增加功能</li><li>def wrapper(<em>args, *</em>kw) 这样的函数能接受任意参数形式的函数作为参数，用在装饰器内部，接收旧函数，返回新函数是最好的选择。</li><li>一个普通的不需要参数的装饰器都要decorator 双层嵌套，而需要的参数的decorator 需要三层嵌套。</li><li>decorator 会使func.<strong>name</strong>发生变化，导致某些调用出错。可以在wrapper前面加上@functools.wraps(func)默认的装饰器。起到保持原函数名不变的功能。</li></ol></li><li><p>partail 偏函数</p><ol><li>为了简化我们对于常用函数的调用，可以用fu’nctools.partail() 固定函数的常用参数，返回一个新的函数，调用更方便</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><hr><h3 id="防坑指南"><a href="#防坑指南" class="headerlink" title="防坑指南"></a>防坑指南</h3><h4 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a>可变对象与不可变对象</h4><ul><li>不可变对象： int 、string 、float 、tuple</li><li>可变对象： list 、dict、set</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子一</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=b=[<span class="string">'hello'</span>,<span class="string">'world'</span>]；a.append(<span class="string">'hello'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="string">'hello'</span>,<span class="string">'world'</span>,<span class="string">'hello'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子二</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=b=<span class="string">'hello'</span>；a=<span class="string">'world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b) </span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>对于可变类型来说，两个变量名指向相同的内存地址的时候相当于给同一个内存地址起了两个名字。如果改变一个变量名的内容，并不会开辟新的内存，而是直接改变原来内存地址中的内容。也就是说对于不可变类型，不同的变量名指向的内存地址永远是相同的。</p><p>对于不可变类型来说，两个变量指向相同的内容时拥有共同的内存地址（id(arg) 命令可以查看），但是改变一个变量之后相当于另外开辟一块新内存，其内存 id 会随之改变。</p><p>但是起名可变和不可变的原因呢？是相对于函数传参来说的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a_int, b_list)</span>:</span></span><br><span class="line">    a_int = a_int + <span class="number">1</span></span><br><span class="line">    b_list.append(<span class="string">'13'</span>)</span><br><span class="line">    print(<span class="string">'inner a_int:'</span> + str(a_int))</span><br><span class="line">    print(<span class="string">'inner b_list:'</span> + str(b_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a_int = <span class="number">5</span></span><br><span class="line">    b_list = [<span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line">    c_list = b_list</span><br><span class="line"></span><br><span class="line">    test(a_int, c_list)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'outer a_int:'</span> + str(a_int))</span><br><span class="line">    print(<span class="string">'outer b_list:'</span> + str(b_list))</span><br><span class="line">    print(<span class="string">'outer c_list:'</span> + str(c_list))</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inner a_int:<span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inner b_list:[<span class="number">10</span>, <span class="number">11</span>, <span class="string">'13'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outer a_int:<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outer b_list:[<span class="number">10</span>, <span class="number">11</span>, <span class="string">'13'</span>]</span><br></pre></td></tr></table></figure><p>所谓的可变类型，就是传入函数中，函数中的变化会同步到函数外的变量。类似引用传递（可以把引用理解为一个箭头，这个箭头指向某块内存地址，而引用传递，传递过来的就是这个箭头，当你修改内容的时候，就是修改这个箭头所指向的内存地址中的内容，因为外部也是指向这个内存中的内容的，所以，在函数内部修改就会影响函数外部的内容。）</p><p>而不可变类型，传入函数中的操作会事先新创造一个内存地址，所以并不会影响函数外的变量值。类似值传递（表示传递直接传递变量的值，把传递过来的变量的值复制到形参中，这样在函数内部的操作不会影响到外部的变量）。</p><h4 id="初始化二维矩阵"><a href="#初始化二维矩阵" class="headerlink" title="初始化二维矩阵"></a>初始化二维矩阵</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下这种方法初始化以为矩阵没有问题，但是初始化二维矩阵的时候，只是相当于将它的一维列表复制了三次，如果更改某个元素，相当于更改了一列元素</span></span><br><span class="line">alist = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">multi = [[<span class="number">0</span>] * <span class="number">5</span>] * <span class="number">3</span></span><br><span class="line">multi[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">print(multi)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化二维矩阵最好如下操作。</span></span><br><span class="line">multilist = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">5</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">multilist[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">print(multilist)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><h4 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h4><ul><li><strong>直接赋值：</strong>其实就是对象的引用（别名）。</li></ul><p><img src="http://imbowei.com/imagess/Python_tips/%E8%B5%8B%E5%80%BC%E5%BC%95%E7%94%A8.png" alt="赋值引用"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">b = a</span><br><span class="line">b[<span class="number">-1</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(a,b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]]</span><br></pre></td></tr></table></figure><ul><li><strong>浅拷贝(copy)：</strong>拷贝父对象，对象的内部的子对象仍是相同的。</li></ul><p><img src="http://imbowei.com/imagess/Python_tips/%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="浅拷贝"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1=[1,2,3,[1,2,3]]</span><br><span class="line">l2=l1.copy()</span><br><span class="line">l2[-1].append(4)    # 子对象仍相同，同步变化</span><br><span class="line">l2.append(5)        # 父对象不同，不会同步变化</span><br><span class="line">print(l1,l2)</span><br><span class="line">&gt;&gt;&gt; [[1,2,3,[1,2,3,4]], [1,2,3,[1,2,3,4],5]]</span><br></pre></td></tr></table></figure><ul><li><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</li></ul><p><img src="http://imbowei.com/imagess/Python_tips/%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D.png" alt="深度拷贝"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">l1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">l2=copy.deepcopy(l1)</span><br><span class="line">l2[<span class="number">-1</span>].append(<span class="number">4</span>)</span><br><span class="line">print(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]] </span><br><span class="line"><span class="comment"># 深度拷贝是将原对象中所有的值完全复制一份存放在内存中(包括可变数据类型对象)。这样遇到原对象即使是更改，也不会影响其值。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制引用与copy.copy, copy.deepcopy</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]] <span class="comment">#原始对象</span></span><br><span class="line">b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line">a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)            <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line">print( <span class="string">'a = '</span>, a )</span><br><span class="line">print( <span class="string">'b = '</span>, b )</span><br><span class="line">print( <span class="string">'c = '</span>, c )</span><br><span class="line">print( <span class="string">'d = '</span>, d )</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'a = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'b = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'c = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'d = '</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]])</span><br></pre></td></tr></table></figure><h4 id="python-运算符优先级"><a href="#python-运算符优先级" class="headerlink" title="python 运算符优先级"></a>python 运算符优先级</h4><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ \</td><td></td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += <em>= *</em>=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">100</span> - <span class="number">25</span> * <span class="number">3</span> % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">97</span></span><br></pre></td></tr></table></figure><h4 id="IO-operations"><a href="#IO-operations" class="headerlink" title="IO operations"></a>IO operations</h4><h5 id="files-operations"><a href="#files-operations" class="headerlink" title="files operations"></a>files operations</h5><ul><li><code>read([size])</code> 文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，整个文件返回为一个字符串对象，文件很大时候</li><li><code>readline()</code> 每次读出一行内容，所以，读取时占用内存小，比较适合大文件，但是速度慢啊！（内存不够时采用）每次读取返回一个字符串对象。</li><li><code>reandlines()</code> 读取整个文件所有行，保存在一个列表(list)变量中，每行作为一个元素，但读取大文件会比较占内存。</li><li><code>linecache</code> 输出某个文件的第n行, 使用示例如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = lincache.getline(<span class="string">'a.txt'</span> , <span class="number">2</span>)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><h5 id="keyboard-operations"><a href="#keyboard-operations" class="headerlink" title="keyboard operations"></a>keyboard operations</h5><ul><li>raw_input([prompt]) 可以读取一行任意字符串 str，将返回 str.strip()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = raw_input(<span class="string">'请输入：'</span>)</span><br><span class="line">print(<span class="string">'你刚才输入了：'</span>+s)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>请输入：hhhh<br>你刚才输入了：hhhh</p></blockquote><ul><li>input([prompt]) 在  raw_input([prompt]) 的基础上多了一个接受表达式的功能，可以返回运算结果 。</li></ul><h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'s'</span>:<span class="number">1</span> , <span class="string">'w'</span>:<span class="number">1</span>&#125;</span><br><span class="line">b = &#123;<span class="string">'w'</span>:<span class="number">1</span> , <span class="string">'e'</span>:<span class="number">1</span>&#125;</span><br><span class="line">z = &#123;**a , **b&#125;</span><br></pre></td></tr></table></figure><ul><li>dict.update(dictnew)  命令可以用dictnew更新覆盖原有的字典</li><li>在数字作为字典的key值时候，整数和浮点数是相等的，即  {1：5，1.0：6} == {1：6}</li></ul><h4 id="str"><a href="#str" class="headerlink" title="str"></a>str</h4><ul><li><code>str.ljust(50,&#39;@&#39;)</code>  用 @ 将字符串填充为长度 50 ，@填补在字符串的后面。</li><li>字符串可以通过切片访问，但是不可以通过这种方式赋值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'456123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>,<span class="number">-1</span>] = <span class="string">'aaa'</span></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><ul><li><p>创建新字典的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(&#123;&#125;.fromkeys((<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>),(<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">&#123;<span class="number">1</span>: (<span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>: (<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>: (<span class="number">3</span>, <span class="number">4</span>)&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>从本质上讲，自带pop() 、append() 函数的列表结构是以 stack 为基础的。</p><h5 id="删除列表中的元素"><a href="#删除列表中的元素" class="headerlink" title="删除列表中的元素"></a>删除列表中的元素</h5><ul><li><p>del 删除某位置的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]  <span class="comment">#指定删除0位的元素</span></span><br><span class="line">print(a)</span><br><span class="line">---</span><br><span class="line">&gt; [<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p>list.remove() 删除某指定值元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">a.remove(<span class="string">'b'</span>) <span class="comment">#删除第一个匹配的指定元素，直接改变原数组，无返回值。</span></span><br><span class="line">print(a)</span><br><span class="line">---</span><br><span class="line">&gt; [<span class="string">'a'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p>list.pop() 删除指定位置元素，并且返回它的数值。如果没有参数，默认参数为”-1”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">b = [<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line"><span class="comment"># pop的命令，其有返回值，可赋值带出</span></span><br><span class="line">c = a.pop() <span class="comment">#默认删除-1位置元素'c',并将删除元素返回值赋值</span></span><br><span class="line">d = b.pop(<span class="number">0</span>) <span class="comment">#删除0位元素'd',并将删除元素返回值赋值</span></span><br><span class="line">print(a,b,c,d)</span><br><span class="line">---</span><br><span class="line">&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>] [<span class="string">'e'</span>, <span class="string">'f'</span>] c d</span><br></pre></td></tr></table></figure></li><li><p>list的引用才有append()函数，不可直接调用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误用法</span></span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>].append(<span class="number">9</span>)</span><br><span class="line">list().append(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 正确用法</span></span><br><span class="line">a = [<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a.append(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul><li>^ 符号不出现在中括号中，表示匹配开始字符；而出现在中括号中，表示匹配除了中括号中的其他所有字符。</li><li>\w  表示匹配字母、下划线或者数字 </li><li>\?  表示正则表达式中的非贪婪模式</li></ul><h4 id="staticmethod与-classmethod"><a href="#staticmethod与-classmethod" class="headerlink" title="@staticmethod与@classmethod"></a>@staticmethod与@classmethod</h4><p>python 面向对象中，不带装饰器的叫做实例方法， @classmethod 装饰的是<strong>类方法</strong>，@staticmethod 装饰是的<strong>静态方法</strong>。</p><p>静态方法，跟普通函数没什么区别，与类和实例都没有所谓的绑定关系，它只不过是碰巧存在类中的一个函数而已。不论是通过类还是实例都可以引用该方法。</p><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><ul><li>任何一个内置的<code>shuffle()</code>函数，返回值类型都为None，它们直接作用在原本的列表上，不会创建新对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">L = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">78</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">random.shuffle(L)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><ul><li><p>当 python 中表示复数的时候，复数之间<strong>不能比较大小</strong>。</p></li><li><p>python 中表示复数，实部可以是整数、也可以是浮点数； 而虚部是关于X轴的反转程度。</p></li><li><p>python 静态类变量可以被实例或者类本身访问并且修改。</p></li><li><p>heapq 是python自带的完全二叉树结构的类型，常用于堆排序（最小堆，不受初始数据顺序影响）</p></li><li><p>deque 是python中的双端队列结构</p></li><li><p>检查函数类型时候只写函数名，不加括号；调用函数时侯加括号，返回函数的运行结果值。</p></li><li><p>python 是弱语言类型， 不用对变量类型进行直接赋值。但如果调用一个未赋值对象会报 NameError 错误。</p></li><li><p>Python变量访问时有个LEGB原则，也就是说，变量访问时搜索顺序为Local ==&gt; Enclosing ==&gt; Global ==&gt; Builtin，其实很多语言都遵循这个规则。简单地说，访问变量时，先在当前作用域找，如果找到了就使用，如果没找到就继续到外层作用域看看有没有，找到了就使用，如果还是没找到就继续到更外层作用域找，如果已经到了最外层作用域了还是实在找不到就看看是不是内置对象，如果也不是，抛出异常。</p></li><li><p>自定义类中，如果我们想要返回特定信息。需要改变函数中的 <strong> str </strong>  方法</p></li><li><p>Stackless并非以库的形式和Python整合，Stackless提供的并发建模工具，比目前其它大多数传统编程语言所提供的工具都更加易用： 不仅用于Python自身，也包括Java、C++，以及其它语言。</p></li><li><p>Scrapy是Python进行网络抓取的第三方库，包含Scrapy引擎，下载器，爬虫，调度器，Item Pipeline以及中间件，并没有沟通隧道（connect）。</p></li></ul><hr><h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><h4 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h4><p>os.listdir(dirname)：列出dirname下的目录和文件</p><p>os.getcwd()：获得当前工作目录</p><p>os.curdir:返回当前目录（’.’)</p><p>os.chdir(dirname):改变工作目录到dirname</p><p>os.path.isdir(name):判断name是不是一个目录，name不是目录就返回false</p><p>os.path.isfile(name):判断name是不是一个文件，不存在name也返回false</p><p>os.path.exists(name):判断是否存在文件或目录name</p><p>os.path.getsize(name):获得文件大小，如果name是目录返回0</p><p>os.path.abspath(name):获得绝对路径</p><p>os.path.normpath(path):规范path字符串形式</p><p>os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）</p><p>os.path.splitext():分离文件名与扩展名</p><p>os.path.join(path,name):连接目录与文件名或目录</p><p>os.path.basename(path):返回文件名</p><p>os.path.dirname(path):返回文件路径</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">RUNOOB.COM</a></li></ul>]]></content>
      
      <categories>
          
          <category> Programming_language </category>
          
          <category> Python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File_operations </tag>
            
            <tag> Python3 </tag>
            
            <tag> Deepcopy </tag>
            
            <tag> Copy </tag>
            
            <tag> Generator </tag>
            
            <tag> Iterator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无名之辈不无名（A Cool Fish）</title>
      <link href="/2018/11/16/an-unknown-person-is-not-unknown/"/>
      <url>/2018/11/16/an-unknown-person-is-not-unknown/</url>
      <content type="html"><![CDATA[<p>感谢影片Cast阵容中的一个个“无名之辈”， 让我们置身于一个西南小城中，陪着一个个无名之辈度过了生命中的<strong>荒诞</strong>一天。 </p><a id="more"></a><blockquote><p>​       在一座山间小城中，一对低配劫匪、一个落魄的泼皮保安、一个身体残疾却性格彪悍的残毒舌女。以及一系列生活在社会不同轨迹上的小人物，在一个貌似平常的日子里，因为一把丢失的老枪和一桩当天发生在城中的乌龙劫案，从而被阴差阳错地拧到一起，发生的一幕幕令人啼笑皆非的荒诞喜剧。</p></blockquote><p><strong>以下剧透</strong></p><hr><h2 id="无名之保安"><a href="#无名之保安" class="headerlink" title="无名之保安"></a>无名之保安</h2><p>2018.11.16，贵州一个小城中，泼皮保安的一天从一场群架开始。</p><p><img src="http://imbowei.com/imagess/A_Cool_Fish/泼皮保安.webp" alt="泼皮保安"></p><p>为了一个欠债逃跑的老板，被吊在空中戏耍，被殴打。最终靠着武林绝学<strong>九阴白骨爪</strong>才得以侥幸逃脱，临了还不忘为自己捞点外快。捂着肿起来的眼角还死皮赖脸的勾搭警队队长，为了自己邀功请赏获得协警职位。下一幕，他又勾搭调侃卖菜大娘，顺手牵羊，欠账耍赖。</p><p>貌似，一个生活在社会底层的泼皮已经跃然纸上了。</p><p>然而，事实真是如此吗？</p><p>去赊账枣子送给学校老师，借口钱买了房，学校走廊上当众<strong>教育</strong>女儿，嗦他人吃剩下的粉。因为喝醉酒葬送自己的前程，妻子的生命。嗯，泼皮无误。</p><p>但其实，泼皮也有泼皮的认真，泼皮也有泼皮的执着，泼皮也有泼皮的爱。</p><p>泼皮认真了，他是真的想要找到那把枪。利用小市民心理，套取银行保安第一现场情况；厚脸皮的借口”要饭”吃，实则偷听警方线索；机智的守株待兔，”捕获”波波；“残忍”逼供，逐步揭开谜底；娱乐场所私自办案被误会，却依旧忍辱负重；巧设陷阱，乔装打扮，终获<strong>丢失的枪</strong>！</p><p>泼皮仅仅是为了协警的职位吗？不，他也有他的倔强，即使已经巧妙躲过一枪。警车上拿着水枪与<strong>悍匪</strong>对峙仍寸步不让。他是真的热爱警察这个行业。</p><p>同样的，泼皮是真的爱她的女儿。低声下气地向老师求情，然而尊严被老师和女儿踩碎一地。他也悉心照料自己的妹妹，妹妹受到侮辱时，会激动以泼皮暴力的方式解决问题；妹妹情绪不佳时，作为哥哥也会及时体察。</p><p>这，就是有血有肉的泼皮保安，一个无名之辈。</p><h2 id="无名之憨匪"><a href="#无名之憨匪" class="headerlink" title="无名之憨匪"></a>无名之憨匪</h2><p>2018.11.16，贵州一个小城中，两个悍匪的一天从一场抢劫开始。</p><p><img src="http://imbowei.com/imagess/A_Cool_Fish/情谊兄弟.webp" alt="情谊兄弟"></p><p>君见，他霸道嚣张。</p><p>抢劫“<strong>银行</strong>”，开枪示威。侵入民宅，一言不合就“<strong>一枪爆头</strong>”。得意洋洋的等待电视台报道他们哥俩的光辉事迹，雄心勃勃的计划哥俩的光明前程。</p><p><img src="http://imbowei.com/imagess/A_Cool_Fish/霸道悍匪.webp" alt="霸道悍匪"></p><p>不见，他自卑敏感，细腻温柔。</p><p>他看到电视台对他们的嘲讽时，痛苦癫狂。其实所谓的霸道张扬只是他坚硬的盔甲，真实的小我敏感又自卑，绝对不允许发生的事情是别人对他的玩弄的和嘲笑。而是什么将他从受辱的癫狂中解救出来呢？直到敏感的他意识到了眼前的毒舍女为什么一心求死，那种连大小便都无法自理的尴尬和痛苦他太有代入感了。他心软了，拍照，聊天，劫匪和毒蛇女度过了一个还算是“愉快”的下午，他细腻的吹干头发和衣服，准备了音乐，温柔的满足了她的每一个愿望。</p><p>貌似，他在楼门口吸完一支烟后，绝情地离开了。其实呢？离开是为了更好的回来。但是，自卑敏感的他不敢说出自己心中真实所想。他只会委婉地暗示，“路走得没了有桥的，桥也是路的一种”。而“后半辈子的桥，我陪你一起走”这么煽情丢脸的话，他一定是不会说出口的……他是真的想照顾她一辈子了，却阴差阳错地被夜晚的礼炮（一开始无名猥琐男听收音机时候有铺垫）吓得失手放枪……</p><p><img src="http://imbowei.com/imagess/A_Cool_Fish/蠢萌抢匪.webp" alt="蠢萌抢匪"></p><p>相比于前一位“悍匪”，后面这位无名大侠只能称之为“憨匪”了吧。</p><p>他的憨是那种真的憨，不是假的憨，是由内到外往外冒泡泡的憨。。。憨憨的他也自然而然地承包了本片的很多笑点，天然憨的他也和霸道冲动的他也组成了一对“黄金搭档”。你负责放枪耍威风，我就负责卖萌装手机；你负责下令逃跑。我就负责搞笑耍宝；你负责暴怒冲动，我负责冷静劝架；不敢想象没有他，他们两个还会不会在毒舌女的攻击下全身而退。</p><p>连编剧设计的台词都那么恰到好处的为他量身定做，咕嘟咕嘟的往外冒着憨气……</p><blockquote><p> “如果抢劫分到十万块，七万块装修，两万块结婚，剩下的一万全部给你买棒棒糖。谁让你最喜欢吃棒棒糖呢。”</p></blockquote><p><img src="http://imbowei.com/imagess/A_Cool_Fish/最憨劫匪.webp" alt="最憨劫匪"></p><p>这，就是“年度最憨”劫匪，两个来自十八线小寨子的无名之辈。</p><h2 id="无名之残女"><a href="#无名之残女" class="headerlink" title="无名之残女"></a>无名之残女</h2><p>2018.11.16，贵州一个小城中，一个残女的一天从新的绝望开始。</p><p><img src="http://imbowei.com/imagess/A_Cool_Fish/无名残女.webp" alt="无名残女"></p><p>当飞来横祸，姐姐去世，自己高位截瘫，生活不能自理，你会怎么办？一睁眼，又是新的绝望的一天。</p><p>可是这一天，还是有点不一样的。自己拼了老命的毒舌，终于把碍手碍脚的保姆骂走了。然而，从窗户里却飞进两个不速之客。刚开始，也还是害怕的啊，直到被激怒的一个悍匪冲动的将猎枪对准自己的脑门。红了眼眶的她想到了一个能让自己快速摆脱惨淡余生的方法。所以啊，她拉着两个劫匪不放，肆意地调笑、怒骂，只求一死。直到……直到……她无法控制的小便失禁，尴尬的现场触动了两个男人内心深处的善良，帮她完成最后的愿望。</p><p>多么欢乐的一个下午，浑身都不能动的她要被吊着摆出各种动作拍照。却意外发现，躺在地上是更为有趣的方法。欢乐是短暂的，该来的黄昏总会来的。貌似，一切都没有变，路的尽头没有了路；貌似，有什么悄悄变化了，路的尽头还有桥。即使和哥哥的最后一次对话恋恋不舍，也还是会破口大骂。我们终于明白最终，毒舌不是她的本色，而只是保护色。即使恋恋不舍地要抱抱，也不肯改变自己的决定 。倔强的她还是要求打开煤气，告别这她爱的世界。</p><p>这，就是一个残废毒舌女，来自西南小城的无名之辈。</p><h2 id="无名之辈不无名"><a href="#无名之辈不无名" class="headerlink" title="无名之辈不无名"></a>无名之辈不无名</h2><p>其实啊，无名之辈不无名。这不，我们不都知道他们是谁吗？</p><p>你是泼皮保安马先勇，你是陈建斌；</p><p>你是截瘫毒舌马嘉旗，你是任素汐；</p><p>你是憨萌劫匪李海根，你是潘斌龙；</p><p>你是霸道劫匪胡广生，你是章宇；</p><p>你是潜逃老赖高明，你是王砚辉；</p><p>你是……</p><p>谢谢这一个个“无名之辈”为我们上演了一出最热血、最荒诞、最搞笑、最悬疑、最奇葩的“无名之辈”。</p>]]></content>
      
      <categories>
          
          <category> Movie </category>
          
          <category> Absurd-comedy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Movie </tag>
            
            <tag> Absurd </tag>
            
            <tag> Comedy </tag>
            
            <tag> Multithreading </tag>
            
            <tag> A-Cool-Fish </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BERT：From Transformer Architecture to Transfer Learning</title>
      <link href="/2018/10/27/From-transformer-architecture-to-transfer-learning/"/>
      <url>/2018/10/27/From-transformer-architecture-to-transfer-learning/</url>
      <content type="html"><![CDATA[<p>半个月前BERT横空出世，在数十个数据集上屠榜，一时风头无两。外加国内一些科技自媒体的“UC式”标题推波助澜，也给这篇文章博得了更多的关注。为了更好的理解BERT，我们需要先理解Attention和Transformer结构。然后可以集中精力从Transfer Learning的角度来比较ELMo，GPT，BERT这三篇文章的优劣异同。 </p><a id="more"></a><hr><blockquote class="blockquote-center"><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2></blockquote><p>什么是注意力机制？可以想象这样一个画面，当电视机上有非常吸引我们的画面时，我们的视野之中除了电视画面，眼中所看到的屋子中的其他部分仿佛都变得模糊了。甚至妈妈在你的面前从一侧穿行到另外一侧，你都毫无察觉。</p><p>有所关注，有所忽略——这便是注意力机制。</p><p>从生物进化的角度上来讲，这是十分合理的“节能减排”，我们的大脑将资源集中分到了我们最关心的事物上面，让我们免受其他事务的干扰。</p><p>Attention机制最早应用于<a href="http://papers.nips.cc/paper/5542-recurrent-models-of-visual-attention.pdf" target="_blank" rel="noopener">视觉领域的分类问题</a>，而为了更好的取得词向量表达， <a href="https://arxiv.org/pdf/1406.1078.pdf" target="_blank" rel="noopener">Bengio</a> 在2014年引入了Attention机制，这极大的提升了NMT方法的性能。尽管仍存在训练时间长，OOV，可解释性差等问题，但某些性能指标上已经媲美SMT系统，并大大减少了形态学和句法错误，提升了翻译的流畅性。这篇论文也直接影响Google在2016年用GNMT系统替换掉了上线十年之久的PBMT系统，不仅将Attention机制推到闪耀的聚光灯之下，也彻底将SMT方法推下了机器翻译的神坛，开启了NMT方法狂飙的时代。</p><p><img src="https://i.loli.net/2018/11/05/5bdfb4b9098ff.png" alt="NMT系统的发展趋势"></p><p>以2013年Nal Kalchbrenner 和 Phil Blunsom的 <a href="http://www.aclweb.org/anthology/D13-1176" target="_blank" rel="noopener">Recurrent Continuous Translation Models</a> 论文为标志，神经网络机器翻译诞生。该文整体采用编码器——解码器框架，用CNN将源文本编码成特定的向量，再用一个RNN作为解码器将该向量转化为目标语言。但由于梯度消失/爆炸问题的存在， 长距离依存问题制约模型的表现。 为了缓解这一问题，<a href="http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf" target="_blank" rel="noopener">Sutskever et al.</a> 和 <a href="https://arxiv.org/pdf/1406.1078.pdf" target="_blank" rel="noopener">Cho et al.</a> 引入了LSTM。</p><p><img src="https://i.loli.net/2018/11/05/5bdfb4ece6372.png" alt="GNMT系统效果图"></p><h3 id="Attention-Mechanism"><a href="#Attention-Mechanism" class="headerlink" title="Attention Mechanism"></a>Attention Mechanism</h3><p>以上就是Attention机制在NLP领域的应用背景和重要意义，下面我们来详细理解它的作用机制。</p><h4 id="Seq2seq"><a href="#Seq2seq" class="headerlink" title="Seq2seq"></a>Seq2seq</h4><p>普通的LSTM是采取的是序列编码的方式来获取信息，这样的一大好处就是在编码的时候可以得到词语的远距离依赖信息。如下图所示：我们在编码“力量”的时候，可以知道“知识”是它的来源。</p><p><img src="https://i.loli.net/2018/11/05/5bdfb68fe72f4.png" alt="A Example Seq2seq"></p><p>下面我们来看一个形象化的基于sequence-to-sequence框架的NMT模型。先看编码器，除了最初状态之外，后续每个状态都接收前一个状态的编码信息以及当前位置的源句子词语信息，整个源句子顺次编码。在编码完源句子最后一个词的信息之后，才执行解码操作。同样的，解码结构也是顺序执行的。视频中给出的过程应该是测试过程，前一个位置没有传递给下一个位置真实的解码词语参考，而在训练过程中是要给出的。</p><iframe width="100%" height="540" align="middle" src="http://imbowei.com/imagess/Attention/seq2seq_6.mp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Seq2seq构架的劣势也不难发现：</p><ol><li>如果单向RNN编码，前面的词语在先行编码的时候没有办法得到后面词语的信息； 一个形象的例子，</li></ol><div class="note info"><p>“I arrived at the <span id="inline-purple">bank</span> after crossing the <span id="inline-blue">….</span> ”</p></div><p>我们在不知道后面省略的单词是 <span id="inline-blue">river</span> or <span id="inline-blue">road</span> 的前提下，该如果编码单词 <span id="inline-purple">bank</span>  的真实含义呢？</p><ol><li>信息损失：如果句子很长，两次词语之间相隔比较远，信息传递过程中的损失比较大；</li><li>信息糅杂：最后一个状态中理论上包含前面所有的信息，所有信息都杂糅在一起不好区分；</li><li>顺序编码本质上是一个马尔可夫决策过程，无法很好的得到全局信息；</li><li><strong>无法并行计算</strong>，只有当所有词语都编码结束的时候才可以开始解码，系统的训练速度很慢；</li></ol><h4 id="Seq2seq-Attention"><a href="#Seq2seq-Attention" class="headerlink" title="Seq2seq+Attention"></a>Seq2seq+Attention</h4><p>加上Attention Mechainism的seq2seq结构解决了上述 Long Range Dependence弊端。与seq2seq过程对比，我们观察下面一个视频。</p><iframe width="100%" height="540" align="middle" src="http://imbowei.com/imagess/Attention/seq2seq_7.mp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ol><li><p>首先避免信息缺失问题，将Encoder每个时刻的状态都传递给Decoder，而不是只传递Encoder最后一个时刻的状态。最大程度上保留源句子的信息。</p></li><li><p>其次，为了避免信息冗余，我们如何只在每个时刻关注我们最关心的部分呢？用一个动态的权重向量（注意力分布），根据其与所有Encoder的隐藏状态信息的相似性大小进行加权求和。加权计算的过程，如下视频所示。</p><iframe width="100%" height="540" align="middle" src="http://imbowei.com/imagess/Attention/attention_process.mp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><p>最后，解码时，每一时刻的注意力分布都由这一时刻的解码hidden states来决定。这一时刻的hidden states的输出和注意力机制加权过的向量拼接后归一化，概率最大的一维所对应的词语就是我们这一时刻的翻译结果。过程如下动画所示。</p></li></ol><iframe width="100%" height="540" align="middle" src="http://imbowei.com/imagess/Attention/attention_tensor_dance.mp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>经过上述Attention结构上的剖析，我们再次来总结什么是 Attention 机制？</p><p>在我看来，Attention 其实就是一种用在Seq2seq构架上的加权词对其模型。起名为注意力机制，一方面是为了可以从大众容易理解的方式更好的解释模型设计的合理性；另一方面，我认为也是为了更容易完成学术投稿吧。Just a writing trick！</p><blockquote class="blockquote-center"><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2></blockquote><p>在GNMT掀起神经网络机器翻译的热潮之后，Amazon、Microsoft、Facebook、百度、网易有道、腾讯 、搜狗、讯飞、阿里巴巴等公司都迅速跟进。其中Facebook以CNN为基础的NMT模型不但效果超过了Google的GNMT，而且在训练速度上也比前者大幅提升九倍。</p><p><img src="https://i.loli.net/2018/11/05/5be0216d8c44d.png" alt="2017年NMT模型效果对比"></p><p>Google可不能容忍这个风头被抢，作为回应，2017.06谷歌发布了一个完全以注意力机制为基础的NMT模型，也就是我们常说的Transformer。整体构架如下所示，观察模型结构，正如作者所说，Attention is all you need。</p><p><img src="https://i.loli.net/2018/11/05/5be0262cb117e.png" alt="Transformer Architecture"></p><h3 id="Self-Attention"><a href="#Self-Attention" class="headerlink" title="Self-Attention"></a>Self-Attention</h3><p>对于Transformer构架而言，最核心的部分莫过于Self-attention。如下图所示，每个词语的初始向量乘以三个权重矩阵得到q、k、v三个向量。重新编码每个词语的时候，所有词语的k向量分别与该词语的q向量相乘，然后除以模型维数的开方，最终权重归一化成values向量的权重值。这样的操作，是根据词语向量之间的相似度来完成的。也就是说，每个词语的新向量必然还是会以自身的原本的信息为主要组成部分，只是在此基础上无距离差别的补充了与其他词语的相关性信息。相当于，我们通过整个句子中所有词语之间的相互关系获取了每个词语在句子中的重要性程度，有了更加丰富的语义信息。另外，所有词语获得新向量的过程是可以并行计算的（矩阵运算），即使模型的参数量巨大，在GPU的加持下也获得了远远高于LSTM的训练速度。</p><p><img src="https://i.loli.net/2018/11/06/5be0fe3f2715a.png" alt="Self-Attention"></p><script type="math/tex; mode=display">Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V</script><h3 id="Position-Embedding"><a href="#Position-Embedding" class="headerlink" title="Position Embedding"></a>Position Embedding</h3><p>上述Self-Attention虽然构思巧妙，但是只能说是一个精妙的词袋模型，并没有捕捉到任何次序信息。很不幸，这对翻译任务是致命的。为了能让这个简单的结构很好的工作，这个时候作者提供了一个额外的词向量去补充词语之间的位置关系，缓解这一缺陷。公式如下，采用的是三角函数的形式，好处是在测试的时候如果遇到超出我们训练长度限制的句子，模型也可以进行位置编码。</p><script type="math/tex; mode=display">PE_(pos,2i)=sin(\frac{pos}{10000^{\frac{2i}{d_{model}}}}) \\PE_(pos,2i+1)=cos(\frac{pos}{10000^{\frac{2i}{d_{model}}}})</script><p><img src="https://i.loli.net/2018/11/06/5be1434e29433.png" alt="Position Embedding"></p><p>然而，Position Embedding对于本身模型不能捕捉位置信息，只是起到了一个弥补的作用，并不能从根本上解决模型设计上的缺陷。在实验结果上也可以察觉出一些端倪，为什么同一语系的双语翻译的BLUE数值表现会比不同语系之间的双语翻译效果要好呢？我猜测是同一语系不同语言之间的语序差别较小，而不同语系语言之间的语序差别较大。甚至说，以BLUE作为翻译效果的自动评价指标对于Transformer模型也是占便宜的，因为语言模型本身对于语序正确的要求并没有很高。</p><h3 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h3><p>Multi-Head Attention这个概念是在这篇论文中第一次被提及，然而其实际操作并不罕见。其实就是将Self-Attention这一个过程随机初始化8次，相当于映射到不同的子空间，然后拼接起来并乘以权重向量产生输出层。 相当于我们从多种角度来理解同一个句子，以求更加完备的语义表达。</p><p><img src="https://i.loli.net/2018/11/06/5be14b45cf031.png" alt="Multi-Head Attention"></p><script type="math/tex; mode=display">MultiHead(Q,K,V)=Concat(head_1,...,headf_h)W^o \\where\ head_i = Attention(QW_i^Q,KW_i^K,VW_i^V)</script><p>最后我们来观察一下Multi-Head Attention的效果，已经其背后的含义。下面的第一张图片只展示了两次的Multi-Head Attention，我们还可以尝试来解释。黄色的注意力机制敏锐了步骤到了<strong>it</strong>这个代词所指代的对象，是<strong>animal</strong>；而绿色的注意力机制貌似是错误的，因为直接指向了一个动词<strong>tire</strong>。但细细琢磨，这似乎也有一定的道理，因为动词<strong>tire</strong>是服务于主语<strong>animal</strong>，而<strong>it</strong>在这里恰好指代的就是主语<strong>animal</strong>。</p><p><img src="https://i.loli.net/2018/11/06/5be14c3671643.png" alt="Multi-Head_1"></p><p>由上面的观察分析可以发现，多重的注意力机制确实可以捕捉到许多句子中隐含的语义细节，得到更好的句子标示。当这种语义表示维度过高时，我们往往难以解释其真实含义。但是，确实效果还不错。</p><p><img src="https://i.loli.net/2018/11/06/5be14c6092d68.png" alt="Multi-Head_2"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>总的来说，Transformer构架的核心思想是计算一句话中每个词对于这句话中其它所有词的相互关系，然后认为这些词与词之间的相互关系在一定程度上反应了这句话中不同词之间的关联性以及它们的重要程度。再利用这些相互关系来调整每个词的重要性（权重）就可以获得每个词新的表达。这个新的表征不但蕴含了该词本身，还蕴含了其他词与这个词的关系，因此和单纯的词向量相比是一个更加全局的表达。Transformer通过对输入的文本不断进行这样的注意力机制层和普通的非线性层交叠来得到最终的文本表达。拥有一个文本信息更加充分全面的表达，得到更好的BLUE数值表现也就顺理成章了。</p><p>根据上述介绍的模型结构，并且结合Transformer结构提出的背景，不难看出其浓重的CNN气息。具体的有以下几个方面：</p><ol><li>Attention是不是像一个没有感受野限制的CNN？所有单词之间的距离为一，一步到位的获得全局信息，免去的CNN的堆叠操作。</li><li>Multi-Head Attention多次运算进行拼接操作，对比CNN中的多个卷积核，是否感觉似曾相识？</li><li>同CNN一样，需要一个Position Embedding 来辅助获得位置信息。只不过这个更为“泛化的CNN”对Position Embedding的依赖更加严重。</li></ol><p>尽管作者的writing trick让人有些许反感，但这并不失为一篇好论文。</p><ul><li><p>首先，模型构架大道至简。感概Google工程师扎实的炼丹功底，如此简单的方法都可调出STOA。</p><ul><li>Attention 并不简简单单可以完成“词对齐”工作，而且可以完成序列到序列的转换。</li></ul></li><li><p>其次，写作清晰，整篇论文读起来很清爽，没有故弄玄虚的堆砌公式。（可惜没有Ablation Test，不能确定Transformer构架各个部分的作用效果）</p></li><li><p>最后，运用些许的写作技巧来提升自己工作的影响力这本无可厚非（这个名字确实太吸引人去阅读他们的论文了）。也是我需要尽快提高的地方。。</p></li></ul><blockquote class="blockquote-center"><h2 id="Transfer"><a href="#Transfer" class="headerlink" title="Transfer"></a>Transfer</h2></blockquote><p>源于Google扎实的工作（夸张的论文名字），Transformer 坐上了NMT模型的王座，更是在NLP领域一时风头无两，在众多任务上都取得了很好的表现。当其应用到迁移学习领域的时候，就创造出了现在Google另一个红透半边天的工作——BERT。</p><h3 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h3><p>2018初的NAACL上，AllenNLP祭出了大杀器ELMo。而Google将自身的 Transformer 构架用在迁移学习领域，相信少不了受到了这篇 <a href="https://arxiv.org/abs/1802.05365" target="_blank" rel="noopener">Deep contextualized word representations</a> 文章的启发。</p><p>在EMLo出现之前，不论时研究者习惯性地用word2vec去初始化，还是尝试性的用CNN、RNN等网络结构探索字符级别的文本向量。然而，无论再怎么折腾，怎么细化挖掘信息的级别。都有共同的一点，Embedding没有考虑到<span id="inline-blue">语境中的上下文信息</span> ，总是一成不变的，没有表征一词多义的能力。而EMLo拿出了极具说服力的表现告诉大家，是时候该放弃古老的word2vec了。。。</p><p>这篇论文有以下几个关键点：</p><ul><li>CNN提取字符（中文可以考虑拼音或者笔画）级别信息；</li><li>两个单向LSTM，<strong>loss相互独立</strong>；</li><li>浅层<strong>语法</strong>，深层<strong>语义</strong>；</li><li>层级输出线性加权，可以根据任务需要自训练不同的权重；</li></ul><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><p>趁热打铁，AllenNLP 又从迁移学习 Fine-tuning的角度发布了另一个重要工作——Improving Language Understanding by Generative Pre-training(GPT)。这个工作也直接引导出了Google的重磅论文BERT。如果说ELMo的野心只是想要取代Word2vec，成为NLP领域文本输入的标准操作。那GPT显然野心更大，其试图提出一个通用的框架网络，想要成为类似于图像领域的ResNet那样的神经网络骨架，以扭转现在研究task-specific方法愈演愈烈的风气。拯救近期国内外一些公司在某些固定的数据集上穷尽奇淫巧技去调试出一个个过拟合模型，抢占所谓的SOTA。</p><p>GPT提出了一个两阶段的模型。第一阶段，在大规模的无监督文本上训练一个单向的Transformer模型；第二阶段，只需要根据不同的任务要求，仅需要少量的特定标注数据进行调优训练，即可获得若干任务数据集上SOTA级别的表现。这样的迁移学习方法，极大的节省了为不同的特定任务进行人工标注数据的高昂成本需求。</p><p>GPT已经取得了很令人实验结果，有以下几个点值得我们多加关注：</p><ol><li>继续增加生语料，模型效果是否会继续提升？</li><li>泛化能力不够强，如果精细化调优技巧（类似：ULMFiT每一层设置不同的学习率？），会不会在适应各个任务的数据集上有更好的表现？</li><li>5GB语料，需要8块GPU训练一个月，如何合理的拓展出降低计算需求的方法？</li><li>现用的训练生语料，可能由于其自身局限性，导致模型认知世界产生偏差。</li></ol><h3 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h3><p>顺着GPT的思路，今年10月BERT的横空出世，无疑将2018年NLP领域无监督学习的热潮推向了一个新的高度! 先来看看它在GLUE leaderboard屠榜的盛况。</p><p><img src="https://i.loli.net/2018/11/07/5be2e43bed325.png" alt="GLUE leaderboard"></p><p>为什么BERT的性能如此只有优越呢？由于它在以下的几个方面在GPT的基础上有了进一步的突破：</p><h4 id="Deep-model"><a href="#Deep-model" class="headerlink" title="Deep model"></a>Deep model</h4><p>jacob 以极强的工程能力成功驾驭了一个深达24层、每层1024个神经元、并且Multi-dead数为16、总参数340M的巨大Transformer模型，再一次向我们证明了对于深度学习来说，深度&gt;宽度这一重要规律。当然，也体现了Transformer模型具有良好的稳定性这一重要优点，因为其本身就含有各种Normalization。</p><h4 id="Masked-LM"><a href="#Masked-LM" class="headerlink" title="Masked LM"></a>Masked LM</h4><p><img src="https://i.loli.net/2018/11/06/5be197e531ba6.png" alt="Bert"></p><p>观察上图，相比于GPT，BERT在训练上解决了无法使用双向Transformer的窘境。相比于ELMo，两个方向上的loss结合在一起，而不是相互独立，更大程度上释放了Transformer构架的信息采集能力。不难理解为什么双向的Transformer效果要更好，就像我们学习英语做完形填空。我们是只看半句填的准呢？还是前后半句都阅读完填的准呢？相信这不难回答。 双向训练具体是怎么做到的呢？观察下图，当模型层数加深的时候，在每个位置上已经有了原本这个位置上的词的信息，这对于词的预测任务来说无异于作弊，显然是不可行的一种方案。</p><p><img src="https://i.loli.net/2018/11/07/5be2ed16e4dcd.png" alt="双向Transformer的数据窥探问题"></p><p>那么怎么办呢？直接删除需要预测的词语吗？这会是原本的句子失去顺序信息，并且丢掉了这一个词的原本信息，显然不可取。替换为一个随机的词吗？但这会使模型难以收敛，也不可以。最后作者选择只将10%的词语进行随机处理（相当于噪声），而将80%的词用“mask”标记来遮盖，让模型通过这个编辑来学习该位置的填词。然而下游任务中显然不会存在这个“mask”标记，所以最后另外10%的词语我们保持原有这个原有正确的词语。虽然通过这样一个训练技巧，使得双向的Transformer可以正常的工作了。但是由于加入了大量的噪声，模型的收敛仍有待提升。</p><h4 id="Jointly-Pre-Train"><a href="#Jointly-Pre-Train" class="headerlink" title="Jointly Pre-Train"></a>Jointly Pre-Train</h4><p>由于很多的NLP下游任务涉及到句子之间关系的理解，例如：Question Answering (QA) 、Natural Language Inference (NLI)等等。作者在原有的loss函数后面新添加了一项关于句子间关系理解的loss，来进行联合训练。如下所示，这仅仅是一个简单的二分类问题。jacob将此处的训练模式与下游任务相统一，都是将两个句子一起作为输入（中间有间隔符[SEP]）。用无监督语料训练的时候，将一半的句子下一句进行随机句子采样，作为负例“NotNext”；而其余一半则直接给出真正的后句，作为正例“IsNext”。</p><blockquote><p> Input = [CLS] the man went to [MASK] store [SEP]   he bought a gallon [MASK] milk [SEP]</p><p>Label = IsNext</p><p>Input = [CLS] the man [MASK] to the store [SEP]   penguin [MASK] are flight ##less birds [SEP]</p><p>Label = NotNext</p></blockquote><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><p>昨天，<a href="https://github.com/google-research/bert/blob/master/multilingual.md" target="_blank" rel="noopener">中文定制版model</a>也可以在github上获取了。</p><h5 id="Position-Embedding-1"><a href="#Position-Embedding-1" class="headerlink" title="Position Embedding"></a>Position Embedding</h5><p>BERT并没有采取GNMT那篇论文中用三角函数来表达句子中词语位置的方法，而是直接设置句子的固定长度去训练Position Embedding，在每个词的位置随机初始化词向量，经过训练，将Position Embedding与Token Embedding、以及模型训练得到的Segment Embeddings 直接相加即可食用。如下图所示。</p><p><img src="https://i.loli.net/2018/11/08/5be39de16d099.png" alt="Embeddings"></p><h5 id="feature-based？"><a href="#feature-based？" class="headerlink" title="feature-based？"></a>feature-based？</h5><p>在倒数第二页的一栏，作者实验表明，BERT不仅仅是一个Fine-tuning迁移学习方法，还可以是一个Feature-based迁移学习方法，就像ELMo和Wordsvec。jacob用CoNLL-2003 NER数据集做了实验，feature-based（合并最后四层的输出）版本的BERT仅仅比fine-tuning版本的BERT低0.3的准确率，再次心疼一下帅不过三秒的ElMo和GPT。</p><h5 id="More-Data"><a href="#More-Data" class="headerlink" title="More Data"></a>More Data</h5><p>相比于GPT模型5GB、800M words 的训练数据，BERT更是用了惊人的3,200M words的训练数据。联想到GPT论文中提到，如果有更多的训练语料，该模型的效果还会进一步提升。我觉得在BERT论文中应该有一个关于Data size的Ablation study，然而令我失望的是我并没有找到。</p><div class="note danger no-icon"><p>在BERT巨大的提升背后，我想知道模型上的创新和训练数据数量上的增加，谁贡献更大一点呢？jacob似乎避而不谈。</p></div><blockquote class="blockquote-center"><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2></blockquote><p>总的来说，jacob凭借着高超的工程技能，海量的训练数据，以及强大的算力，完成了一篇里程碑级别论文。它的出现在NLP社区产生了重要的影响，并在以下的几方面给我们带来了许多的惊喜和思考：</p><ul><li>深度、双向的transformer构架具有强大的数据表示能力以及良好的稳定性；</li><li>Jointly Pre-Train 对于训练的帮助；</li><li>Pre-Training 的这把火会以何种形式烧到 NLG ？</li><li>One for All：手握大量资源的公司越来越倾向于发布一个简单粗暴的通用模型去解决一众问题，科研院校该何去何从？</li><li>Few-shot Learning：大数据的学习模式真的是机器学习的归宿吗？科研院校是否该从其他角度发力，来探索ML的未来？</li></ul><blockquote class="blockquote-center"><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2></blockquote><ul><li><a href="http://delivery.acm.org/10.1145/980000/972474/p263-brown.pdf?ip=115.27.204.47&amp;id=972474&amp;acc=OPEN&amp;key=BF85BBA5741FDC6E%2EAC95BC9DA5A3FA7E%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;__acm__=1541382525_61f1fb6c7dbdb82f34516a5c0f6c8545" target="_blank" rel="noopener">The Mathematics of Statistical Machine Translation: Parameter Estimation</a></li><li><a href="http://www.aclweb.org/anthology/D13-1176" target="_blank" rel="noopener">Recurrent Continuous Translation Models</a></li><li><a href="http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf" target="_blank" rel="noopener">Sequence to sequence learning with neural networks</a></li><li><a href="https://arxiv.org/pdf/1406.1078.pdf" target="_blank" rel="noopener">Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation</a></li><li><a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html" target="_blank" rel="noopener">Harvard NLP</a></li><li><a href="https://github.com/tensorflow/tensor2tensor" target="_blank" rel="noopener">Tensor2tensor</a></li><li><a href="https://gluebenchmark.com/leaderboard" target="_blank" rel="noopener">GLUE Leaderboard</a></li><li><a href="http://papers.nips.cc/paper/5542-recurrent-models-of-visual-attention.pdf" target="_blank" rel="noopener">Recurrent Models of Visual Attention</a></li><li><a href="https://arxiv.org/pdf/1409.0473.pdf" target="_blank" rel="noopener">Neural Machine Translation by Jointly Learning to Align and Translate</a></li><li><a href="https://arxiv.org/pdf/1508.04025.pdf" target="_blank" rel="noopener">Effective Approaches to Attention-based Neural Machine Translation</a></li><li><a href="http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf" target="_blank" rel="noopener">Attention is All you Need</a></li><li><a href="http://www.aclweb.org/anthology/P18-1031" target="_blank" rel="noopener">Universal Language Model Fine-tuning for Text Classification</a></li><li><a href="https://arxiv.org/pdf/1802.05365.pdf" target="_blank" rel="noopener">Deep Contextualized Word Representations</a></li><li><a href="https://www.cs.ubc.ca/~amuham01/LING530/papers/radford2018improving.pdf" target="_blank" rel="noopener">Improving Language Understanding by Generative Pre-training</a></li><li><a href="https://arxiv.org/pdf/1810.04805.pdf" target="_blank" rel="noopener">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></li><li><a href="https://arxiv.org/pdf/1706.05137.pdf" target="_blank" rel="noopener">One Model to Learn Them All</a></li><li><a href="https://arxiv.org/pdf/1706.03059.pdf" target="_blank" rel="noopener">Depthwise Separable Convolutions for Neural Machine Translation</a></li><li><a href="https://content.sciendo.com/view/journals/pralin/110/1/article-p43.xml" target="_blank" rel="noopener">Training Tips for the Transformer Model</a></li><li><a href="https://arxiv.org/pdf/1803.02155.pdf" target="_blank" rel="noopener">Self-Attention with Relative Position Representations</a></li><li><a href="https://arxiv.org/pdf/1804.04235.pdf" target="_blank" rel="noopener">Adafactor: Adaptive Learning Rates with Sublinear Memory Cost</a></li><li><a href="https://arxiv.org/pdf/1502.03167.pdf" target="_blank" rel="noopener">Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shif</a></li><li><a href="https://arxiv.org/pdf/1607.06450.pdf" target="_blank" rel="noopener">Layer Normalization</a></li><li><a href="https://arxiv.org/pdf/1607.06450.pdf" target="_blank" rel="noopener">Semi-supervised Sequence Learning</a></li></ul>]]></content>
      
      <categories>
          
          <category> Deep-learning </category>
          
          <category> Pre-training </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep-learning </tag>
            
            <tag> Transformer </tag>
            
            <tag> Attention </tag>
            
            <tag> Transfer-learning </tag>
            
            <tag> BERT </tag>
            
            <tag> GNMT </tag>
            
            <tag> Self-attention </tag>
            
            <tag> Multi-head-attention </tag>
            
            <tag> Positional-encoding </tag>
            
            <tag> ELMo </tag>
            
            <tag> Semi-supervised-learning </tag>
            
            <tag> Pre-training </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何写好学术论文？</title>
      <link href="/2018/09/29/How-to-write-a-great-paper/"/>
      <url>/2018/09/29/How-to-write-a-great-paper/</url>
      <content type="html"><![CDATA[<p>Since the last submission was rejected, I studied how to write English papers. The details are summarized as follows.</p><a id="more"></a><hr><h2 id="Several-Suggestions-for-writing-academic-papers"><a href="#Several-Suggestions-for-writing-academic-papers" class="headerlink" title="Several Suggestions for writing academic papers"></a>Several Suggestions for writing academic papers</h2><ol><li><p>Don’t wait: Just write</p><ul><li>Your idea -&gt; Write paper -&gt; Do research(Forces us to be clear, focused)</li><li>Do not be intimidated</li><li>When you research the related work before doing research, you can start to write a survey (3 pages), you can urge yourself to carefully investigate the related papers. In case you are doing experiments, you find that this idea has been done by others.</li><li>In the process of doing the experiment, you can continually modify the previous three pages. In this process, the paper has gradually formed (5—6 pages). Then add a chart of the experimental results.</li></ul></li><li><p>Identify your key idea </p><ul><li><p>Ask yourself why, not how.</p></li><li><p>A re-usable insight,  useful to the reader(<strong>one clear, sharp idea</strong>)</p></li><li>You want to infect the mind of your reader with your idea, <span id="inline-purple">like a virus</span>.</li><li>Papers are far more durable than programs.</li></ul></li><li><p>Tell <strong>one</strong> story(Your narrative flow)</p><ol><li>Do not assume that the reader wants to read your paper. You have to convince the reader to keep reading at every paragraph.</li><li>Before switching sections, always have the last paragraph of the previous one introduce it. More importantly, explain why the next section is needed.</li><li>Do not say “Here are some guarantees from our algorithm”. Introduce and justify its existence first.</li></ol><ul><li>Here is a problem</li><li>It’s an interesting problem </li><li>It’s an unsolved problem</li><li><strong>Here is my idea</strong></li><li>My idea works(details , data)</li><li>Here’s how my idea compares to other people’s approaches</li></ul></li><li><p>Nail your contributions to the mast</p><ul><li><span id="inline-yellow">Write the list of contributions</span>（The major contributions of this paper are summarized as follows:）<ul><li>Do not leave the reader to guess what your contributions are!</li><li>The list of contributions drives the entire paper: the paper substantiates the claims you have made</li><li>Reader thinks “gosh, if they can really deliver this, that’s be exciting; I’d better read on”</li><li>A brief description of each point in one or two sentences.</li></ul></li></ul></li><li><p>Related work: later</p><ul><li>The most important thing in the whole paper is my own point of view, put in front.</li><li>Fallacy: To make my work look good, I have to make other people’s work look bad.</li></ul></li><li><p>Put your readers first</p><ul><li><p>Remember: Explain it as if you were speaking to someone using a whiteboard </p></li><li><p><strong>Conveying the intuition is primary</strong>, not secondary</p><ul><li>Introduce the problem</li><li>Your idea</li><li>Using EXAMPLES and only then present the general case</li><li><strong>Do not recapitulate your personal journey of discovery</strong>.  This route may be soaked with your blood, but that is not interesting to the reader.</li><li>Instead, choose the most direct route to the idea.</li></ul></li><li><p>Once your reader has the intuition, she can follow the details (but not vice versa)</p></li><li><p>Even if she skips the details, she still takes away something valuable</p></li></ul></li><li><p>Listen to your readers</p><ul><li><p>Getting help</p><ul><li>Each reader can only read your paper for the first time once!  So use them carefully</li><li>Explain carefully what you want (“I got lost here” is much more important than “Jarva is mis-spelt”.)</li><li>Treat every review like gold dust Be (truly) grateful for criticism as well as praise</li><li>Read every criticism as a positive suggestion for something you could explain more clearly</li><li>DO NOT respond  <div class="note danger"><p>“you stupid person, I meant X”</p></div>  </li></ul></li><li><p>INSTEAD: fix the paper so that X is apparent even to the stupidest reader.</p></li><li><p>Thank them warmly.  They have given up their time for you.</p></li></ul></li><li><p>Language and Style</p><ul><li><p>Submit by the deadline</p></li><li><p>Keep to the length restrictions</p></li><li><p>Always use a spell checker</p></li><li><p><strong>Give strong visual structure</strong> to your paper using </p><ul><li>Figures and their captions are the first thing the reader will see!</li><li>Make them self-contained, with extremely concise and clear captions, saying what they mean and their conclusion.</li></ul></li><li><p>Find out how to draw pictures, and use them   </p></li><li><p><strong>Use the active voice</strong>（Use “we” as the subject）</p></li><li><p>Use simple, direct language</p></li></ul></li><li><p>Finish the paper 2 weeks before actual deadline</p><ul><li>Add colourized TODO notes (different colour for each author) in the document using \newcommand. This way you can easily remove them to generate a draft for submission.</li></ul></li><li><p>When there’s a paper you like, take literally notes, and try to understand why you liked reading it!</p></li></ol><h2 id="Paper-Structure"><a href="#Paper-Structure" class="headerlink" title="Paper Structure"></a>Paper Structure</h2><ul><li><p>Framing research problems (conference paper)</p><ul><li>Title (1000 readers)</li><li>Abstract (<strong>4 sentences</strong>, 100 readers)<ul><li>Do you have a clear problem statement in the abstract?</li><li>Can you write a research statement for your paper in a single sentence?</li><li>The “one thing” is stated in the first two lines of the abstract..…(two sentences)</li></ul></li><li>Introduction (1 page, 100 readers)<ul><li>Describe the problem<ul><li>Use an example to introduce the problem</li><li>Transform the sentence pattern and have a simple description of the problem, not a straightforward description.</li><li>“To the best of our knowledge, balabala……”</li></ul></li><li>State your contributions</li></ul></li><li>My idea(model) (2 pages, 10 readers)</li><li>The details(experiments) (4 pages, 3 readers)</li><li>Related work (1-2 pages, 10 readers)    </li><li>Conclusions and further work (0.5 pages)<ul><li>Good papers leave the reader with one solution to solving a specific problem; great papers leave the reader with new ideas for their own problems.</li><li>Don’t leave it up to your reader, always ask yourself “what have I learned” and make that explicit.</li></ul></li></ul><p>​    </p></li></ul><h2 id="Ideal-process"><a href="#Ideal-process" class="headerlink" title="Ideal  process"></a>Ideal  process</h2><ol><li>Write a rough 2-4 sentence abstract first (what, why, how)</li><li>Write the Model description next. This is easy, it’s the idea you’re trying out.</li><li>Then write the Experimental section (ie get the results). Add your results tables, create your graphs.</li><li>Then write the Discussion &amp; Conclusion sections (what did we learn from this?)</li><li>Finally write the Introduction (expand #1 by framing the research question, and introducing relevant background work)</li><li>Write the Abstract last.</li></ol><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.microsoft.com/en-us/research/academic-program/write-great-research-paper/" target="_blank" rel="noopener">Simon Peyton Jones’s 7 simple suggestions</a></p>]]></content>
      
      <categories>
          
          <category> Academic </category>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Write-a-paper </tag>
            
            <tag> Conference-papers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置便捷的开发环境（PyCharm &amp; Jupyter）</title>
      <link href="/2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/"/>
      <url>/2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/</url>
      <content type="html"><![CDATA[<p>由于在PyCharm中进行统计整理数据、画图等操作有诸多的不便。在本地的jupyter notebook进行处理又显得步骤繁琐（传输文件），故萌生在服务器搭建jupyter notebook的想法。两种工具优势互补，从而最大程度上集中注意力在项目本身，提升开发效率。</p><a id="more"></a><hr><p>“工欲善其事，必先利其器”，接下来看看如何用PyCharm和Jupyter配置最便捷的python开发环境。</p><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p><img src="https://i.loli.net/2018/09/17/5b9f9730d9ad0.png" alt="pycharm_start.png"></p><p>一打开软件界面，满满的科幻感迎面扑来。用色块构建的魔幻画面好似一张变形金刚的面庞。最新的版本加入了默认的Vim编辑模式，让强大的PyCharm更如猛虎添翼一般。</p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>打开设置界面的快捷键是<code>Ctrl+Alt+S</code>。</p><ul><li><p>背景色：软件默认的背景是白色的，这显然不符合我们广大程序员的审美。<code>File -&gt; Appearance &amp;Behaior -&gt; Appearance</code> 中可以修改， <span id="inline-black"> Darcula </span>  是常用的黑色主题。</p></li><li><p>字体：不出意外的话，你会认为它的字体有些小。<code>File -&gt; Editor -&gt; Font</code> 中可以放大，console中的代码和编辑区的代码设置方式类似。</p></li><li><p>主题：如果对默认主题的配色不满意，可以在 <code>File -&gt; Editor -&gt; Color Scheme</code> 中修改。</p></li><li><p>代码风格：在 <code>File -&gt; Editor -&gt; Code Style</code>  中，可以对不同类型的代码文件可以分别进行个性化设置。</p></li></ul><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><p>懒人改变世界，而程序员往往都很懒。。。能让计算机手工完成的内容绝对不会自己动手重复添加。</p><p>不难发现，在程序开发过程中，有一些代码基本没有变化，而且我们会经常性的重复使用。那么，这种傻傻很麻烦的事情最适合计算机来自动完成了。显然，开发PyCharm的程序员小哥想到了这一用户痛点。</p><p>在 <code>File -&gt; Editor -&gt; File and Code Templates</code>  中，我们可以将常用的文件类型中的一些常用代码写入该类型文件的默认模板中，例如。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure><p>除此之外，还可以在文件开头添加一些注释信息。如下所示：</p><p><img src="https://i.loli.net/2018/09/17/5b9fa0f68a77c.png" alt="pycharm_templates.png"></p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>一个好的开发环境不可能没有版本控制系统。</p><p>PyCharm内置了CVS、Git、Mercurial、Subversion等多种版本控制工具，我们只需要简单的配置即可使用。</p><p>从github上Clone 代码，上传保存，进行版本控制，多人协同开发，统统可以在软件内轻松地完成。</p><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>这是一个超级良心的免费功能，我相信即使这个功能收费，也会有很多程序员小哥继续使用PyCharm。在其他的地方写代码，我们都需要在本地调试好，再上传服务器。出问题后，再次修改，再次上传，非常浪费时间。那么如何简化本地代码和服务器代码之间的沟通工作呢？PyCharm也帮我们内置好了。</p><p>在<code>Tools -&gt; Deployment -&gt; Configurtion</code>中可以配置好多台服务器，如果服务器中的python环境配置良好，我们就不需要再单独在本地配置一遍。配置如下所示：</p><p><img src="https://i.loli.net/2018/09/17/5b9fafe16ee1a.png" alt="pycharm_connection.png"></p><p>在对应的位置填写好服务器的位置，自己的用户名和密码，以及想要打开的根目录（节省重复打开文件夹的时间）。</p><p>第二个选项卡Mappings中配置本地项目和服务器项目对应的映射关系。这里有个需要注意的地方，建议只将代码和训练语料分开存储，不要使训练语料成为映射项目的一部分，加快加载速度。在第一次配置好开发环境的时候，需要将服务器的一些文件下载到本地，需要稍等几分钟，以后就很幸福了！</p><p>在<code>Tools -&gt; Deployment -&gt; Configurtion</code>中选择本地文件的上传方式，我这里将<code>Ctrl+S</code>设置为本地保存并上传服务器。</p><h2 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter-notebook"></a>Jupyter-notebook</h2><p>对于jupyter notebook来说，它的缺点还是十分明显的。没有一个很好的框架，不能清晰的构建大型项目。也不曾拥有IDE<code>Ctrl+点击函数名</code>就可以跳转的方便功能，导致阅读代码吃力。</p><p>但同样的，它的对于PyCharm的优点也是无可替代的。</p><ul><li>PyCharm简直是一个科学计算的神奇，在做数据挖掘的时候，代码和报告（支持latex公式）高度融合，无需二次撰写。</li><li>在处理数据的时候，所有中间结果不会被擦除，都显示在对应的cell下面。方便调试，减轻记忆的工作量。</li><li>方便的<strong>图表展示</strong>，不像PyCharm那样，会新弹出一个窗口展示图片，图文融合在一起。</li><li>丰富的插件支持，高度自定义。</li><li>等等……</li></ul><p>虽然优点众多，但如果只能在本地运行也只能算是鸡肋。经常将工程中的部分文件从服务器传输到本地再分析，这是一件很累人的事情。</p><h3 id="服务器jupyter搭建"><a href="#服务器jupyter搭建" class="headerlink" title="服务器jupyter搭建"></a>服务器jupyter搭建</h3><ul><li><p>首先保证我们的linux服务器的python(Anaconda)环境已经配置好了。</p></li><li><p>打开Ipython,输入如下两行代码后，会生成一个字符串，例如”sha1:9305015210b4:32cad364c85e7f7a13b9efa137cfadf633cc62d“。请复制出来暂时保存，稍后会使用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure><ul><li>如果<code>~/.jupyter</code>路径下没有 <span id="inline-blue">  jupyter_notebook_config.py </span> ，则输入如下命令新建它。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><ul><li>新产生的文件中的所有内容都以注释的形式存在，直接在文件末尾加入如下几行代码，并根据自己的环境调整路径。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip = &apos;*&apos;  # 允许访问此服务器的 IP，星号表示任意 IP</span><br><span class="line">c.NotebookApp.password = u&apos;sha1:xxx:xxx&apos; # 之前生成的密码 hash 字串</span><br><span class="line">c.NotebookApp.open_browser = False # 运行时不打开本机浏览器</span><br><span class="line">c.NotebookApp.port = 12035 # 使用的端口</span><br><span class="line">c.NotebookApp.enable_mathjax = True # 启用 MathJax</span><br></pre></td></tr></table></figure><ul><li>由于大家公用的服务器，我并没有管理员权限，不能将jupyter notebook添加为系统级别的服务。我们只需执行如下命令就可以方便的在本地调用jupyter notebook了(服务器不会经常重启)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &gt; notebook.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><div class="note success"><p> 调用方式：在本地浏览器中输入`服务器地址:设置的端口号`即可。例如：165.32.65.109:7060 </p></div><h3 id="Jupyter-优化"><a href="#Jupyter-优化" class="headerlink" title="Jupyter 优化"></a>Jupyter 优化</h3><ul><li><p>感谢造轮子的大佬 <a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener"><strong>jupyter-themes</strong></a> ，为优化jupyter 做了一个很好的包。</p></li><li><p>更换主题</p><ul><li>对于程序员来说，Jupyter默认的白色背景不是很友好，为了和黑色的Pycharm更加搭配，可以先执行如下命令安装其他主题 <code>pip install jupyterthemes --user</code></li><li>安装好之后的操作很简单，如下例所示。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># list available themes</span><br><span class="line"># onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd</span><br><span class="line"># 列出所有可用的主题</span><br><span class="line">jt -l</span><br><span class="line"></span><br><span class="line"># select theme...</span><br><span class="line"># jt -t 主题名</span><br><span class="line">jt -t chesterish</span><br><span class="line"></span><br><span class="line"># restore default theme</span><br><span class="line"># NOTE: Need to delete browser cache after running jt -r</span><br><span class="line"># If this doesn&apos;t work, try starting a new notebook session.</span><br><span class="line"># 恢复默认主题</span><br><span class="line">jt -r</span><br><span class="line"></span><br><span class="line"># 更改主题，改变代码字体，改变代码大小，改变cell占屏幕宽度，</span><br><span class="line">jt -t oceans16 -f fira -fs 12 -cellw 90%</span><br></pre></td></tr></table></figure></li><li><p>自动代码补全</p><ul><li><p>虽然Jupyter也可以代码补全，但是总是需要多此一举的按一个Tab键，与PyCharm风格不搭配。</p></li><li><p>方法一：执行<code>ipython profile create</code> 命令，  <code>vim ~/.ipython/profile_default/ipython_config.py</code>，修改成如下样子。重启jupyter后生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## Activate greedy completion PENDING DEPRECTION. this is now mostly taken care</span><br><span class="line">#  of with Jedi.</span><br><span class="line">#</span><br><span class="line">#  This will enable completion on elements of lists, results of function calls,</span><br><span class="line">#  etc., but can be unsafe because the code is actually evaluated on TAB.</span><br><span class="line">c.Completer.greedy = True</span><br><span class="line"></span><br><span class="line">## Experimental: restrict time (in milliseconds) during which Jedi can compute</span><br><span class="line">#  types. Set to 0 to stop computing types. Non-zero value lower than 100ms may</span><br><span class="line">#  hurt performance by preventing jedi to build its cache.</span><br><span class="line">c.Completer.jedi_compute_type_timeout = 400</span><br><span class="line"></span><br><span class="line">## Experimental: Use Jedi to generate autocompletions. Off by default.</span><br><span class="line">c.Completer.use_jedi = True</span><br></pre></td></tr></table></figure></li><li><p>方法二：安装如下插件，如果报错，还需要更新配置一些包环境：</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions --user</span><br><span class="line">pip install jupyter_nbextensions_configurator --user</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade ipykernel --user</span><br><span class="line">chmod 777 ~/.local/share/jupyter/</span><br><span class="line">pip install --upgrade --user nbconvert</span><br><span class="line">pip install --upgrade jupyter_core jupyter_client --user</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，PyCharm 和 Jupyter 都已经配置完毕。今后PyCharm仍然是主力的代码编辑工具。但在工程构建过程中，免不了许多中间结果需要分析和查看，这个时候Jupyter就可以派上用场。进行轻量的模块化分析任务。另外，Jupyter也可以打开文本文件进行编辑（可以自由选择Vim/Sublime等编辑模式），这样就不用使用WinSCP来单独查看文件；Jupyter也可以打开Terminal，这样我们就不用再单独使用Xshell，Xming等软件。释放本地内存。</p><p>我们只需要开启浏览器和PyCharm就可以方便交互服务器，进行代码的版本控制，以及进行数据分析。接下来可以更加愉快的干活了！</p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyCharm </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win10平台下的常用软件</title>
      <link href="/2018/09/09/win10-software/"/>
      <url>/2018/09/09/win10-software/</url>
      <content type="html"><![CDATA[<p>由于电脑系统最近崩溃两次，让我有了备份常用软件清单的想法。工欲善其事必先利其器，不断追求效率的提升是一件很幸福的事情。清单不定期更新。</p><a id="more"></a><hr><blockquote class="blockquote-center"><h2 id="楔子"><a href="#楔子" class="headerlink" title=" 楔子"></a><span id="top-down-samll"> 楔子</span></h2></blockquote><p>由于组里面配备的电脑是金胜维硬盘，前一个月系统崩溃了两次，硬盘报废了。导致我花费了大量的时间重装系统，配置环境。</p><p>在此特地致谢<strong>良心的金胜维公司</strong>锻炼我重装系统的耐心。   🙃╮(╯▽╰)╭🙃</p><p>现在新换了三星的SSD，但还是决定记录一下常用的软件环境配置，为以后可能的迁移系统做准备（虽然也有可能直接入坑Linux了）。</p><blockquote class="blockquote-center"><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2></blockquote><ul><li><p>对于很多组织（学校/公司）来说，都会统一购买正版的win10系统，从相应的资源站点下载正版系统，并获取激活码即可。</p></li><li><p>在<a href="https://ultraiso.en.softonic.com/download" target="_blank" rel="noopener">这里</a>或者<a href="https://www.ultraiso.com/download.html" target="_blank" rel="noopener">这里</a>可以下载Ultraiso,将我们的正版系统制作成U盘安装。</p></li><li><p>台式机启动的时候按<code>Fn+F12</code>选择U盘启动（这里是Dell台式机），然后先格式化掉原有系统，重装正版系统。</p></li><li><p>安装系统后，登陆微软账号就可以将之前的主题配置找回。（前提在快捷键<code>win+i</code>后的<em>更新与安全</em>选项卡中同意配置同步）</p></li><li><p>双屏配置很简单（免去<code>Alt+Tab</code>之苦，还能多看几行代码），但找一个漂亮的壁纸就不简单了。可以在 <a href="https://www.ssyer.com/" target="_blank" rel="noopener">沙沙野</a> 找到很多漂亮的高清原图，然后按照显示器分辨率PS两张图出来就好了。</p><p><img src="https://i.loli.net/2018/09/09/5b94daca1d0e9.jpg" alt="IMG_20180908_211456.jpg"></p></li></ul><blockquote class="blockquote-center"><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2></blockquote><p>工欲善其事必先利其器，记录一下常用的一下软件。</p><h3 id="日常必备"><a href="#日常必备" class="headerlink" title="日常必备"></a>日常必备</h3><h4 id="Shadowsocks-SS"><a href="#Shadowsocks-SS" class="headerlink" title="Shadowsocks(SS)"></a>Shadowsocks(SS)</h4><p>如果学校/公司没有搭梯子，那只能自力更生了，<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">梯子在这里</a>，你只需要一台国外的服务器就好了~</p><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>可高度自定义的浏览器，搭配Google使用口味更佳哦（可以直接同步其他电脑的设置）。介绍一些有用的的插件（啧啧啧~）<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">插件商店</a></p><ul><li>Grammarly： 搭配 overleaf , 用于学术写作。</li><li>Google schoolar： 常用的学术搜索。</li><li>Google translate： 页面划词翻译。</li><li>Markdown here： 写漂亮得电子邮件。</li><li>qiniu upload files：七牛云插件（如果你用markdown写作的话）</li><li>低价保护/惠惠购物助手/购物党：淘宝京东等购物网站的比价插件~</li></ul><h4 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h4><p>有时候一些网站会有个人/公司，两个账号，浏览器记住密码的时候不方便，chrome搭配火狐使用。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>这是一个没有办法不用的东西。 <a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p><h4 id="Bandzip"><a href="#Bandzip" class="headerlink" title="Bandzip"></a>Bandzip</h4><p>口碑较好的一个压缩软件。</p><h4 id="Offices"><a href="#Offices" class="headerlink" title="Offices"></a>Offices</h4><p>这个没什么好说的，必须安装。就算你每天写markdown或者latex，但是别人会给你发word啊，┏┛墓┗┓…(((m -__-)m</p><h4 id="Teamviwer"><a href="#Teamviwer" class="headerlink" title="Teamviwer"></a>Teamviwer</h4><p>非常棒的远程连接软件，QQ什么的远程连接就别提了。。。有了它，在家加班再也不是梦想了！（这追求……）</p><ul><li>注册账号登陆就可以免去忘了记密码，请别人帮忙的尴尬。</li><li>切记，设置电脑永不休眠。要不然还是要麻烦别人了。</li></ul><h4 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h4><p>虽然可以远程服务器调试代码，但本地常备一个python环境调试代码也是必须的。</p><h3 id="不想用，但必须用的聊天软件"><a href="#不想用，但必须用的聊天软件" class="headerlink" title="不想用，但必须用的聊天软件"></a>不想用，但必须用的聊天软件</h3><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><p>还不是因为生活所迫……有本事别装啊   😀&lt;(＿　＿)&gt;😀</p><h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h4><p>还有少量的QQ交流的需要，但是又不想要哪些花里胡哨的没用功能，那就选择TIM吧，它的共享文档还是一个能用的功能。当然，如果没有交流需要，还是不要安装了，共享文档找Google。</p><h3 id="效率软件"><a href="#效率软件" class="headerlink" title="效率软件"></a>效率软件</h3><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><p>虽然现在win10已经内置了护眼功能，但是我还是一直使用这款简洁的软件（直接开机自启就好了）。</p><h4 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h4><p>毕竟2T的存储空间，还是有很多人在使用的。如果嫌弃它上传/下载速度慢又不想充网费，那就DIY吧。<a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">BaiduPCS-Go</a>（估计百度的程序员小哥哥假装自己没看见吧）。</p><h4 id="Photoshop"><a href="#Photoshop" class="headerlink" title="Photoshop"></a>Photoshop</h4><p>虽然不是专业人士，但是工作中遇到稍微处理一下图片的情景还不少，手边预备一个PS是不错的选择。</p><h4 id="关于英语"><a href="#关于英语" class="headerlink" title="关于英语"></a>关于英语</h4><ul><li>Aboboo：如果你练习英语口语，这是一个不错的选择。</li><li>有道词典：如果你经常查看英文论文/文档，但是英语又不太好。网易有道的划词翻译还是有很大帮助的。</li><li>灵格斯：专业强大的英文词典。</li></ul><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p>任选一种或多种皆可。</p><ul><li>Sublime：常用的文本编辑器，满足轻量级的代码查看需求，也有人将其自定义成轻量IDE，不能连接远程服务器是硬伤。</li><li>Atom：基于github社区的开源编辑器，可谓是含着金钥匙出生。可高度自定义（程序员的最爱），完全可以变成一个IDE……</li><li>Vs code：相比于它兄弟vs studio，这款代码查看软件还是可以考虑的。（不过我没考虑）</li><li>Notepad++：相比于前面三位选手，Notepad++最主要的优势是容量小，启动快，速度快，不占内存，其他功能也不差的。麻雀虽小，balabala~</li></ul><h4 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h4><p>电脑文件多而杂怎么办，windows 自带的搜索功能太慢怎么办？这款软件值得拥有。</p><h4 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h4><ul><li>Adobe reader：广大科研工作者的第一选择（我看很多老师们都用它……）</li><li>SumatraPDF：一个广受好评的PDF阅读器。</li><li>Gaaiho Reader：一个功能齐全的阅读器。</li><li>Pdf element：好用的编辑功能，当初为了它的OCR功能而下载。</li><li>Foxit pdf reader：用过一段时间的轻量、快速的PDF阅读器，但是标注不是很方便。</li><li>Drawbroad：windows 下一个很不错的产品，漂亮也方便标注，但是……还挺贵的，全价67￥，不过有打折甚至免费的时候，看看你能不能遇到了。</li><li>Xodo：漂亮简洁的界面，运行快速，批注方便，而且免费。但是！它暂时不支持撤销操作，不支持中文……</li></ul><h4 id="Textstudio"><a href="#Textstudio" class="headerlink" title="Textstudio"></a>Textstudio</h4><p>其实网页版的overleaf写论文已经很方便了。但是，遇到ddl，免费帐户还是有点吃力，可以在电脑上安装一个text studio,以备不时之需。</p><h4 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h4><ul><li><p>Typora: 专业的markdown编辑器，优点很多。昧着良心不列举了，虽然我此刻正在使用它记笔记。</p></li><li><p>Mark Text: 相比于Typora, 暗黑风格默认界面没有最上面的白色菜单栏，外观很不错。有一个斗图功能，如果是搞笑图片的爱好者，可能会对这个功能爱不释手。但是我没有发现打开历史文件的快捷方式，这一点稍有不便。</p></li></ul><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></h4><p>一款方便简洁的图传管理软件，支持多种图床，拖拽上传，自定义的图片链接直接放入粘贴板，直接粘贴即可。</p><h4 id="TranslucentTB"><a href="#TranslucentTB" class="headerlink" title="TranslucentTB"></a><a href="https://github.com/TranslucentTB/TranslucentTB/releases" target="_blank" rel="noopener">TranslucentTB</a></h4><p>一块小巧的系统插件，几乎不占用系统资源，方便的实现任务栏的半透明或者透明化，露出漂亮的桌面背景。</p><h4 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h4><p>画思维导图的软件，不想安装，也有网页版的<a href="http://naotu.baidu.com/home" target="_blank" rel="noopener">百度脑图</a>可以替代使用，百度为数不多的良心产品啊。</p><h4 id="Mendeley"><a href="#Mendeley" class="headerlink" title="Mendeley"></a>Mendeley</h4><p>window 平台常见的文献管理软件，虽然做的丑的一点，虽然会把你的文档在电脑里另外复制一份……但还是有一些用户的……</p><h4 id="PE制作"><a href="#PE制作" class="headerlink" title="PE制作"></a>PE制作</h4><p>大白菜/老毛桃这两个软件任选其一即可（这名字谁起的啊……）。</p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li>Pycharm： 配置导入，方便的代码跳转，自定义快捷键设定，还提供免费的远程服务器连接功能，还等什么啊？！真不明白用jupyter的人们是怎么写工程代码的……  <a href="https://www.jetbrains.com/pycharm-edu/download/" target="_blank" rel="noopener">Download</a></li><li>jupyter：存在即合理，虽然jupyter notebook 在工程构建方面略差pycharm一筹，但由于其便捷性的特点，处理数据的时候非常方便，广受数据科学家的喜爱。它与pycharm一起可以构建出最便捷的开发环境。</li><li>Xshell：连接服务器利器，可以改变常用服务器配置文件的存储位置，防止重装系统后再配置一遍……都是泪啊</li><li>Xming：提供远程服务器的图形界面。</li><li>winSCP：可以获取服务器的目录，通过本地的文本编辑器打开服务器上的文件。</li></ul><h4 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h4><ul><li>迅雷极速版：下载速度尚可，重点是没有广告！</li><li>IDM：下载速度很快，但是是收费软件。</li><li>uTorren：同样好用，但只有十五天试用期的下载软件。</li></ul><h4 id="电脑管理"><a href="#电脑管理" class="headerlink" title="电脑管理"></a>电脑管理</h4><p>如果对于电脑很熟悉，可以忽略以下软件。</p><ul><li>玩具大师（鲁大师）：有硬件检测，驱动更新，电脑温度异常等等不太常用的功能，但保不准需要偶尔用一下……</li><li>腾讯管家：可以方便地搜索一些国内的常见软件，管理开机时间等等。当然如果习惯自己配置电脑，也就不需要它了。</li></ul><h4 id="仅剩的娱乐"><a href="#仅剩的娱乐" class="headerlink" title="仅剩的娱乐"></a>仅剩的娱乐</h4><ul><li>网易云音乐：不多说，要不是因为版权问题，它会是一家独大的音乐软件吧~ 当然不安装也有网页版可以使用。</li><li>Potpalyter：一款小巧强大的视频播放器。</li></ul><blockquote class="blockquote-center"><h2 id="尾声"><a href="#尾声" class="headerlink" title=" 尾声"></a><span id="top-down-samll"> 尾声</span></h2></blockquote><p>上面列举了很多的软件，并且以后还会不定期的更新名单。</p><p>但其实，工具只是工具，它们能发挥出多大的生产力，最直接的影响因素还是用户本身。加油吧，皮卡丘~</p>]]></content>
      
      <categories>
          
          <category> Operating-system </category>
          
          <category> Win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flux </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> Pycharm </tag>
            
            <tag> Teamviwer </tag>
            
            <tag> Tpyora </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>双网卡配置：同时使用公司（学校/实验室）内网和外网</title>
      <link href="/2018/09/07/Dual-NIC-configuration/"/>
      <url>/2018/09/07/Dual-NIC-configuration/</url>
      <content type="html"><![CDATA[<p>没有一个好用的网络根本是没有办法好好工作的呀。最近通过改变路由表、调整网卡优先级，实现了内外网络的同时使用，终于可以愉快的上网了。</p><a id="more"></a><hr><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>实验室的内网实在是太慢了……即使是查资料也会有令人不悦的卡顿，更别说下载大规模数据。然而，学校的无线网还是不错的。但是，用学校的无线网怎么用实验室的服务器呢？</p><p>开始折腾。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>首先，自购一块无线网卡。并确认其可以正常工作。</p><p>这个时候，我们其实已经可以通过临时禁用有线网络，来使用无线网络下载数据等等……</p><p>但是，有线网络每次禁用启用都需要若干秒钟的时间，等待的滋味不好受呐。</p><h3 id="改变路由表"><a href="#改变路由表" class="headerlink" title="改变路由表"></a>改变路由表</h3><ul><li>快捷键<code>win+R</code> ，然后键入<code>cmd</code>回车。在cmd中键入命令<code>route print</code> 可以查看自己的当前路由表。</li><li><code>route delete #ip</code> 命令可以删除当前的路由表。在执行<code>route delete 0.0.0.0</code>后可以彻底禁用有线网络。</li><li>接着要添加内网的ip地址，以及无线外网的ip地址。用 <code>route add #ip</code>命令。</li></ul><p>总的来说，我们只需将上述三行代码写入一个.bat脚本中，以管理员权限运行就好了。比频繁的手动操作，等待网卡切换，节省很多时间。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">route delete 0.0.0.0</span><br><span class="line"></span><br><span class="line">route -p add 172.0.0.0 mask 255.0.0.0 172.31.202.1</span><br><span class="line"></span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 10.1.88.1</span><br></pre></td></tr></table></figure><h3 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h3><p>完成上述部分，貌似大功告成了，内网和外网都可以使用了。但是，此时很多国内的网站速度会非常之慢，慢到没有朋友……</p><p>这个时候就需要设置一下两块网卡的工作优先级。流程非常简单，如下图所示：</p><ul><li>从控制面板打开网络连接设置；</li><li>右键无线网络图标，选’属性‘；</li><li>双击“IPV4”，选取”高级”；</li><li>将自动跃点数改为固定的 <code>10</code>,一路确定保存。</li><li>同理，可以将有线网卡的自动跃点数设置为 <code>20</code>。</li><li>两张网卡的自动跃点数越小表示优先级越高。</li></ul><p>此时，我们就可以在实验室愉快的上网啦！</p><p><img src="https://i.loli.net/2018/09/07/5b9288ed79f38.png" alt="双网卡_1.png"></p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
          <category> Computer-network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hop-number </tag>
            
            <tag> Routing-table </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法的时间复杂度和空间复杂度</title>
      <link href="/2018/08/17/Summary-of-time-complexity-and-space-complexity/"/>
      <url>/2018/08/17/Summary-of-time-complexity-and-space-complexity/</url>
      <content type="html"><![CDATA[<p>趁假期复习了算法基础的时间复杂度和空间复杂度，整理一遍。</p><a id="more"></a><hr><h2 id="算法的有效性"><a href="#算法的有效性" class="headerlink" title="算法的有效性"></a>算法的有效性</h2><p>要想理解时间复杂度和空间复杂度这两个概念，首先要明白算法的含义。<br>所谓算法，是解决一类问题的通法，即一系列清晰无歧义的计算指令。</p><p>具体的，一个算法应该有以下五个方面的特性：</p><ul><li>输入（Input）：算法必须有输入量，用以刻画算法的初始条件（特殊情况也可以没有输入量，这时算法本身定义了初始状态）；</li><li>输出（Output）：算法应有一个或以上输出量，输出量是算法计算的结果。没有输出的算法毫无意义。</li><li>明确性（Definiteness）：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。</li><li>有限性（Finiteness）：算法必须在有限个步骤内完成任务。</li><li>有效性（Effectiveness）：算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现（又称可行性）。</li></ul><p>根据以上的定义，不难发现。每个算法只能解决具有特定特征的一类问题。然而，每个有固定输入输出的问题可以采取多种算法来决解。<br>那么，要怎么来比较解决同一个问题的不同算法之间的优劣呢？<br>这个时候，时间复杂度和空间复杂度就有了用武之地。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>所谓时间复杂度就是从初始状态到达最终状态中间需要多少步！</p><p>算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，在很大程度上能很好反映出算法的优劣与否。<br>验证算法的时间复杂度，我们有以下两个方法。</p><h4 id="事后统计"><a href="#事后统计" class="headerlink" title="事后统计"></a>事后统计</h4><p>一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。所以就有了事后统计的方法。<br>计算算法的时间复杂度，往往是为了评测算法的性能，设计更好的算法。这就给事后统计的方法带来了两个弊端。</p><ul><li>需要先实现算法设计，并至少运行一次。</li><li>统计算法时间容易受到计算机硬件、编程语言效率等环境因素影响。</li></ul><h4 id="事前分析"><a href="#事前分析" class="headerlink" title="事前分析"></a>事前分析</h4><p>由于事后统计的方法有上述的弊端，我们通常采取事先估计的方法来评价算法的时间复杂度。<br>为了更好的比较不同算法在处理统一问题上的效率，通常从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的重复执行的次数作为算法的时间量度，记为T(n)。<br>在这里，n为输入问题的规模。对于同一个问题来说，他的输入规模越大，往往时间复杂度也就越大。<br>关于输入问题规模n，有辅助函数f(n),来统计算法基本操作的频度。因此，算法的时间复杂度往往记为$T(n)=O(f(n))$。</p><p>为了简便，我们一般在计算时间复杂度往往选取最简单的f(n)表示。例如：$O(2n^2+n+1) = O (3n^2+n+3) = O(7n^2+n) = O(n_2)$ ，一般都只用$O(n_2)$表示就可以了。<br>也就是说，两个算法的时间频度不一样，但很有可能拥有相同的时间复杂度。<br>例如：$T(n)=n^2+3n+4$ 与 $T(n)=4n^2+2n+1$它们的频度不同，但时间复杂度相同，都为$O(n^2)$。</p><p>常见的算法时间复杂度由小到大依次为：<br><span id="inline-green"> $O(1)&lt;O(log_2(n))&lt;O(n)&lt;O(nlog_2(n))&lt;O(n^2)&lt;O(n^3)&lt;…&lt;O(n!)$ </span><br>下面的图片直观的表示他们之间复杂度关系。</p><p><img src="http://pc1z7pynx.bkt.clouddn.com/markdown-img-paste-20180822161350179.png" alt="常见的算法时间复杂度图示"></p><h6 id="事前估计主要影响因素"><a href="#事前估计主要影响因素" class="headerlink" title="事前估计主要影响因素"></a>事前估计主要影响因素</h6><ol><li>依据算法选用何种策略</li><li>问题的规模</li><li>书写语言的程序（语言的级别越高，执行效率就越低）</li><li>编写程序所产生的机器代码的质量</li><li>机器执行指令的速度</li></ol><h6 id="时间复杂度的分类"><a href="#时间复杂度的分类" class="headerlink" title="时间复杂度的分类"></a>时间复杂度的分类</h6><ul><li>最坏时间复杂度：输入数据状态最不理想情况下的时间复杂度，也就是算法时间复杂度的上界。若没有特别声明，时间复杂度就是指最坏时间复杂度。</li><li>平均时间复杂度：在所有可能的输入实例均以等概率出现的情况下，算法的期望时间复杂度。</li><li>最好时间复杂度：输入数据状态最理想情况下的时间复杂度。</li></ul><h5 id="时间复杂度预估步骤"><a href="#时间复杂度预估步骤" class="headerlink" title="时间复杂度预估步骤"></a>时间复杂度预估步骤</h5><ol><li>找出基本语句：算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体，被称作<strong>原操作</strong>。</li><li>计算基本语句的执行次数的数量级：只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：<strong>增长率</strong>。</li><li>用O()表示算法的时间性能：将基本语句执行次数的数量级放入O()中。</li></ol><h5 id="时间复杂度分析技巧"><a href="#时间复杂度分析技巧" class="headerlink" title="时间复杂度分析技巧"></a>时间复杂度分析技巧</h5><ul><li>简单语句：程序的输入输出、赋值等语句都近似认为需要$O(1)$时间。</li><li>顺序结构：需要依次执行一系列语句所用的时间可采用O()的”求和法则”，</li><li>选择结构：如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要$O(1)$时间。</li><li>循环结构：循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用O()的”乘法法则”。</li><li>复杂算法：将其分成几个容易估算的部分,然后利用求和法则和乘法法则计算整个算法的时间复杂度。</li><li>其他准则<ul><li>若$g(n)=O(f(n))$,则$O(f(n))+ O(g(n))= O(f(n))$</li><li>$O(Cf(n)) = O(f(n))$ , 其中C是一个正常数。</li></ul></li></ul><blockquote><p><strong>乘法法则</strong>: 是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$和 $T_2(n)=O(g(n))$,则 $T_1 T_2=O(f(n) g(n))$</p><p><strong>求和法则</strong>:是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$ 和 $T_2(n)=O(g(n))$,则 $T_1(n)+T_2(n)=O(max(f(n), g(n)))$<br>特别地,若$T_1(m)=O(f(m))$, $T_2(n)=O(g(n))$,则 $T_1(m)+T_2(n)=O(f(m)+g(n))$</p></blockquote><h5 id="实际演练"><a href="#实际演练" class="headerlink" title="实际演练"></a>实际演练</h5><ul><li>三个简单语句，$T(n)=O(1)$。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Temp=i;</span><br><span class="line">i=j;</span><br><span class="line">j=temp;</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><p> 如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是$O(1)$。</p></div><ul><li>因为 $O(n^2+1)=n^2$ ，忽略低阶项， 所以$T(n)=O(n^2)$；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="number">0</span>；                 （一次）</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">     sum++；            （n^<span class="number">2</span>次）</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p> 一般情况下，循环语句只需考虑循环体中语句的执行次数，忽略该语句中步长加1、终值判别、控制转移等成分，当有若干个循环语句嵌套时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。 </p></div><ul><li><p>语句①的频度是$n-1$,语句②的频度是$(n-1)*(2n+1)=2n^2-n-1$（乘法法则）, 所以$f(n)=2n^2-n-1+(n-1)=2n^2-2$（加法法则）, 最终 $O(2n^2-2)=n^2 $ , 即该程序的时间复杂度$T(n)=O(n^2)$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">     y=y+<span class="number">1</span>;                  ①</span><br><span class="line">     <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=(<span class="number">2</span>*n);j++)</span><br><span class="line">        x++;                 ②</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>语句①的频度：2；语句②的频度一般不考虑；语句③的频度：n-1；语句④的频度：n-1；语句⑤的频度：n-1；$T(n)=2+3(n-1)=3n-1=O(n)$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>;                        ①</span><br><span class="line">b=<span class="number">1</span>;                        ①</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)          ②</span><br><span class="line">&#123;</span><br><span class="line">   s=a+b;                   ③</span><br><span class="line">   b=a;　　　　　            ④</span><br><span class="line">   a=s;　　　　　            ⑤</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语句①的频度是1；设语句②的频度是f(n), 则：$f(n)&lt;=log_2(n)$。取最大值$f(n)=log_2(n)$,$T(n)=O(log_(n))$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;                        ①</span><br><span class="line"><span class="keyword">while</span> (i&lt;=n)</span><br><span class="line">   i=i*<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>$T(n)=O((n)(n+1)(n-1)/6)=O(n^3)$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;j;k++)</span><br><span class="line">            x=x+<span class="number">2</span>;             ①</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>设计算法的时候，我们还会关注空间复杂度，空间复杂度是算法在运行过程中临时占用的存储空间大小的度量, 同样是关于问题规模n的函数。表示为了支持你的计算所必需存储的状态最多有多少。<br>但根本上，算法的时间运行效率才是最重要的。只要算法占用的存储空间不要达到计算机无法接受的程度即可。所以，常常通过牺牲空间复杂度来换取算法更加高效的运行时间效率。</p><p>算法在计算机存储器上占用的空间包括三个部分。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不会随算法的不同而改变。这不是我们需要考虑的部分。</p><h4 id="算法本身"><a href="#算法本身" class="headerlink" title="算法本身"></a>算法本身</h4><p>存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这部分存储空间，就必须编写出较短的算法。然而，算法想要实际应用需要根据需求采取不同的编程语言来实现，不同编程语言实现的代码长短差别很大，然而存储空间都在可接受范围之内（通常不同编程语言的效率更受关注）。</p><h4 id="运行临时占用"><a href="#运行临时占用" class="headerlink" title="运行临时占用"></a>运行临时占用</h4><p>根据算法在运行过程中临时占用存储空间的不同，可以将算法分为两类。</p><ul><li>原地算法（in-place algorithm）：只需要占用少量的临时工作单元，而且<span id="inline-blue"> 不随问题规模的大小而改变 </span>，我们称这种算法是“就地”进行的，是节省存储的算法, <span id="inline-red"> 空间复杂度为O(1) </span>。</li><li>非原地算法（not-in-place）：需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元。<br>算法临时占用空间是考虑算法空间复杂度时主要考虑的部分。相比于随着问题输入规模扩大而扩大的非原地算法，原地算法是更加简洁高效的算法（仅考虑空间复杂度时）。</li></ul><h5 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h5><p>假设我们想要将拥有n个项目的数组反过来。一个最简单作这件事的方式是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function reverse(a[0..n])</span><br><span class="line">    allocate b[0..n]</span><br><span class="line">    for i from 0 to n</span><br><span class="line">        b[n - i] = a[i]</span><br><span class="line">    return b</span><br></pre></td></tr></table></figure></p><p>不幸地，这样需要$O(n)$的空间来创建b数组，且配置存储器通常是一件缓慢的运算。如果我们不再需要a，我们可使用这个原地算法，用它自己反转的内容来覆盖掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function reverse-in-place(a[0..n])</span><br><span class="line">    for i from 0 to floor(n/2)</span><br><span class="line">        swap(a[i], a[n-i])</span><br></pre></td></tr></table></figure></p><h3 id="排序算法分析"><a href="#排序算法分析" class="headerlink" title="排序算法分析"></a>排序算法分析</h3><p>了解算法的时间复杂度和空间复杂度之后，再看一些常用算法总结的时候就不会再向原来一样有雾里探花之感了。<br><img src="http://pc1z7pynx.bkt.clouddn.com/markdown-img-paste-20180822181641573.png" alt="常见排序算法总结"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/zolalad/article/details/11848739" target="_blank" rel="noopener">算法的时间复杂度和空间复杂度-总结</a><br><a href="https://zh.wikipedia.org/wiki/原地算法" target="_blank" rel="noopener">原地算法</a></p><!-- | 排序法 | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度 || --- | --- | --- | --- | --- || 冒泡排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 快速排序 | $O(n^2)$ | $O(n*log_2(n))$ | 不稳定 | $O(n*log_2(n))$~$O(n)$ || 选择排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 二叉树排序 | $O(n^2)$ | $O(n*log_2(n))$ | 不一定 | $O(n)$ || 插入排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 堆排序 | $O(n*log_2(n))$ | $O(n*log_2(n))$ | 不稳定 | $O(1)$ || 希尔排序 | O | O | 不稳定 | $O(1)$ | -->]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Time-complexity </tag>
            
            <tag> Space-complexity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AI发电厂——数据标注公司（国内数据标注公司服务调研）</title>
      <link href="/2018/08/07/Investigate-domestic-data-labeling-companies/"/>
      <url>/2018/08/07/Investigate-domestic-data-labeling-companies/</url>
      <content type="html"><![CDATA[<p>众所周知，深度学习需要大量的标记数据和高效的运算来做支撑。<br>计算资源只要从黄老板的公司订购就可以了，但大规模的高质量有标记数据却不是那么容易获得，让科研人员头疼不已。<br>应用时代而生的就是一大批数据众包公司和平台。正好借着一个数据众包任务，对于国内的数据标注公司服务有了更深一步的了解。</p><a id="more"></a><hr><p><img src="https://i.loli.net/2018/08/10/5b6cfff5ccf31.png" alt="AI发电厂————数据标注公司"></p><blockquote class="blockquote-center"><p>AI的老师：画框的这些人</p></blockquote><p>伴随着AI兴起的最关键的技术莫过于深度学习，作为深度学习的基础，神经网络是一种以输入为导向的算法，其结果的准确性取决于接近“无穷”量级的数据。<br>所以摒除那些复杂的中间环节，深度学习最关键的就是需要大量的数据训练，这也是为什么在互联网大数据的时代，AI可以崛起。而在数据训练之前，又必须先对大量的数据进行标注，作为机器学习的先导经验。</p><p>因此，催生了大量数据标注公司的诞生。</p><h4 id="什么是数据标注"><a href="#什么是数据标注" class="headerlink" title="什么是数据标注"></a>什么是数据标注</h4><p>要理解数据标注，得先理解AI其实是部分替代人的认知功能。<br>回想一下我们是如何学习的，例如我们学习认识苹果，那么就需要有人拿着一个苹果到你面前告诉你，这是一个苹果。然后以后你遇到了苹果，你才知道这玩意儿叫做“苹果”。类比机器学习，我们要教他认识一个苹果，你直接给它一张苹果的图片，它是完全不知道这是个啥玩意的。我们得先有苹果的图片，上面标注着“苹果”两个字，然后机器通过学习了大量的图片中的特征，这时候再给机器任意一张苹果的图片，它就能认出来了。</p><p>根据应用场景的不同，数据标注有许多类型。大体上分为图像、语音、自然语言三大类。<br>其中由于图像研究领域的水文热潮，图像标注的任务也尤为众多。。。无人驾驶、人脸识别、物体检测……<br>语音和语言相对来说，数据标注难度更大一点。价格也相对高昂一些。</p><p>在进行数据标注之前，我们首先要对数据进行清洗，得到符合我们要求的数据。数据的清洗包括去除无效的数据、整理成规整的格式等等。具体的数据要求可以和算法人员确认。</p><h4 id="众包标注的困难"><a href="#众包标注的困难" class="headerlink" title="众包标注的困难"></a>众包标注的困难</h4><p>众包标注由于是非专业标注，自然会遇到很多问题。这困难主要由以下三个方面组成：</p><ol><li>标注者的水平<br>由于标注者是众包标注，因此其标注者的水平也参差不齐，其背景知识和行为习惯可能有较大的差异。这就相当于是给若干个已训练好的模型来做预测一样，其不同的模型有不同的输出结果。那么这种情况下，基本上使用多数投票的方法来解决。</li><li>评价困难<br>标注的内容可以分为两类，一类是有明确标签的，就好比是试卷里的客观题一样，尽管各个标注都不同，但是还是在有限集合内的。另一类是开放式回答，这种标注如同试卷里的主观题一样，可能会有无限种可能的结果。甚至是截然相反的结果，比如什么是美，什么是丑，每个人的评价标准是不同的。我们本次想要的数据众包也是这个类型的。</li><li>标注稀疏性<br>如果一个需要标注的训练集中的数据本身就比较稀疏，而我们又需要把它们分割成一个个小块，这就有可能造成数据稀疏。比如，我们要进行鸟类图片标注，如果本身鸟类种类很多，而分给每个人的鸟的种类也很多的话，由于每个人认识的鸟的种类是不多的，因此可能存在每个人的标注都会有很高的错误率。这时候我们可能就需要让标注者之间有重叠的部分，然后使用多数表决来解决。</li></ol><h4 id="数据众包公司调研"><a href="#数据众包公司调研" class="headerlink" title="数据众包公司调研"></a>数据众包公司调研</h4><p>由于我们需要众包的数据是中文数据，所以只关心国内的一些数据众包公司。国外的Amazon Mechanical Turk、CrowdFlower、Mighty AI等公司不在考察范围之内。</p><p>据悉，在国内的数据标注行业实行这样一套分工流程：上游的科技巨头把任务交给中游的数据标注公司，再由中游众包给下游的小公司、小作坊，有的小作坊还会进一步众包给“散兵游勇”，比如学生或家庭主妇。<br>这条产业链上，分包现象越严重，最终落到最底层的数据服务公司的价格就越低，一层层的“数据黄牛”压缩了利润空间，所以一些任务经过数手转包，酬劳已低得惊人。<br>目前的数据标注工作主要是集中在河北、河南、山东、山西等劳动力密集的地区，这样的选址也因为能够以更加低廉的劳动力成本去完成大量的数据标注工作。</p><p>下面是我对国内的数据众包公司做的一些调研（按照我搜索得知该公司的顺序排序）。<br>不知道是否是我们的标注任务太难的缘故，绝大多数公司没有任何反馈。</p><p>1.<a href="http://zhongbao.baidu.com/ds/requirement/preview?requirementId=1152" target="_blank" rel="noopener">百度数据众包</a>、<a href="https://cloud.baidu.com/product/dcs.html" target="_blank" rel="noopener">百度云众包</a><br>百度不愧是靠PC端的网页搜索起家的，其前端技术还是不错，网站做的还是比较精致的。但是我提出了数据标注任务之后，贵司的这个相应效率可就有点搞笑了。完全没有反应……</p><p>2.<a href="https://www.fanhantech.com/zh" target="_blank" rel="noopener">泛函科技</a><br>第二天下午有反馈, <strong>0.35元/条</strong>, 后来涨价到<strong>1.5元/条</strong>……而且拿走我的数据，试标结果都没有反馈。<br>但是客户经理态度还比较好，最后给出这样一个方案“您确定一个期望的价格，我们也可以把他发到我们的平台上，我们抽取一定佣金后，按您意愿的价格发布任务。看是否有用户愿意标注，这样的工期我们不敢保证。”，我是不敢采取的，23333。</p><p>3.<a href="https://biao.jd.com/" target="_blank" rel="noopener">京东众智</a><br>数据标注的需求申请是真难用！京东公司就没有一个会前端的人嘛？<br>但是，京东的效率很高，反应很快（第二天就有回复），对接服务还比较周到细致，测评试标注有标注结果反馈，且效果尚可。最后谈妥的价格是0.55元/条，含6个点的税，增值税普通发票。关键是，京东平台只接受<strong>5W元</strong>以上的订单。这一点为什么不在官网说明？浪费我那么多的联系时间。</p><p>4.<a href="http://www.datatang.com/" target="_blank" rel="noopener">数据堂</a><br>联系之后没有反馈</p><p>5.<a href="http://www.longmaosoft.com/cn/index.html" target="_blank" rel="noopener">龙猫数据</a><br>联系之后没有反馈</p><p>6.<a href="http://zhongbao.alibaba.com/#J-contact" target="_blank" rel="noopener">阿里众包</a><br>联系之后没有反馈</p><p>7.<a href="http://stardust.ai/" target="_blank" rel="noopener">星辰数据</a><br>网页做的很好看，但是联系之后没有反馈</p><p>8.<a href="http://www.magicdatatech.com/" target="_blank" rel="noopener">爱数智慧</a><br>第二天下午有反应，但进展比较慢。问我要走了样例数据试标注却没有结果反馈。难道不需要顾客审查标注质量么？<br>最后报出的定价是<strong>0.45元/条</strong>，但是谁知道他们标注的质量呢？</p><p>9.<a href="https://www.basicfinder.com/service.html?search-id=7" target="_blank" rel="noopener">倍赛公司</a><br>联系之后没有反馈</p><p>10.<a href="http://www.imtagger.com/" target="_blank" rel="noopener">tagger</a><br>联系之后没有反馈</p><p>总的来说，我眼中国内最靠谱的数据标注公司是京东众智。不论是客户经理的对接工作，还是数据的试标注反馈，完成的都比较高效和到位。但也有一个致命的缺陷，它们只接受<strong>5W元</strong>以上的标注任务订单，，，这就基本把高校的科研组统统拒之门外了。另外，泛函科技和爱数智慧的服务以及价格尚可，只是没有京东众志应答迅速，没有试标注的结果反馈。至于其他一些公司，统统没有反馈，令人失望。</p><hr><blockquote><p>PS:上文中，BA已经出镜，不给T家一个机会貌似不太公平。那就给他们一个亮相机会吧。</p></blockquote><p><img src="https://i.loli.net/2018/08/07/5b697c5bee37b.png" alt="腾讯数据标注实习生招聘"></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://blog.csdn.net/qq_35082030/article/details/70162245" target="_blank" rel="noopener">众包数据标注中的隐类别分析</a><br><a href="https://www.jianshu.com/p/d6dd960b550c" target="_blank" rel="noopener">谈谈人工智能数据标注那些事儿</a><br><a href="https://new.qq.com/omn/20180714/20180714A18X5E.html" target="_blank" rel="noopener">数据标注员，最后一批被AI取代的人</a></p>]]></content>
      
      <categories>
          
          <category> Machine-learning </category>
          
          <category> Data-labeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine-learning </tag>
            
            <tag> Data-labeling </tag>
            
            <tag> Crowdsourcing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Github和Coding双线绑定自定义域名</title>
      <link href="/2018/07/29/Github-and-Coding-bulid-blog/"/>
      <url>/2018/07/29/Github-and-Coding-bulid-blog/</url>
      <content type="html"><![CDATA[<p>本来博客已经搭建好了，可是总觉得用Github一个二级域名怪怪的，非要折腾自己来绑定自己的域名，并申请SSL（就是喜欢看那个小绿锁！）前前后后花了不少时间，走了不少弯路，将踩过的坑记录下来。</p><a id="more"></a><hr><h3 id="域名设计原则"><a href="#域名设计原则" class="headerlink" title="域名设计原则"></a>域名设计原则</h3><p>域名的设置应该根据什么原则呢？参考<a href="http://www.nuobg.com/reed/439.html" target="_blank" rel="noopener">域名价值评估</a>，我们可以根据如下因素来</p><p><strong>域名的长短</strong>:1位：10万，2位：5万，3位：1万，4位：5000，5位以上1000，6位以上500<br><strong>域名的组成结构</strong>：纯字母的*2，数字与字母杂的*1，中划线/3<br><strong>域名的组合方式</strong>：单词*3，纯数及单词组合*2，拼音及其它*1<br><strong>域名的形式分类</strong>：行业词*3，通用词*2，创单词*1<br><strong>域名的商业价值</strong>：搜索数量：1000以下/3，1000到1万/2，1万到10万*1，10万到100万*2，100万*3，100万以后搜索数量多一个0就*3的倍数，百度以100万，google以300万为参数。<br><strong>域名的后缀</strong>：com结尾的大于net，net结尾的大约cn的，cn结尾的大于<a href="http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名" target="_blank" rel="noopener">http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名</a><br><strong>域名的历史记录</strong>：自己衡量。<br><strong>域名记忆性标准</strong>：跟实际生活中某些词汇重叠，跟语言、语音发声重叠适用性较强<br><strong>域名的合法性标准</strong>：域名是否符合法律，是否涉及到知识产品争议方面。<br><strong>域名的潜在商业价值</strong>：域名所涉及的行业规模及互联网的相关性。</p><h3 id="域名服务商选择"><a href="#域名服务商选择" class="headerlink" title="域名服务商选择"></a>域名服务商选择</h3><p>心中构思好了自己的域名后，就可以着手选择一个靠谱的域名购买商。如果懒得备案，那就将我们的目光锁定在国外。<br>参考<a href="https://www.zhihu.com/question/19551906/answer/31986656" target="_blank" rel="noopener">分析域名购买商</a>，<a href="https://www.1deng.me/2017-best-domain-registrars.html" target="_blank" rel="noopener">2018最佳国外域名注册商，不需要备案</a>这两篇文章，我将目光初步锁定在namesilo和namecheap两家口碑较好、服务稳定、价格尚可的服务商身上。</p><p>这里有两个网站来查询你所想好的域名目前的状况，以及价格对比。<br><a href="https://namebeta.com/" target="_blank" rel="noopener">查域名是否被注册（中文站）</a>，<a href="https://www.domcomp.com/" target="_blank" rel="noopener">domcomp——国外多家域名购买网站的价格对比</a><br>如果准备购买，从domcomp内点击对应的域名服务商还有额外的优惠。</p><p>我最终选择的是Namesilo，因为更便宜……口碑也还不错。<a href="https://www.namesilo.com/?rid=cffdf56sr" target="_blank" rel="noopener">namesilo传送门</a> Namesilo还免费提供隐私服务（即不公开域名持有者的信息）。对了， Namesilo 支持支付宝付款。<br>从传送门进去，注册新用户，选好合适的域名后填入下面两个优惠码其中任意一个都可以优惠一美元。（截止日期：2020年12月31日）</p><div class="note success"><p>NameSilo 新用户购物优惠码一 <span id="inline-blue">imbowei</span>     NameSilo 新用户购物优惠码二 <span id="inline-blue">miaomiao</span>  </p></div><h3 id="域名购买及配置"><a href="#域名购买及配置" class="headerlink" title="域名购买及配置"></a>域名购买及配置</h3><p>namesilo购买域名之前记得填写优惠码，并且提交（提交按钮一直都是灰色的！），提交后可以便宜一美元。<br><img src="https://i.loli.net/2018/07/29/5b5dd61453e66.png" alt="namesilo购买域名"><br>经过以上步骤，就可以最终购买域名了。</p><p>购买得到域名，要紧接着配置。新域名默认有四条停靠的广告记录，不要犹豫，直接全部删除！<br><img src="https://i.loli.net/2018/07/30/5b5e66fe8bec0.png" alt="Namesilo需要删除的默认配置"><br>然后我选用了<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>的域名解析服务。中文网站，简单易懂。它有两个默认的解析记录，我们直接添加到<code>namesilo</code>购买的域名中，如下图所示。（注意：不需要第三条记录。）<br>这样就可以放心关闭Namesilo的网站了。<br><img src="https://i.loli.net/2018/07/29/5b5dd74a5f2e6.png" alt="namesilo第三方服务器设置"></p><h3 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h3><p>如果Coding和GitHub的用户名和注册邮箱完全一样，就不用再次配置Git，只要找到<code>.ssh</code>文件夹下对应的<code>id_ras.pub</code>文件，再去coding以相同的方式设置一次公钥即可。</p><p>如果用户名或者注册邮箱并不是完全一致，那么按照如下步骤在进行一遍配置。<br>注意，需要先将配置GitHub时候生成的公钥密钥文件备份，或者生成Coding配置的时候改掉生成的文件名。</p><ul><li><code>git config --global user.name &quot;OnlyChristmas&quot;</code> 设置Coding用户名</li><li><code>git config --global user.email &quot;OnlyChristmas@hh.com&quot;</code>设置注册Coding邮箱</li><li><code>ssh-keygen -t rsa &quot;OnlyChristmas@hh.com&quot;</code> 在bash中执行命令，连着三个回车（不需要密码）。</li><li>生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。生成文件目录`C:/用户/你的用户名/</li></ul><p>输入 <code>ssh -T git@coding.net</code> 如果出现如下字样不要慌张，因为可能是本地网络禁止了22端口，我们换个端口就好。</p><blockquote><p>ssh: connect to host coding.net port 22: Connection refused</p></blockquote><p>再次输入 <code>ssh -T -p 443 git@git-ssh.coding.net</code> 出现如下字样，说明配置coding成功。</p><blockquote><p>The authenticity of host …………………<br>Coding 提示: Hello OnlyChristmas, You’ve connected to Coding.net via SSH. This is a personal key.<br>OnlyChristmas，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</p></blockquote><h3 id="将博客托管到Coding和GitHub"><a href="#将博客托管到Coding和GitHub" class="headerlink" title="将博客托管到Coding和GitHub"></a>将博客托管到Coding和GitHub</h3><p>首先，在本地<code>博客根目录/source/</code>下建立一个名为 <code>CNAME</code>的文件，里面写填入你购买的域名。例如<a href="imbowei.com">imbowei.com</a>, 不需要任何的其他字符，例如“www”,”https”之类。</p><p>在本地博客文件夹下的srouce文件夹下新建<span id="inline-green">Staticfile</span>文件，接下来就可以同时向coding和GitHub上传博客了。</p><p>向coding提交代码遇到了如下问题怎么办？</p><blockquote><p>remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码</p></blockquote><p>我是因为配置出现了问题，改成如下样式，即可同时上传github和coding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git</span><br><span class="line">    coding: git@git.coding.net:OnlyChristmas/OnlyChristmas.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>代码上传之后，在coding项目的<code>代码/pages 服务</code>中选取master分支，开启静态pages服务，即可访问coding的<a href="https://onlychristmas.coding.me" target="_blank" rel="noopener">主页</a>了。</p><h3 id="Github-and-Coding-双线部署并申请SSL"><a href="#Github-and-Coding-双线部署并申请SSL" class="headerlink" title="Github and Coding 双线部署并申请SSL"></a>Github and Coding 双线部署并申请SSL</h3><p>现在Coding pages和Github pages 已经都可以使用了。<br>那么我们现在要做的就是设置他们同时解析到我们刚才购买的域名<a href="imbowei.com">imbowei.com</a>，实现双线访问。<br>这里的坑比较多。<br>首先要在DNSpod先设置解析Coding，并且在Coding项目的pages界面申请SSL证书。申请配置如下图所示。<br>否则Let’s Encrypt主机根据域名解析记录验证域名所有权时，会定位到GitHub Page的主机上，导致Let’s EncryptSSL证书申请失败。<br><img src="https://i.loli.net/2018/07/30/5b5e625ebaacc.png" alt="Coding pages SSL 申请成功"></p><p>然后在DNSpod再配置Github pages的解析，并在Github博客项目的设置中绑定主页。</p><p>然而，Github pages 出现了如下的错误信息，</p><blockquote><p>Domain’s DNS record could not be retrieved.<br>不要着急，这是因为github pages的自定义HTTPS请求没有配置成功（2018年5月1日新推出的良心服务），在刚才的DNSpod中添加一条A记录即可,其中IP指向在下面的地址中任选其一即可（一项不行，就换另外一个）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure></p></blockquote><p>Gituhb pages的配置成功界面如下所示。<img src="https://i.loli.net/2018/07/30/5b5e62c7adf58.png" alt="Gituhb pages SSL配置成功"></p><p>最终的DNSpod解析配置如下图所示。<br><img src="https://i.loli.net/2018/07/30/5b5e62ff63ffc.png" alt="DNSpod 配置"></p><h3 id="去除Coding的广告……"><a href="#去除Coding的广告……" class="headerlink" title="去除Coding的广告……"></a>去除Coding的广告……</h3><p>配置好之后很开心，然而发现，Coding会自动给你的博客加一个滞留好几秒钟的跳转页面，感觉非常非常的不好。<br>还好除了升级为它的黄金会员之外还有其他解决方法。</p><p>只要在博客主页为它打一点点广告就好了（要两个工作日才会通过！）……毕竟托管在上面还是很方便的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>对于Next主题来说，在<code>themes/next/layout/_partials/footer.swig</code>的文件末尾加入上述代码就可以把Coding要求的小广告加入到主页的页脚位置。</p><p>但是Coding这种强制要求真的很烦人，一点互联网精神都没有！货比货，感觉Coding距离Github还差几个光年吧。<br>既然打广告，也顺便带上良心的Github吧！</p><h3 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h3><p>现在部署好了HTTPS，那为什么还是没有出现小绿锁？刷新页面出现的小绿锁一闪而过，让我们空欢喜一场！<br>因为网站没有全站HTTPS，也就是说，我们引用了http的资源，要将对应资源全部换成HTTPS才能出现小绿锁。</p><p>怎么知道自己什么还没有换成HTTPS资源？很简单，<code>F12</code>打开调式界面就可以发现警告信息。<br>例如我的站点就是因为加载了一个自定义的鼠标图片，如鼠标图片引用了HTTP的资源，将该段代码注释掉，或者换一个HTTPS的资源连接即可。</p><p>然后，就有心心念的<strong>小绿锁</strong>了！</p><p>另外由于主页地址的改变，我还更新了如下资源配置：</p><ul><li>gitment评论系统的<code>Authorization callback URL</code>主页设置为自定义域名。</li><li>SEO相关设置</li><li>在<span id="inline-blue"> 站点配置文件 </span>中更改默认站点，使得文档末尾的copyright链接生成正确。</li><li>还在阿里云申请了一个为期一年的SSL免费证书，用于一些资源网站的验证使用。</li></ul><!-- 配置结束后，如果能直接访问，那是最好。但是如果有悲催的如下错误发生，也不要慌张。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">无法访问此网站</span><br><span class="line">找不到 imbowei.com 的服务器 IP 地址。</span><br><span class="line">尝试运行 Windows 网络诊断。</span><br><span class="line">DNS_PROBE_FINISHED_NXDOMAIN</span><br></pre></td></tr></table></figure><p>我的电脑除了刚刚购买的域名<a href="imbowei.com">imbowei.com</a>之外，所有网站都可以正常访问！……<br>不要慌，也不要问度娘，老老实实的google一下，<br>只要打开<code>控制面板/网络和Internet/网络连接/</code>，选择你使用的网络，右键-&gt;属性-&gt;IPV4（双击），将DNS服务器改成如下配置</p><p><div class="note success"><p> 首选DNS服务器　8.8.8.8</p><p>备用DNS服务器　8.8.4.4 &lt;/p&gt;&lt;/div&gt; —&gt;</p>-->]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github-pages </tag>
            
            <tag> Coding-pages </tag>
            
            <tag> DNSpod </tag>
            
            <tag> SSL </tag>
            
            <tag> Domain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux服务器命令行上传数据到百度云盘</title>
      <link href="/2018/07/26/linux-uploading-baiduyunpan/"/>
      <url>/2018/07/26/linux-uploading-baiduyunpan/</url>
      <content type="html"><![CDATA[<p>每次想把服务器上的数据上传到百度云盘都要先下载到本地，然后再上传百度云。<br>这一点都不优雅，既浪费时间，还占用电脑本来的带宽。<br>如果Linux命令行能够直接上传百度云盘岂不美哉？说干就干，磨刀不误砍柴工！</p><a id="more"></a><hr><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>CentOS Linux, python3  配置环境</li><li><code>pip install bypy --user</code></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>输入<code>bypy info</code>，得到如下显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please visit:</span><br><span class="line">https://openapi.baidu.com/oauth/2.0/authorize?client_id=q8WE4EpCsau1oS0MplgMKNBn&amp;response_type=code&amp;redirect_uri=oob&amp;scope=basic+netdisk</span><br><span class="line">And authorize this app</span><br><span class="line">Paste the Authorization Code here within 10 minutes.</span><br><span class="line">Press [Enter] when you are done</span><br></pre></td></tr></table></figure></li><li><p>访问该链接，获得授权码，复制回来。确认。得到类似信息即配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Quota: 2.008TB</span><br><span class="line">Used: 1.272TB</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>再也不用把一些实验结果保存到本地，从实验室服务器折腾到本地再进行上传。写两条命令就可以继续干活了，感觉真好！<br>下面是一些常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bypy list                 # 显示文档</span><br><span class="line">bypy upload filename -v   # 上传某文件，显示进度</span><br><span class="line">bypy -c                   # 取消令牌文件。一段时间后要重新授权</span><br><span class="line">bypy downdir filename     # 下载</span><br><span class="line">bypy compare              # 比较本地目录和网盘目录</span><br></pre></td></tr></table></figure><p>执行上传命令之后有如下的显示，说明正在上传</p><blockquote><p>‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.<br>[=<strong><strong><strong><strong>___</strong></strong></strong></strong>] 9% (20.0MB/214.1MB) ETA: 6m52s (481kB/s, 42s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.<br>[===<strong><strong><strong><strong>_</strong></strong></strong></strong>] 18% (40.0MB/214.1MB) ETA: 6m10s (481kB/s, 1m25s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.</p></blockquote><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://www.cnblogs.com/liwei0526vip/p/5002434.html" target="_blank" rel="noopener">Linux命令行上传文件到百度网盘</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Bypy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wikipedia 训练繁（简）体中文 embedding(word2vec)模型</title>
      <link href="/2018/07/22/wikipedia-train-traditional-chinese-embedding%EF%BC%88word2vec%EF%BC%89model/"/>
      <url>/2018/07/22/wikipedia-train-traditional-chinese-embedding%EF%BC%88word2vec%EF%BC%89model/</url>
      <content type="html"><![CDATA[<p>由于课题任务需要一个繁体中文的word3vec, 折腾经过记录在此。希望以后少掉几个坑。<br>训练好的embedding放在<a href="https://pan.baidu.com/s/1DB_Sft8N9XMyDP9cpVMpBw" target="_blank" rel="noopener">网盘</a>中， 密码：<code>2um0</code><br>后来又按照这个方法训练了简体中文维度分别为50、100、200、300的embedding，一并放出来<a href="https://pan.baidu.com/s/1JgjRBWwwrcJSy4taPFtLhA" target="_blank" rel="noopener">网盘链接</a> 密码：<code>751d</code></p><a id="more"></a><hr><h5 id="get-wiki"><a href="#get-wiki" class="headerlink" title="get wiki"></a>get wiki</h5><p><a href="https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2" target="_blank" rel="noopener">最新的wiki data下载地址</a>，目前有1.6G大小。</p><p>里面的内容以XML格式保存。节点信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;page&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;id&gt;&lt;/id&gt;</span><br><span class="line">  &lt;timestamp&gt;&lt;/timestamp&gt;</span><br><span class="line">  &lt;username&gt;&lt;/username&gt;</span><br><span class="line">  &lt;comment&gt;&lt;/comment&gt;</span><br><span class="line">  &lt;text xml:space=&quot;preserve&quot;&gt;&lt;/text&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure></p><h5 id="初步处理"><a href="#初步处理" class="headerlink" title="初步处理"></a>初步处理</h5><p>我顺手直接解压真的too young。<br>为了节省时间，免去自己写代码处理Wiki的烦恼，Wikipedia Extractor先初步处理。（服务器非root用户，安装命令加上<code>--user</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/attardi/wikiextractor.git wikiextractor</span><br><span class="line">cd wikiextractor</span><br><span class="line">python setup.py install --user</span><br><span class="line">python WikiExtractor.py -b 1024M -o extracted zhwiki-latest-pages-articles.xml.bz2</span><br></pre></td></tr></table></figure><p>执行过程如下，可以看到一共处理了1012693篇文章，输出如下所示：</p><blockquote><p>INFO: 6205533    手語新聞<br>INFO: 6205536    班傑明·古根海姆<br>INFO: 6205549    同意<br>INFO: 6205556    2018年荷蘭網路監控法公民投票<br>INFO: 6205594    李儒新<br>INFO: 6205610    深圳信息职业技术学院<br>INFO: 6205626    停下來等著你 (2018年電視劇)<br>INFO: 6205642    簡單矩陣的快速演算法設計<br>INFO: 6205644    斯義桂<br>INFO: 6205646    焦耳效应<br>INFO: 6205648    1925年世界大賽<br>INFO: 6205653    True (方力申專輯)<br>INFO: 6205657    华睿2号<br>INFO: 6205664    河內郡 (大阪府)<br>INFO: 6205691    京都寺町三条商店街的福爾摩斯<br>INFO: 6205675    莫莉·比什死亡事件<br>INFO: 6205703    都筑郡<br>INFO: 6205701    皇座法庭所屬分庭庭長<br>INFO: 6205709    冬瓜餅<br>INFO: 6205710    吸血鬼莫比亞斯<br>INFO: 6205712    淘綾郡<br>INFO: 6205714    明石香織<br>INFO: Finished 71-process extraction of 1012693 articles in 1114.1s (909.0 art/s)</p></blockquote><p>通过以上抽取后得到两个文件<code>wiki_00</code>和<code>wiki_01</code>。里面的格式类似下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;doc id=&quot;5323477&quot; url=&quot;https://zh.wikipedia.org/wiki?curid=5323477&quot; title=&quot;結構與能動性&quot;&gt;</span><br><span class="line">文章内容</span><br><span class="line">&lt;/doc&gt;</span><br></pre></td></tr></table></figure></p><p>在上面的基础上，我们在去掉一些不需要的特殊符号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import codecs</span><br><span class="line">def filte(input_file):</span><br><span class="line">    p5 = re.compile(&apos;&lt;doc (.*)&gt;&apos;)</span><br><span class="line">    p6 = re.compile(&apos;&lt;/doc&gt;&apos;)</span><br><span class="line">    outfile = codecs.open(&apos;std_&apos; + input_file, &apos;w&apos;, &apos;utf-8&apos;)</span><br><span class="line">    with codecs.open(input_file, &apos;r&apos;, &apos;utf-8&apos;) as myfile:</span><br><span class="line">        for line in myfile:</span><br><span class="line">            line = p5.sub(&apos;&apos;, line)</span><br><span class="line">            line = p6.sub(&apos;&apos;, line)</span><br><span class="line">            outfile.write(line)</span><br><span class="line">    outfile.close()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">filte(input_file)</span><br><span class="line">    input_file = sys.argv[1]</span><br></pre></td></tr></table></figure></p><h5 id="简体转繁体"><a href="#简体转繁体" class="headerlink" title="简体转繁体"></a>简体转繁体</h5><p>首先安装<a href="https://github.com/yichen0831/opencc-python.git" target="_blank" rel="noopener">opencc-python</a><br>网上一大堆教程，全是深坑！其实直接按照代码仓库作者的方法安装就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yichen0831/opencc-python.git</span><br><span class="line">cd opencc-python</span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure></p><p>但是，如果追求效率，可以安装<a href="https://github.com/BYVoid/OpenCC" target="_blank" rel="noopener">opencc C++ 版本</a>，python代码的效率堪忧。</p><p>看文档不难发现，繁体字也分为香港区和台湾省，要用怎么样的转换看具体需求就好<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> opencc <span class="keyword">import</span> OpenCC</span><br><span class="line"></span><br><span class="line">opencc = OpenCC(<span class="string">'s2hk'</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> [<span class="string">'wiki_01'</span>,<span class="string">'wiki_00'</span>]:</span><br><span class="line">true<span class="keyword">with</span> open(<span class="string">'std_'</span>+filename,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fin, open(<span class="string">'hk_'</span>+filename,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fou:</span><br><span class="line">truetrue<span class="keyword">for</span> index , line <span class="keyword">in</span> enumerate(fin.readlines()):</span><br><span class="line">truetruetruehk = opencc.convert(line)</span><br><span class="line">             <span class="keyword">if</span> index % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">truetruetruetrueprint(index,hk)</span><br><span class="line">truetruetruefou.write(hk)</span><br></pre></td></tr></table></figure></p><p>得到了两个文件分别大小为 <code>1024M</code> 和<code>154M</code></p><h5 id="jieba-Segment"><a href="#jieba-Segment" class="headerlink" title="jieba Segment"></a>jieba Segment</h5><p>先把两个wiki文件合并<code>cat hk_wiki_00 hk_wiki_01 &gt; hk_wiki</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m jieba -d " " ./hk_wiki &gt; ./SegHk_wiki</span><br></pre></td></tr></table></figure><h5 id="train-word2vec"><a href="#train-word2vec" class="headerlink" title="train word2vec"></a>train word2vec</h5><p>运行下面写好的脚本，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> KeyedVectors</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./word2vec_tradiCN/'</span>):</span><br><span class="line">trueos.makedirs(<span class="string">'./word2vec_tradiCN/'</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line">sentences = word2vec.LineSentence(<span class="string">'./SegHk_wiki'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]:</span><br><span class="line">truemodel = word2vec.Word2Vec(sentences,size=number,window=<span class="number">5</span>,min_count=<span class="number">5</span>,workers=<span class="number">20</span>)</span><br><span class="line">true<span class="comment"># min-count 表示设置最低频率，默认为5，如果一个词语在文档中出现的次数小于该阈值，那么该词就会被舍弃; size代表词词向量的维度</span></span><br><span class="line">true<span class="comment"># 为了后续建模读取vector方便，我们的保存格式应该和glove vector 保持一致</span></span><br><span class="line">truemodel.wv.save_word2vec_format(<span class="string">'./word2vec_tradiCN/Wiki'</span>+str(number)+<span class="string">'.txt'</span>, binary=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p>然而出现了<code>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.</code>这个错误<br>运行<code>conda install nomkl</code>安装nomkl，这是anaconda的问题。</p><h5 id="test-word2vec"><a href="#test-word2vec" class="headerlink" title="test word2vec"></a>test word2vec</h5><p>如果用python2，运行下面的测试脚本可能会出现如下错误<code>KeyError: &quot;word &#39;\xe7\xb8\xbd\xe7\xb5\xb1&#39; not in vocabulary&quot;</code><br>这个是python2对于中文的支持不太友好造成的，用python3即可表现正常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models.keyedvectors <span class="keyword">import</span> KeyedVectors</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]:</span><br><span class="line">    wv = KeyedVectors.load_word2vec_format(<span class="string">'./word2vec_tradiCN/Wiki'</span>+ str(number)+<span class="string">'.txt'</span>, binary=<span class="keyword">False</span>)</span><br><span class="line">    print(number, wv.similarity(<span class="string">'總統'</span>,<span class="string">'民國'</span>)) <span class="comment">#两个词的相关性</span></span><br><span class="line">    print(number, wv.most_similar([<span class="string">'倫敦'</span>,<span class="string">'中國'</span>],[<span class="string">'北京'</span>]),<span class="string">'\n\n'</span>) <span class="comment"># 北京is to中国 as 伦敦is to？</span></span><br></pre></td></tr></table></figure></p><ul><li>注意，繁体中文，测试的时候也要用繁体的</li><li>这里直接测试了四组不同大小的embedding，可以对比效果。以这个简单的测试来说，200d embedding效果比较好。</li><li>当然，在实际中，效果怎么样，还是要实际测试。</li></ul><blockquote><p>50 0.08906988<br>50 [(‘美國’, 0.8497380614280701), (‘英國’, 0.8156374096870422), (‘荷蘭’, 0.7635571956634521), (‘加拿大’, 0.7618951201438904), (‘蘇格蘭’, 0.7564111948013306), (‘法國’, 0.7498287558555603), (‘冰島’, 0.7447660565376282), (‘愛爾蘭’, 0.7290477752685547), (‘德國’, 0.7261558175086975), (‘哥倫比亞’, 0.715803861618042)]</p><p>100 0.0021609096<br>100 [(‘英國’, 0.7518529891967773), (‘美國’, 0.716768741607666), (‘蘇格蘭’, 0.706271767616272), (‘德國’, 0.6398693323135376), (‘法國’, 0.6289862394332886), (‘愛爾蘭’, 0.6286278963088989), (‘荷蘭’, 0.6277433633804321), (‘英格蘭’, 0.625410795211792), (‘加拿大’, 0.6076068878173828), (‘威爾斯’, 0.6075741052627563)]</p><p>200 0.044366393<br>200 [(‘英國’, 0.6959728598594666), (‘蘇格蘭’, 0.6404226422309875), (‘美國’, 0.6401909589767456), (‘英格蘭’, 0.6158463358879089), (‘愛爾蘭’, 0.5740842223167419), (‘德國’, 0.5558757781982422), (‘威爾斯’, 0.5539498925209045), (‘法國’, 0.5375431776046753), (‘荷蘭’, 0.5276069641113281), (‘威爾士’, 0.5051602721214294)]</p><p>300 0.034565542<br>300 [(‘英國’, 0.6512337923049927), (‘蘇格蘭’, 0.5884094834327698), (‘英格蘭’, 0.5666802525520325), (‘美國’, 0.5420516729354858), (‘愛爾蘭’, 0.5202239751815796), (‘威爾斯’, 0.48060378432273865), (‘荷蘭’, 0.4763559103012085), (‘德國’, 0.4744102358818054), (‘法國’, 0.4675533175468445), (‘北愛爾蘭’, 0.46320733428001404)]</p></blockquote><h5 id="网盘链接"><a href="#网盘链接" class="headerlink" title="网盘链接"></a>网盘链接</h5><p>训练好的四个embedding包含892594个词，都放到了<a href="https://pan.baidu.com/s/1DB_Sft8N9XMyDP9cpVMpBw" target="_blank" rel="noopener">网盘</a>中，可以按需下载。 密码：<code>2um0</code></p><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p><a href="https://blog.csdn.net/qq_32166627/article/details/68942216" target="_blank" rel="noopener">word2vec实战：获取和预处理中文维基百科(Wikipedia)语料库，并训练成word2vec模型</a></p>]]></content>
      
      <categories>
          
          <category> NLP </category>
          
          <category> Word2vex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wikipedia </tag>
            
            <tag> Gensim </tag>
            
            <tag> Embedding </tag>
            
            <tag> Opencc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 常用命令备忘</title>
      <link href="/2018/07/20/Use-linux-well/"/>
      <url>/2018/07/20/Use-linux-well/</url>
      <content type="html"><![CDATA[<p>经常会有一些的Linux命令记不牢，持续整理更新，以便查找。</p><a id="more"></a><hr><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">date</td><td style="text-align:center">显示当前日期和时间</td></tr><tr><td style="text-align:center">cal</td><td style="text-align:center">显示当前的日历</td></tr><tr><td style="text-align:center">uptime</td><td style="text-align:center">查看系统运行时间、用户数、负载</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">显示登陆的用户</td></tr><tr><td style="text-align:center">whoami</td><td style="text-align:center">查看自己当前的用户名</td></tr><tr><td style="text-align:center">uname -a</td><td style="text-align:center">显示内核信息</td></tr><tr><td style="text-align:center">man command</td><td style="text-align:center">显示命令的说明手册</td></tr><tr><td style="text-align:center">df</td><td style="text-align:center">显示磁盘占用情况</td></tr><tr><td style="text-align:center">du</td><td style="text-align:center">显示当前目录的空间占用情况</td></tr><tr><td style="text-align:center">free</td><td style="text-align:center">显示内存和交换区占用情况</td></tr><tr><td style="text-align:center"><span id="inline-purple">du -h --max-depth=1</span></td><td style="text-align:center">显示当前目录所占空间的大小</td></tr><tr><td style="text-align:center">lspci -v</td><td style="text-align:center">查看PCI信息，lspci 是读取 hwdata 数据库</td></tr><tr><td style="text-align:center">cat /proc/cpuinfo</td><td style="text-align:center">查看CPU信息</td></tr><tr><td style="text-align:center">env</td><td style="text-align:center">查看环境变量</td></tr><tr><td style="text-align:center">ifconfig</td><td style="text-align:center">查看所有网络接口的属性</td></tr><tr><td style="text-align:center">route -n</td><td style="text-align:center">查看路由表</td></tr><tr><td style="text-align:center">netstat -antp</td><td style="text-align:center">查看所有监听端口</td></tr><tr><td style="text-align:center">netstat -s</td><td style="text-align:center">查看网络统计信息</td></tr><tr><td style="text-align:center">last</td><td style="text-align:center">查看用户登录日志</td></tr><tr><td style="text-align:center">crontab -l</td><td style="text-align:center">查看当前用户的定时任务</td></tr><tr><td style="text-align:center">rpm -qa</td><td style="text-align:center">查看所有安装的软件包</td></tr></tbody></table></div><h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">ls -a / ls -al</td><td style="text-align:center">查看隐藏文件 / 格式化列出隐藏文件</td></tr><tr><td style="text-align:center">ls -s</td><td style="text-align:center">当前目录下的每个文件夹中有多少文件</td></tr><tr><td style="text-align:center">pwd</td><td style="text-align:center">显示当前所处路径</td></tr><tr><td style="text-align:center">make <em>dir</em></td><td style="text-align:center">创建新的<em>dir</em></td></tr><tr><td style="text-align:center">rm <em>file</em> / rm -r <em>file</em></td><td style="text-align:center">删除 / 强制删除<em>file</em></td></tr><tr><td style="text-align:center">rm -r <em>dir</em> / rm -rf <em>dir</em></td><td style="text-align:center">删除 / 强制删除某<em>dir</em></td></tr><tr><td style="text-align:center">cp <em>file1</em> <em>file2</em></td><td style="text-align:center">将<em>file1</em> 复制到 <em>file2</em></td></tr><tr><td style="text-align:center">cp -r <em>dir1</em> <em>dir2</em></td><td style="text-align:center">将<em>dir1</em>复制到<em>dir2</em>，如不存在则创建</td></tr><tr><td style="text-align:center">mv <em>file1</em> <em>file2</em></td><td style="text-align:center">将<em>file1</em>移动到<em>file2</em></td></tr><tr><td style="text-align:center">ln -s <em>file</em> <em>link</em></td><td style="text-align:center">创建 <em>file</em> 的符号链接 <em>link</em></td></tr><tr><td style="text-align:center">touch file</td><td style="text-align:center">创建新文件</td></tr><tr><td style="text-align:center">cat <em>file1</em> &gt;&gt; <em>file2</em></td><td style="text-align:center">将<em>file1</em>拼接到<em>file2</em>的末尾</td></tr><tr><td style="text-align:center">cat <em>file1</em> <em>file2</em> &gt; <em>file3</em></td><td style="text-align:center">将<em>file2</em>拼接到<em>file1</em>的末尾创建<em>new file3</em></td></tr><tr><td style="text-align:center">head <em>file</em></td><td style="text-align:center">查看某文件的前10行</td></tr><tr><td style="text-align:center">tail <em>file</em></td><td style="text-align:center">查看某文件的后10行</td></tr><tr><td style="text-align:center">cat <em>file</em>  &#124;  head -n <em>N</em></td><td style="text-align:center">查看某文件的前<em>N</em>行</td></tr><tr><td style="text-align:center">wc -l <em>file</em></td><td style="text-align:center">查看文件有多少行</td></tr><tr><td style="text-align:center">wc -w <em>file</em></td><td style="text-align:center">查看文件有多少单词</td></tr><tr><td style="text-align:center">wc -c <em>file</em></td><td style="text-align:center">查看文件有多少字符</td></tr><tr><td style="text-align:center">wc <em>file</em></td><td style="text-align:center">默认返回三个值，依次是行数，单词数，字符数</td></tr><tr><td style="text-align:center">wc <em>file1</em> <em>file2</em></td><td style="text-align:center">可以统计多个文件，默认返回三行，分别是file1 file2 和 total</td></tr></tbody></table></div><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">ps -ef</td><td style="text-align:center">显示当前所有进程</td></tr><tr><td style="text-align:center">ps -ef &#124; gerp <em>python</em></td><td style="text-align:center">显示<em>python</em>相关的进程</td></tr><tr><td style="text-align:center">lsof -i: 2223</td><td style="text-align:center">查看占用某端口程序的进程号</td></tr><tr><td style="text-align:center">top</td><td style="text-align:center">显示所有进程的实时运行状态</td></tr><tr><td style="text-align:center">kill <em>pid</em></td><td style="text-align:center">终止某<em>pid</em>进程</td></tr></tbody></table></div><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>只有一条命令chmod(change mode), 其执行形式为 <code>chmod 777 file</code> / <code>chmod -r 777 dir</code></p><ul><li>其权限设置分为三级，分别用三位数字代表<ul><li>第一位为文件拥有者的权限</li><li>第二位其他同组用户对这个文件的权限</li><li>第三位代表其他不同组用户对其的权限</li></ul></li><li>具体的每位上的数字对应什么权限？<ul><li>4 —- read(r)</li><li>2 —- write(w)</li><li>1 —- execute(x)</li></ul></li></ul><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">ssh <em>user</em>@<em>host</em></td><td style="text-align:center">以某<em>user</em>的身份连接<em>host</em></td></tr><tr><td style="text-align:center">ssh -p <em>user</em>@<em>host</em></td><td style="text-align:center">在端口p以<em>user</em>的身份连接到<em>host</em></td></tr><tr><td style="text-align:center">logout / exit</td><td style="text-align:center">ssh 登陆后的退出命令</td></tr></tbody></table></div><h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><ul><li><code>$ scp [arg] source target</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-v ： 显示进度，可以用来查看连接、认证或是配置错误。</span><br><span class="line">-r ： 复制目录</span><br><span class="line">-C ： 使能压缩选项</span><br><span class="line">-P ： 选择端口</span><br><span class="line">-4 ： 强行使用 IPV4 地址</span><br><span class="line">-6 ： 强行使用 IPV6 地址</span><br></pre></td></tr></table></figure><ul><li><code>scp local_file remote_username@remove_ip:remote_folder</code>   将本地文件复制到远端服务器。</li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">grep <em>pattern</em> <em>files</em></td><td style="text-align:center">搜索<em>files</em>中匹配<em>pattern</em>的内容</td></tr><tr><td style="text-align:center">grep -r <em>pattern</em> <em>dir</em></td><td style="text-align:center">递归搜索<em>dir</em>中匹配<em>pattern</em>的内容</td></tr><tr><td style="text-align:center">command &#124; grep <em>pattern</em></td><td style="text-align:center">搜索 <em>command</em> 输出中匹配 <em>pattern</em> 的内容</td></tr></tbody></table></div><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">ping <em>host</em></td><td style="text-align:center">测试某<em>host</em>的网络连接</td></tr><tr><td style="text-align:center">wget <em>Link</em></td><td style="text-align:center">通过网络连接下载</td></tr><tr><td style="text-align:center">wget -c <em>Link</em></td><td style="text-align:center">断点续传下载</td></tr></tbody></table></div><h3 id="安装-amp-卸载"><a href="#安装-amp-卸载" class="headerlink" title="安装&amp;卸载"></a>安装&amp;卸载</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">make install</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">dpkg -i <em>software.deb</em></td><td style="text-align:center">安装包（Debian）</td></tr><tr><td style="text-align:center">rpm —qpl <em>software.rpm</em></td><td style="text-align:center">安装包 Red Hat Package Manager（RPM）</td></tr><tr><td style="text-align:center">rpm-e <em>file</em></td><td style="text-align:center">卸载软件</td></tr><tr><td style="text-align:center">apt-get upgrade</td><td style="text-align:center">更新所有已安装的软件包</td></tr></tbody></table></div><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ol><li><p>tar  只是归档，<strong>不是压缩</strong></p><ul><li>解包：tar xvf FileName.tar</li><li>打包：tar cvf FileName.tar DirName</li><li>(tar.gz和tgz只是两种不同的书写方式，后者是一种简化书写，等同处理)</li></ul></li><li><p>.gz</p><ul><li>解压1：gunzip FileName.gz</li><li>解压2：gzip -d FileName.gz</li><li>压缩：gzip FileName</li></ul></li><li><p>.tar.gz 和 .tgz</p><ul><li>解压：tar zxvf FileName.tar.gz</li><li>压缩：tar zcvf FileName.tar.gz DirName</li><li>Linux下压缩比率较tgz大，即压缩后占用更小的空间，使得压缩包看起来更小。 但同时在压缩，解压的过程却是非常耗费CPU时间。</li></ul></li><li><p>.bz2</p><ul><li>解压1：bzip2 -d FileName.bz2</li><li>解压2：bunzip2 FileName.bz2</li><li>压缩： bzip2 -z FileName</li></ul></li><li><p>.tar.bz2</p><ul><li>解压：tar jxvf FileName.tar.bz2</li><li>压缩：tar jcvf FileName.tar.bz2 DirName</li></ul></li><li><p>zip 格式是开放且免费的，所以广泛使用在 Windows、Linux、MacOS 平台，要说 zip 有什么缺点的话，就是它的压缩率并不是很高，不如 rar及 tar.gz 等格式。</p><ul><li>压缩：zip -r examples.zip examples (examples为目录)</li><li>解压：zip examples.zip</li></ul></li></ol><div class="note info"><p>Linux下对于占用空间与耗费时间的折衷 多选用tgz格式，不仅压缩率较高，而且打包、解压的时间都较为快速，是较为理想的选择。</p></div><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Annotation</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + C</td><td style="text-align:center">终止当前命令</td></tr><tr><td style="text-align:center">Ctrl + Z</td><td style="text-align:center">暂停当前命令，fg 可恢复运行</td></tr><tr><td style="text-align:center">Ctrl + D</td><td style="text-align:center">注销当前对话（类似exit）</td></tr><tr><td style="text-align:center">Ctrl + U</td><td style="text-align:center">删除整行</td></tr><tr><td style="text-align:center">Ctrl + W</td><td style="text-align:center">删除当前行中的字</td></tr><tr><td style="text-align:center">！！</td><td style="text-align:center">重复上次的命令</td></tr></tbody></table></div><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="python-path"><a href="#python-path" class="headerlink" title="python path"></a>python path</h4><ul><li>Linux 非root用户<code>pip install package</code> -–user 默认的安装路径。查看后发现默认安装路径在<code>/home/username/.local/bin/</code></li><li><code>whereis python</code> 查看python的安装路径</li><li><code>ls /usr/bin/python*</code>  查看可用的python脚本 for non root user modify python</li><li>将<code>alias python=&#39;/usr/bin/python3.4&#39;</code> 写入<code>vim ~/.bashrc</code></li><li><code>. ~/.bashrc</code> 重载bashrc 脚本或者重新登陆即可生效</li><li><code>python --version</code></li></ul><h4 id="bypy"><a href="#bypy" class="headerlink" title="bypy"></a>bypy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bypy list                 # 显示文档</span><br><span class="line">bypy upload filename -v   # 上传某文件，显示进度</span><br><span class="line">bypy -c                   # 取消令牌文件。一段时间后要重新授权</span><br><span class="line">bypy downdir filename     # 下载</span><br><span class="line">bypy compare              # 比较本地目录和网盘目录</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo_Next_博客搭建记</title>
      <link href="/2018/07/14/Hexo_Next_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0/"/>
      <url>/2018/07/14/Hexo_Next_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>与我而言，建立个人博客存在的意义有两个。<br>一方面，当作自己的备忘录，记录零散的知识点，避免重复的搜索工作；<br>另一方面，可以更好的分享一些自己的心得，方便与大家交流。<br>选择<code>GitHub Hexo Next</code>的组合的主要原因就是方便、便宜、简单，为从来没有接触过前端的自己降低难度。<br>为了能让博客漂亮一点，这几天来的折腾过程记录整理在此，以备遗忘。</p><a id="more"></a><hr><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><hr><h4 id="本地构建博客"><a href="#本地构建博客" class="headerlink" title="本地构建博客"></a>本地构建博客</h4><p>我的环境是win10系统，经过一下步骤可以构建好一个运行在本地的静态博客（电脑不能占用localhost:4000端口）</p><ul><li>安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>, 这是建立Hexo的基础。在powershell中验证是否安装成功用后面两条命令 <code>node -v</code>、  <code>npm -v</code>。</li><li>建立一个存放博客文件的新文件夹。按住<code>shift</code>单击右键点击‘在此处打开Powershell’</li><li><p>安装Hexo，并初始化博客（需要几分钟）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>开启本地服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我就是试试博客搭建好没&quot;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><p>要想将本地博客部署到gitpages上，按照下面步骤操作即可。</p><ul><li><p>安装分布式版本控制系统Git， <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">这是下载地址</a> 、<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">这是git教程</a></p></li><li><p>没有github账户的先注册一个</p></li><li><p>要将本地的git和github账户绑定，打开git bash ,配置如下信息。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;OnlyChristmas&quot;</span><br><span class="line">git config --global user.email &quot;OnlyChristmas@hh.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成ssh密钥文件的命令：<code>ssh-keygen -t rsa -C &quot;OnlyChristmas@hh.com&quot;</code>,中间不需要设置什么，直接三个回车。</p></li><li><p><a href="https://github.com/settings/keys" target="_blank" rel="noopener">在这里</a> 点击 <span id="inline-green">New SSH key</span> 新建一个链接，并将<span id="inline-red">C://users/用户名/.ssh/id_rsa.pub</span>文件中的密钥复制进去（标题随便填）。</p></li><li><p>bash中输入<code>ssh git@github.com</code>验证是否配置成功。如果出现</p><blockquote><p><code>Hi 你的用户名！You&#39;ve successfully authenticated ,,,bala,,,Connection to github.com closed</code><br>证明连接成功，以后推送的时候只需第一次输入密码，以后直接推送即可。</p></blockquote></li></ul><ul><li><p>在github中新建一个仓库，名字是默认写法<span id="inline-black">用户名.github.io</span>  例如:<a href="http://OnlyChristmas.github.io" target="_blank" rel="noopener">OnlyChristmas.github.io</a></p></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git # 你的代码仓库地址，记得后面加上`.git`</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li><li><p>然后保存你的配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>让你的博客上线！</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>  <div class="note danger"><p>博客上线后，chrome浏览器页面通常会直接载入缓存，无法正常显示我们上传的新内容。 </p></div>  <div class="note info"><p>这时按`F12`进入后台，然后右键单击浏览器的刷新按钮，选择<span id="inline-black">清空缓存并硬性重新加载</span>即可正常浏览页面</p></div></li></ul><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>不来不准备弄的，但是不折腾不舒服啊，最终还是配置完成了，链接如下。<br><a href="http://imbowei.com/2018/07/29/Github-and-Coding-bulid-blog/#more">用Github和Coding双线绑定自定义域名,并申请全站SSL</a></p><h4 id="初探Hexo"><a href="#初探Hexo" class="headerlink" title="初探Hexo"></a>初探Hexo</h4><ul><li><p>下面是常用的及条命令以及简写，更多命令<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">参考官方文档</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line"># 主要命令的含义以及简写</span><br><span class="line"></span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line"># 可能用到的设置命令</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure></li><li><p>图片是博客必不可少的一部分，但它们会造成加载缓慢。所以对于我们严肃的技术博客来说，就要少贴图，多敲代码，哈哈~。<br>  但是偶尔也是要贴几张图，才能说得更明白，这个时候推荐使用<a href="https://portal.qiniu.com/signup?code=3lgfr7lh13uj6" target="_blank" rel="noopener">七牛云的外链</a>，来提高速度。<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">为什么选用七牛云</a></p></li><li>虽然我们是个严肃的技术博客，要有学术风格（就是丑！），但也不能太丑吧！？所以我这里换用<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a>，配置方式如下。当然也有<a href="https://hexo.io/themes/" target="_blank" rel="noopener">更多的漂亮主题可供挑选</a>，只是在配置的时候如是出现问题，更难解决，新手慎用。<br>  在blog文件夹下的shell中输入，下载主题文件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>  然后在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line"></span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line"></span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"></span><br><span class="line"># theme: landscape</span><br><span class="line"></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><hr><h3 id="Next内置优化"><a href="#Next内置优化" class="headerlink" title="Next内置优化"></a>Next内置优化</h3><hr><p>优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。</p><h4 id="选择Next主题中的风格样式"><a href="#选择Next主题中的风格样式" class="headerlink" title="选择Next主题中的风格样式"></a>选择Next主题中的风格样式</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，并在四种风格中选择一个即可。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"></span><br><span class="line"># scheme: Muse</span><br><span class="line"></span><br><span class="line"># scheme: Mist</span><br><span class="line"></span><br><span class="line"># scheme: Pisces</span><br><span class="line"></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="algolia搜索"><a href="#algolia搜索" class="headerlink" title="algolia搜索"></a>algolia搜索</h4><p>   首先在 <a href="https://www.algolia.com/" target="_blank" rel="noopener">algolia</a> 注册账号。此处优化需注意，官方文档不够完善。</p><ul><li><p>创建APIKey HEXO_ALGOLIA_INDEXING_KEY</p></li><li><p>进入Algolia的API Keys页面ALL API KEYS选项卡</p></li><li><p>创建APIKey</p><ul><li>Description：HEXO_ALGOLIA_INDEXING_KEY</li><li>Indices：&lt;此处选择之前创建的Index&gt;</li><li><p>ACL：Add records，Delete records，List indices，Delete index</p><p>也就是说，我们有两个APIKey，其中一个是Search-only API Key（我们后面需要进行用它配置），另一个是HEXO_ALGOLIA_INDEXING_KEY（新建好即可）。<br>具体的配置步骤如下：</p></li></ul></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 中需要添加</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">    applicationID:  # Application ID</span><br><span class="line">    apiKey: # Search-only API Key</span><br><span class="line">    indexName: # 此处选择之前创建的Index</span><br><span class="line">    chunkSize: 5000</span><br></pre></td></tr></table></figure><ul><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，只需将enable改为true，最后两个搜索提示信息有需要的话也可以修改。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">algolia_search:</span><br><span class="line">  enable: true</span><br><span class="line">  hits:</span><br><span class="line">  per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">  input_placeholder: Search for Posts</span><br><span class="line">  hits_empty: &quot;不好意思，木有&apos;$&#123;query&#125;&apos;的搜索结果😂&quot;</span><br><span class="line">  hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span><br></pre></td></tr></table></figure></li><li><p>接下来，我采取的配置方法和官方文档有点出入，但是亲测有效(我是win10系统)。</p><pre><code>  1. 在博客文件夹根目录右键打开git bash here  2. `export HEXO_ALGOLIA_INDEXING_KEY=&#39;Search-only API Key&#39;`  3. `hexo algolia`</code></pre></li><li><p>bash中出现类似提示说明配置成功</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [Algolia] Identified 6 pages and posts to index.</span><br><span class="line">INFO  [Algolia] Indexing chunk 1 of 1 (50 items each)</span><br><span class="line">INFO  [Algolia] Indexing done.</span><br></pre></td></tr></table></figure></li></ul><h4 id="选择动画背景"><a href="#选择动画背景" class="headerlink" title="选择动画背景"></a>选择动画背景</h4><ul><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息，最好四选一。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true   # 背景有降落伞</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false    # 背景有像海浪一样的小球球</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false    # 背景有立体蜘蛛网</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false    # 屏幕中央有一个爆炸状的球球</span><br><span class="line"></span><br><span class="line">#### 代码块语法高亮设置</span><br><span class="line">- 在&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 设置</span><br><span class="line"></span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace: true</span><br></pre></td></tr></table></figure></li></ul><p>注意，网上的自定义样式优化代码中，有对代码块的优化，那部分代码需要注释掉。</p><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><ul><li>打开博客根目录，shell安装插件，用如下代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line"></span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line"></span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line"></span><br><span class="line">- hexo-generator-feed</span><br><span class="line">    #Feed Atom</span><br><span class="line">    feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br><span class="line">    hub:</span><br><span class="line">    content:</span><br><span class="line">    content_limit: 140</span><br><span class="line">    content_limit_delim: ‘ ’</span><br></pre></td></tr></table></figure><ul><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: &quot;/atom.xml&quot;</span><br></pre></td></tr></table></figure></li><li><p>最后重新生成，只要在<code>./public</code>中看到<code>atom.xml</code>说明生成成功。</p></li></ul><h4 id="修改文章底部的tag图标"><a href="#修改文章底部的tag图标" class="headerlink" title="修改文章底部的tag图标"></a>修改文章底部的tag图标</h4><ul><li>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,当然也可以切换成任何你喜欢的小图标。</li></ul><h4 id="busuanzi统计访客人数"><a href="#busuanzi统计访客人数" class="headerlink" title="busuanzi统计访客人数"></a>busuanzi统计访客人数</h4><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息，也可以根据自己的喜欢修改其他配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 你是第</span><br><span class="line">  site_uv_footer: 个小伙伴</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问</span><br><span class="line">  site_pv_footer: 人次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure><blockquote><p>20181009更新：由于卜算子的域名到期，需要更换<code>/next/layout/_third-party/analytics/busuanzi-counter.swig</code> 下的网址为新网址，<code>https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</code></p></blockquote><h4 id="文章“热度”"><a href="#文章“热度”" class="headerlink" title="文章“热度”"></a>文章“热度”</h4><ul><li><p>首先要注册<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a></p></li><li><p>左上角创建一个新的应用，获取AppID and AppKey。并且在网站的<code>设置-&gt;安全中心</code>中设置Web安全域名。</p></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">enable: true</span><br><span class="line">app_id:  #&lt;app_id&gt;</span><br><span class="line">app_key:  #&lt;app_key&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开<code>/themes/next/layout/_macro/post.swig</code>,我的代码修改成如下样子，也可以自由发挥。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;# LeanCould PageView #&#125;</span><br><span class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class="line">   &lt;span id=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;</span><br><span class="line">     &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">     &lt;!-- 注释掉了图片 --&gt;</span><br><span class="line">&lt;!-- &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">     &lt;/span&gt;   --&gt;</span><br><span class="line">    </span><br><span class="line">     &#123;% if theme.post_meta.item_text %&#125;</span><br><span class="line">       &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123;__(&apos;post.visitors&apos;)&#125;&#125;&amp;#58;&lt;/span&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">       &lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt;</span><br><span class="line">       &lt;span&gt;℃&lt;/span&gt;</span><br><span class="line">   &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后，在<code>/themes/next/languages/zh-Hans.yml</code>,可以任意修改文字信息,我的代码如下所示:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">created: 创建于</span><br><span class="line">modified: 更新于</span><br><span class="line">sticky: 置顶</span><br><span class="line">posted: &apos;发表于:&apos;</span><br><span class="line">in: &apos;类别:&apos;</span><br><span class="line">read_more: 阅读全文</span><br><span class="line">untitled: 未命名</span><br><span class="line">toc_empty: 此文章未包含目录</span><br><span class="line">visitors: 热度</span><br></pre></td></tr></table></figure></li></ul><h4 id="字数统计功能配置"><a href="#字数统计功能配置" class="headerlink" title="字数统计功能配置"></a>字数统计功能配置</h4><ul><li>切换到根目录下，然后运行如下代码</li></ul><p><code>$ npm install hexo-wordcount --save</code></p><ul><li>然后在<span id="inline-purple"> 主题配置文件 </span>中自定义如下配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line"></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: false</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><p id="div-border-left-red"> 这里我遇到一个大坑，在正文中写`<html>`标签一定要用代码块包括，否则可能会造成wordcount无法正常统计字数！一直显示为0 </html></p><h4 id="解决readme问题"><a href="#解决readme问题" class="headerlink" title="解决readme问题"></a>解决readme问题</h4><p>在github手动添加readme文件总是会被擦掉，会很麻烦，现在有两种解决方法。</p><ul><li>第一种，在<code>/blog/source</code>中添加一个<code>README.MDOWN</code>文件，每次推送到github都可以正常解析。</li><li>第二种，在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><h4 id="自定义网站图标"><a href="#自定义网站图标" class="headerlink" title="自定义网站图标"></a>自定义网站图标</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line"></span><br><span class="line"># small: /images/favicon-16x16-next.png</span><br><span class="line"></span><br><span class="line"># medium: /images/favicon-32x32-next.png</span><br><span class="line"></span><br><span class="line"># apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line"></span><br><span class="line"># safari_pinned_tab: /images/logo.svg</span><br><span class="line"></span><br><span class="line">  small: # 你的图像</span><br><span class="line">  medium: # 你的图像</span><br><span class="line">  apple_touch_icon: # 你的图像</span><br><span class="line">  safari_pinned_tab: # 你的图像</span><br><span class="line"></span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line"></span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h4 id="网站顶部加载条"><a href="#网站顶部加载条" class="headerlink" title="网站顶部加载条"></a>网站顶部加载条</h4><ul><li>已经被Next主题做成了默认的设置，在<span id="inline-purple"> 主题配置文件 </span>中配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line"></span><br><span class="line">pace: true</span><br><span class="line"></span><br><span class="line"># Themes list:</span><br><span class="line"></span><br><span class="line">#pace-theme-big-counter</span><br><span class="line"></span><br><span class="line">#pace-theme-bounce</span><br><span class="line"></span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line"></span><br><span class="line">#pace-theme-center-atom</span><br><span class="line"></span><br><span class="line">#pace-theme-center-circle</span><br><span class="line"></span><br><span class="line">#pace-theme-center-radar</span><br><span class="line"></span><br><span class="line">#pace-theme-center-simple</span><br><span class="line"></span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line"></span><br><span class="line">#pace-theme-fill-left</span><br><span class="line"></span><br><span class="line">#pace-theme-flash</span><br><span class="line"></span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line"></span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line"></span><br><span class="line">#pace-theme-minimal</span><br><span class="line"></span><br><span class="line"># For example</span><br><span class="line"></span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line"></span><br><span class="line"># pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure><h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><ul><li>已经被Next主题做成了默认的设置，在<span id="inline-purple"> 主题配置文件 </span>中配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line"></span><br><span class="line"># Specify the date when the site was setup.</span><br><span class="line"></span><br><span class="line"># If not defined, current year will be used.</span><br><span class="line"></span><br><span class="line">  since: 2018</span><br><span class="line"></span><br><span class="line"># Icon between year and copyright info.</span><br><span class="line"></span><br><span class="line">  icon: heart</span><br><span class="line"></span><br><span class="line"># If not defined, will be used `author` from Hexo main config.</span><br><span class="line"></span><br><span class="line">  copyright:</span><br><span class="line"></span><br><span class="line"># -–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–-–--—</span><br><span class="line"></span><br><span class="line"># Hexo link (Powered by Hexo).</span><br><span class="line"></span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">  </span><br><span class="line"># Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">enable: false</span><br><span class="line"># Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">version: true</span><br></pre></td></tr></table></figure><ul><li>可以在每天博文生成的时候，将它作为一个文章模板。这样可以灵活地对于每篇文章设定是否需要版权信息。</li><li>我在<code>/blog/scaffolds/</code>中新建了一个next博文模板，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments: true</span><br><span class="line">categories: NLP</span><br><span class="line">tags: [tag1, tag2]</span><br><span class="line">post_copyright: true</span><br><span class="line"></span><br><span class="line"> This is a summary</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息,每次新生成的文章都会使用此模板。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#### Writing</span><br><span class="line"></span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: next</span><br></pre></td></tr></table></figure><h4 id="SEO配置"><a href="#SEO配置" class="headerlink" title="SEO配置"></a>SEO配置</h4><ul><li>想要让我们的站点被搜索引擎收录，要提交给他们站点文件。</li><li>首先安装两个插件,并生成两个站点文件，sitemap.xml与baidusitemap.xml文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save-dev</span><br><span class="line">hexo d -g</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save-dev</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># SEO 优化</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><ul><li>新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User-agent: * Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: http://imbowei.com/sitemap.xml</span><br><span class="line">Sitemap: http://imbowei.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中配置如下。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line"></span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure><ul><li>当然还要去<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长</a>和<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长</a>验证,<a href="https://www.bing.com/webmaster/" target="_blank" rel="noopener">bing验证</a></li></ul><h4 id="google-analytics"><a href="#google-analytics" class="headerlink" title="google_analytics"></a>google_analytics</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中有若干种分析工具可以配置，我这里只配置了<a href="https://analytics.google.com/" target="_blank" rel="noopener">谷歌分析</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Google Analytics</span><br><span class="line"></span><br><span class="line">google_analytics: UA-balbalbal</span><br></pre></td></tr></table></figure><blockquote><p><strong>20180809更新</strong></p></blockquote><ul><li>为了提升新浏览器的性能，将Next主题原有的<code>blog/themes/next/layout/_third_party/analytics/google_analytics.js</code>脚本改为异步加载。如果 IE 9 以及不识别 async 脚本属性的旧版移动浏览器中会自动降级为同步加载和执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            (i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">          m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'https://www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line">  ga(<span class="string">'create'</span>, <span class="string">'&#123;&#123; theme.google_analytics &#125;&#125;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.ga=<span class="built_in">window</span>.ga||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(ga.q=ga.q||[]).push(<span class="built_in">arguments</span>)&#125;;ga.l=+<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">ga(<span class="string">'create'</span>, <span class="string">'&#123;&#123; theme.google_analytics &#125;&#125;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script async src='https:/</span><span class="regexp">/www.google-analytics.com/</span>analytics.js<span class="string">'&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="gitment评论系统"><a href="#gitment评论系统" class="headerlink" title="gitment评论系统"></a>gitment评论系统</h4><p>先注册gitment,<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">这是作者博客</a>，按照<a href="https://github.com/imsun/gitment#customize" target="_blank" rel="noopener">官方文档搭建即可</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Gitment</span><br><span class="line"># Introduction: https://imsun.net/posts/gitment-introduction/</span><br><span class="line"># You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;</span><br><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: false # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: OnlyChristmas # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: OnlyChristmas.github.io # MUST HAVE, The repo you use to store Gitment comments</span><br><span class="line">  client_id: 8fc5c43242323koljoa # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: 4ff9a214325312515151b04c400d46 # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure><h4 id="Mathjax数学公式支持"><a href="#Mathjax数学公式支持" class="headerlink" title="Mathjax数学公式支持"></a>Mathjax数学公式支持</h4><ul><li><p>08.22更新</p></li><li><p>首先，在<span id="inline-purple"> 主题配置文件 </span>中修改如下配置：enable 为 true</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">enable: false</span><br><span class="line">per_page: true</span><br><span class="line">cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure></li><li><p>在<code>/scaffolds/draft.md</code>文件中添加<code>mathjax: false</code>默认不启用mathjax（想要启用的文章再改为true），加快页面加载速度。</p></li><li><p>Hexo默认使用<code>hexo-renderer-marked</code>引擎进行网页渲染，其中对许多字符诸如划线、下划线、中括号等定义了转义。因此，在进行网页渲染时，数学公式中的这些字符先通过<code>hexo-renderer-marked</code>进行转义，就发生了歧义，而再通过MathJax渲染出来的数学公式，自然就显示不正常了。根据这种情况，我们更换渲染器。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>在做完工作上面的工作后，行间公式就可以被正确渲染了，但行内公式却还存在着部分问题，这是因为对行间定义的转义字符和对行内定义的转义字符并不相同，还有部分已定义的行间转义字符会与数学公式中可能用到的字符发生冲突，用到这些字符的数学公式在渲染前仍被进行了转义。</p><p>  打开<code>node_modules\kramed\lib\rules\inline.js</code>文件，做出如下两处修改。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">line 11,</span><br><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">-&gt;  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line"></span><br><span class="line">line 20,</span><br><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">-&gt;  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><p> 不要安装 `hexo-math` 和 `hexo-renderer-markdown-it-plus` 这两个包，否则出错。</p></div><hr><h3 id="自定义优化"><a href="#自定义优化" class="headerlink" title="自定义优化"></a>自定义优化</h3><hr><p>优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。</p><h4 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h4><p>next内置的代码在服务器升级https之后，百度分享的js请求不了。但是在 <a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">github上的轮子</a> 可以修改后再其启用这一功能。</p><ul><li>下载后得到static文件夹，放入到<code>/themes/next/source/</code>目录下。</li><li>将<code>themes/next/layout/_partials/share/baidushare.swig</code>中末尾处的代码进行替换。</li></ul><p>原代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>替换代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>最后一定记得先<code>hexo g</code>再<code>hexo s</code>，否则可能会出现问题。</li></ul><h4 id="自定义网页title"><a href="#自定义网页title" class="headerlink" title="自定义网页title"></a>自定义网页title</h4><p>   在<code>next\source\js\src</code>下新建脚本<code>custom_title.js</code>,将下面代码复制进去。  <a href="https://asdfv1929.github.io/2018/01/25/crash-cheat/" target="_blank" rel="noopener">js脚本来源</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> var OriginTitle = document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&apos;visibilitychange&apos;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;);</span><br><span class="line">         document.title = &apos;╭(°A°`)╮ 爱我别走 ~&apos;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;);</span><br><span class="line">         document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 这才对嘛~&apos; + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(function () &#123;</span><br><span class="line">             document.title = OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>   在<code>next\layout\_layout.swig</code>的<code>&lt;body&gt; &lt;/body&gt;</code>标签体内添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom_title.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="鼠标点击桃心样式"><a href="#鼠标点击桃心样式" class="headerlink" title="鼠标点击桃心样式"></a>鼠标点击桃心样式</h4><ul><li><p>在<code>/themes/next/source/js/src/</code>中新建<code>love.js</code>,其中写入的代码如下。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function r()&#123;for(var e=0;e&lt;n.length;e++)n[e].alpha&lt;=0?(t.body.removeChild(n[e].el),n.splice(e,1)):(n[e].y--,n[e].scale+=.004,n[e].alpha-=.013,n[e].el.style.cssText=&quot;left:&quot;+n[e].x+&quot;px;top:&quot;+n[e].y+&quot;px;opacity:&quot;+n[e].alpha+&quot;;transform:scale(&quot;+n[e].scale+&quot;,&quot;+n[e].scale+&quot;) rotate(45deg);background:&quot;+n[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;var n=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,function(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),function()&#123;var a=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;a&amp;&amp;a(),function(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,n.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;),t.body.appendChild(a)&#125;(e)&#125;&#125;(),r()&#125;(window,document);</span><br></pre></td></tr></table></figure></li><li><p>在<code>/themes/next/layout/_layout.swig</code>中的<code>&lt;body&gt;&lt;/body&gt;</code>标签体内添加下面代码。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="鼠标点击烟花爆炸样式"><a href="#鼠标点击烟花爆炸样式" class="headerlink" title="鼠标点击烟花爆炸样式"></a>鼠标点击烟花爆炸样式</h4><ul><li><p>在<code>/themes/next/source/js/src/</code>中新建<code>fireworks.js</code>,其中写入的代码如下。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在<code>/themes/next/layout/_layout.swig</code>中的<code>&lt;body&gt;&lt;/body&gt;</code>标签体内添加下面代码。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击烟花爆炸 --&gt;</span><br><span class="line"> &#123;% if theme.fireworks %&#125;</span><br><span class="line">    &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中添加如下配置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks 鼠标点击烟花爆炸</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义鼠标图片"><a href="#自定义鼠标图片" class="headerlink" title="自定义鼠标图片"></a>自定义鼠标图片</h4><ul><li><p>在<code>themes/next/source/css/_custom/custom.styl</code>中，添加如下代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">&#123;</span><br><span class="line">cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">&#125;</span><br><span class="line">:active &#123;</span><br><span class="line">  cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面的url必须是ico 图片，想要自定义图片可以自行上传七牛云获取外链（加速），也可以本地加载。我就偷懒直接用其他博主的链接了。</p></li></ul><h4 id="网易云音乐添加歌单进正文页面"><a href="#网易云音乐添加歌单进正文页面" class="headerlink" title="网易云音乐添加歌单进正文页面"></a>网易云音乐添加歌单进正文页面</h4><p><a href="https://jingyan.baidu.com/article/d7130635dcdf6813fdf475c7.html" target="_blank" rel="noopener">怎么生成歌单的外链看这里</a><br>然后将生成的代码加入到想要放入的位置就好了（适当调整大小）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=260 height=240 src=&quot;//music.163.com/outchain/player?type=0&amp;id=2315300596&amp;auto=1&amp;height=430&quot;&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h4 id="设置fork-me-on-github"><a href="#设置fork-me-on-github" class="headerlink" title="设置fork me on github"></a>设置fork me on github</h4><ul><li><a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">在这里挑选样式并复制代码</a> 或者<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">这里</a>也可以。</li><li>刚才复制的代码放到<code>themes/next/layout/_layout.swig</code>文件中，<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面，并且记得<code>herf</code>改为自己的github地址。</li></ul><h4 id="配置文章结束模板"><a href="#配置文章结束模板" class="headerlink" title="配置文章结束模板"></a>配置文章结束模板</h4><ul><li><p>在<code>\themes\next\layout\_macro</code>文件夹中，新建<code>passage-end-tag.swig</code>，并且写入如下代码(当然也可以自由发挥):</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">      &lt;blockquote class=&quot;blockquote-center&quot;&gt;</span><br><span class="line">      &lt;div style=&quot;text-align:center;color: #FF5733;font-size:24px;&quot;&gt;-------------本文结束 &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt; 感谢您的时间-------------&lt;/div&gt;</span><br><span class="line">      &lt;/blockquote&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下代码。（在我文件大约360的位置）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>最后在<span id="inline-purple"> 主题配置文件 </span>中添加如下配置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">enabled: true</span><br></pre></td></tr></table></figure></li><li><p>实现效果如本文结尾所示</p></li></ul><h4 id="头像制作"><a href="#头像制作" class="headerlink" title="头像制作"></a>头像制作</h4><p>按照<strong>NEXT</strong>主题，上传的网站图片需要满足一定的规格要求。</p><ul><li><p>网站图标：我这里在一个在线艺术字网站，设计了一个汉字，下载图片（转换SVG），并且尽量在保证图片清晰度的情况下减小图片大小，以保证网站的加载速度。<a href="https://tinypng.com/" target="_blank" rel="noopener">很棒的免费在线图片压缩网站</a></p></li><li><p>个人头像：这里涉及到方照片裁剪呈圆形图片的问题。</p><ul><li><p>首先，你需要安装一个PS；</p></li><li><p>然后，左上角选取圆形套索。按住<code>SHIFT</code>键的同时选取图片满意的部分；</p><p>  <img src="https://i.loli.net/2018/09/07/5b928d3d3221d.png" alt="方头像变成圆形_1.png"></p></li><li><p>在图片中，右键”通过拷贝的图层“。然后勾选掉下面图层的眼睛标识，得到下图所示的样子。</p><p>  <img src="https://i.loli.net/2018/09/07/5b928e5905fdc.png" alt="方头像变成圆形_2.png"></p></li><li><p>接下来用裁剪工具可以去掉多余的透明背景。</p></li><li><p>在顶部选项卡，”图像-–&gt;图像大小“可以根据需要调整图像的大小。</p></li><li><p>最后，照例为了保证网站的加载速度，尽可能的在保证图片质量的前提下压缩图片。<a href="https://tinypng.com/" target="_blank" rel="noopener">很棒的免费在线图片压缩网站</a></p></li></ul></li></ul><h4 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h4><ul><li><p>首先打开头像选项,在<span id="inline-purple"> 主题配置文件 </span>中。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in theme directory(source/images): # 你的头像</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">avatar: # 你的头像</span><br></pre></td></tr></table></figure></li><li><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">display: block;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">padding: $site-author-image-padding;</span><br><span class="line">max-width: $site-author-image-width;</span><br><span class="line">height: $site-author-image-height;</span><br><span class="line">border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">/* 头像圆形 */</span><br><span class="line">border-radius: 80px;</span><br><span class="line">-webkit-border-radius: 80px;</span><br><span class="line">-moz-border-radius: 80px;</span><br><span class="line">box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束</span><br><span class="line">  (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"></span><br><span class="line">/* 鼠标经过头像旋转360度 */</span><br><span class="line">-webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">-moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">/* 鼠标经过停止头像旋转</span><br><span class="line">-webkit-animation-play-state:paused;</span><br><span class="line">animation-play-state:paused;*/</span><br><span class="line">/* 鼠标经过头像旋转360度 */</span><br><span class="line">-webkit-transform: rotateZ(360deg);</span><br><span class="line">-moz-transform: rotateZ(360deg);</span><br><span class="line">transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">0% &#123;</span><br><span class="line">  -webkit-transform: rotateZ(0deg);</span><br><span class="line">&#125;</span><br><span class="line">100% &#123;</span><br><span class="line">  -webkit-transform: rotateZ(-360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">0% &#123;</span><br><span class="line">  -moz-transform: rotateZ(0deg);</span><br><span class="line">&#125;</span><br><span class="line">100% &#123;</span><br><span class="line">  -moz-transform: rotateZ(-360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">0% &#123;</span><br><span class="line">  transform: rotateZ(0deg);</span><br><span class="line">&#125;</span><br><span class="line">100% &#123;</span><br><span class="line">  transform: rotateZ(-360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="站点上线时间"><a href="#站点上线时间" class="headerlink" title="站点上线时间"></a>站点上线时间</h4><ul><li><p>在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上，并且修改你的上线时间。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var now = new Date();</span><br><span class="line">  function createtime() &#123;</span><br><span class="line">      var grt= new Date(&quot;07/06/2018 11:11:00&quot;);//此处修改你的建站时间或者网站上线时间</span><br><span class="line">      now.setTime(now.getTime()+250);</span><br><span class="line">      days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">      hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">      if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">      mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">      seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">      snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">      document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">      document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="daovoice"><a href="#daovoice" class="headerlink" title="daovoice"></a>daovoice</h4><ul><li><p>在<a href="https://dashboard.daocloud.io/" target="_blank" rel="noopener">daovoice</a>注册账号可以得到 app_id</p></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中添加如下配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact</span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id:   # 这里填你刚才获得的 app_id</span><br></pre></td></tr></table></figure></li><li><p>在<code>/themes/next/layout/_partials/head.swig</code>,添加如下代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加DaoVioce --&gt;</span><br><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">daovoice(&apos;init&apos;, &#123;</span><br><span class="line">    app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">  &#125;);</span><br><span class="line">daovoice(&apos;update&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="阅读排行榜"><a href="#阅读排行榜" class="headerlink" title="阅读排行榜"></a>阅读排行榜</h4><ul><li><p><code>hexo n page top</code>新建页面，编辑自动生成的index.md文件，代码如下,替换好你的 <strong>leancloud账号</strong> 和页面链接（一共三处）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(&quot;leancloud_appid&quot;, &quot;leancloud_appkey&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var time=0</span><br><span class="line">var title=&quot;&quot;</span><br><span class="line">var url=&quot;&quot;</span><br><span class="line">var query = new AV.Query(&apos;Counter&apos;);</span><br><span class="line">query.notEqualTo(&apos;id&apos;,0);</span><br><span class="line">query.descending(&apos;time&apos;);</span><br><span class="line">query.limit(1000);</span><br><span class="line">query.find().then(function (todo) &#123;</span><br><span class="line">  for (var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">    var result=todo[i].attributes;</span><br><span class="line">    time=result.time;</span><br><span class="line">    title=result.title;</span><br><span class="line">    url=result.url;</span><br><span class="line">    // var content=&quot;&lt;a href=&apos;&quot;+&quot;https://onlychristmas.github.io&quot;+url+&quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;br&gt;&quot;+&quot;&lt;font color=&apos;#fff&apos;&gt;&quot;+&quot;阅读次数：&quot;+time+&quot;&lt;/font&gt;&quot;+&quot;&lt;br&gt;&lt;br&gt;&quot;;</span><br><span class="line">    var content=&quot;&lt;p&gt;&quot;+&quot;&lt;font color=&apos;#1C1C1C&apos;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;/font&gt;&quot;+&quot;&lt;a href=&apos;&quot;+&quot;https://onlychristmas.github.io&quot;+url+&quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;/p&gt;&quot;;</span><br><span class="line">    document.getElementById(&quot;top&quot;).innerHTML+=content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, function (error) &#123;</span><br><span class="line">  console.log(&quot;error&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>本地调试不显示，重新生成上传，才能看到排序效果</p></li></ul><h4 id="背景透明"><a href="#背景透明" class="headerlink" title="背景透明"></a>背景透明</h4><ul><li><p>考虑到我们这么好看的动态背景，只在文章两边很小的区域展示，有点别扭，想要让它在文章后面也能显示。</p></li><li><p>在<code>themes\next\source\css_schemes\你设置的主题\index.styl</code>文件中搜索<code>background</code>,会出现五个结果，我这里只将前两个设置为<code>none(透明)</code>，也可以根据需求设置更多的透明。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// =================================================</span><br><span class="line">// Desktop layout styles.</span><br><span class="line">// =================================================</span><br><span class="line">// Post blocks.</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">padding: initial;</span><br><span class="line">background: none;</span><br><span class="line">box-shadow: initial;</span><br><span class="line">border-radius: initial;</span><br><span class="line">&#125;</span><br><span class="line">// Post &amp; Comments blocks.</span><br><span class="line">.post-block &#123;</span><br><span class="line">  padding: $content-desktop-padding;</span><br><span class="line">  background: none;</span><br><span class="line">  box-shadow: $box-shadow-inner;</span><br><span class="line">  border-radius: $border-radius-inner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果手机端背景透明，整个页面会比较凌乱，影响阅读效果。切记保持<code>white</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// =================================================</span><br><span class="line">// &lt; 767px</span><br><span class="line">// =================================================</span><br><span class="line">+mobile() &#123;</span><br><span class="line"></span><br><span class="line">  // Posts in blocks.</span><br><span class="line">  .content-wrap &#123;</span><br><span class="line">    padding: $content-mobile-padding;</span><br><span class="line">    background: white;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>同理，在平台电脑上最好也保持背景不透明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// =================================================</span><br><span class="line">// &gt; 768px &amp; &lt; 991px</span><br><span class="line">// =================================================</span><br><span class="line">+tablet() &#123;</span><br><span class="line"></span><br><span class="line">  // Posts in blocks.</span><br><span class="line">  .content-wrap &#123;</span><br><span class="line">    padding: $content-tablet-padding;</span><br><span class="line">    background: white;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="添加代码块复制按钮"><a href="#添加代码块复制按钮" class="headerlink" title="添加代码块复制按钮"></a>添加代码块复制按钮</h4><ul><li>下载<a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js" target="_blank" rel="noopener">clipboard.min.js</a>并将其放到<code>.\themes\next\source\js\src\</code>目录下。</li><li>在<code>.\themes\next\source\js\src\</code>目录下，创建<code>clipboard-use.js</code>，文件内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//代码块复制按钮</span><br><span class="line">.highlight&#123;</span><br><span class="line">  //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-color: #eee;</span><br><span class="line">    background-image: linear-gradient(#fcfcfc,#eee);</span><br><span class="line">    border: 1px solid #d5d5d5;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    color: #333;</span><br><span class="line">    -webkit-transition: opacity .3s ease-in-out;</span><br><span class="line">    -o-transition: opacity .3s ease-in-out;</span><br><span class="line">    transition: opacity .3s ease-in-out;</span><br><span class="line">    padding: 2px 6px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 5px;</span><br><span class="line">    top: 5px;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.btn-copy span &#123;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight:hover .btn-copy&#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>.\themes\next\source\css\_custom\custom.styl</code>样式文件中添加下面代码：</p></li><li><p>在<code>.\themes\next\layout\_layout.swig</code>文件中，添加引用要在<code>&lt;body&gt;&lt;/body&gt;</code>标签内：</p></li></ul><h4 id="high一下"><a href="#high一下" class="headerlink" title="high一下"></a>high一下</h4><ul><li>打开 <code>blog\themes\next\layout\_partials\header.swig</code> ，在<code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;menu-item&quot;&gt; &lt;a title=“把这个链接拖到你的工具栏中,任何网页都可以High” href=’javascript:(</span><br><span class="line"></span><br><span class="line">function go() &#123;</span><br><span class="line"></span><br><span class="line">var songs = [</span><br><span class="line">       “http://www.170mv.com/kw/other.web.ri01.sycdn.kuwo.cn/resource/n3/43/85/4088203395.mp3”,</span><br><span class="line">       “http://www.170mv.com/kw/other.web.rm01.sycdn.kuwo.cn/resource/n3/10/77/3147640053.mp3”,</span><br><span class="line">       “http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3”,</span><br><span class="line">       “”</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function c() &#123;</span><br><span class="line">var e = document.createElement(“link”);</span><br><span class="line">e.setAttribute(“type”, “text/css”);</span><br><span class="line">e.setAttribute(“rel”, “stylesheet”);</span><br><span class="line">e.setAttribute(“href”, f);</span><br><span class="line">e.setAttribute(“class”, l);</span><br><span class="line">document.body.appendChild(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function h() &#123;</span><br><span class="line">var e = document.getElementsByClassName(l);</span><br><span class="line">for (var t = 0; t &lt; e.length; t++) &#123;</span><br><span class="line"> document.body.removeChild(e[t])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function p() &#123;</span><br><span class="line">var e = document.createElement(“div”);</span><br><span class="line">e.setAttribute(“class”, a);</span><br><span class="line">document.body.appendChild(e);</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line"> document.body.removeChild(e)</span><br><span class="line">&#125;, 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function d(e) &#123;</span><br><span class="line">return &#123;</span><br><span class="line"> height : e.offsetHeight,</span><br><span class="line"> width : e.offsetWidth</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function v(i) &#123;</span><br><span class="line">var s = d(i);</span><br><span class="line">return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function m(e) &#123;</span><br><span class="line">var t = e;</span><br><span class="line">var n = 0;</span><br><span class="line">while (!!t) &#123;</span><br><span class="line"> n += t.offsetTop;</span><br><span class="line"> t = t.offsetParent</span><br><span class="line">&#125;</span><br><span class="line">return n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function g() &#123;</span><br><span class="line">var e = document.documentElement;</span><br><span class="line">if (!!window.innerWidth) &#123;</span><br><span class="line"> return window.innerHeight</span><br><span class="line">&#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span><br><span class="line"> return e.clientHeight</span><br><span class="line">&#125;</span><br><span class="line">return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function y() &#123;</span><br><span class="line">if (window.pageYOffset) &#123;</span><br><span class="line"> return window.pageYOffset</span><br><span class="line">&#125;</span><br><span class="line">return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function E(e) &#123;</span><br><span class="line">var t = m(e);</span><br><span class="line">return t &gt;= w &amp;&amp; t &lt;= b + w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function S() &#123;</span><br><span class="line">var e = document.getElementById(“audio_element_id”);</span><br><span class="line">if(e != null)&#123;</span><br><span class="line"> var index = parseInt(e.getAttribute(“curSongIndex”));</span><br><span class="line"> if(index &gt; songs.length - 2) &#123;</span><br><span class="line">     index = 0;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">     index++;</span><br><span class="line"> &#125;</span><br><span class="line"> e.setAttribute(“curSongIndex”, index);</span><br><span class="line"> N();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.src = i;</span><br><span class="line">e.play()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function x(e) &#123;</span><br><span class="line">e.className += “ “ + s + “ “ + o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function T(e) &#123;</span><br><span class="line">e.className += “ “ + s + “ “ + u[Math.floor(Math.random() * u.length)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function N() &#123;</span><br><span class="line">var e = document.getElementsByClassName(s);</span><br><span class="line">var t = new RegExp(“\\b” + s + “\\b”);</span><br><span class="line">for (var n = 0; n &lt; e.length; ) &#123;</span><br><span class="line"> e[n].className = e[n].className.replace(t, “”)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function initAudioEle() &#123;</span><br><span class="line">var e = document.getElementById(“audio_element_id”);</span><br><span class="line">if(e === null)&#123;</span><br><span class="line"> e = document.createElement(“audio”);</span><br><span class="line"> e.setAttribute(“class”, l);</span><br><span class="line"> e.setAttribute(“curSongIndex”, 0);</span><br><span class="line"> e.id = “audio_element_id”;</span><br><span class="line"> e.loop = false;</span><br><span class="line"> e.bgcolor = 0;</span><br><span class="line"> e.addEventListener(“canplay”, function() &#123;</span><br><span class="line"> setTimeout(function() &#123;</span><br><span class="line">     x(k)</span><br><span class="line"> &#125;, 500);</span><br><span class="line"> setTimeout(function() &#123;</span><br><span class="line">     N();</span><br><span class="line">     p();</span><br><span class="line">     for (var e = 0; e &lt; O.length; e++) &#123;</span><br><span class="line">         T(O[e])</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;, 15500)</span><br><span class="line">&#125;, true);</span><br><span class="line">e.addEventListener(“ended”, function() &#123;</span><br><span class="line"> N();</span><br><span class="line"> h();</span><br><span class="line"> go();</span><br><span class="line">&#125;, true);</span><br><span class="line">e.innerHTML = “ &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;”;</span><br><span class="line">document.body.appendChild(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initAudioEle();</span><br><span class="line">var e = 30;</span><br><span class="line">var t = 30;</span><br><span class="line">var n = 350;</span><br><span class="line">var r = 350;</span><br><span class="line"></span><br><span class="line">var curSongIndex = parseInt(document.getElementById(“audio_element_id”).getAttribute(“curSongIndex”));</span><br><span class="line">var i = songs[curSongIndex];</span><br><span class="line"></span><br><span class="line">var s = “mw-harlem_shake_me”;</span><br><span class="line">var o = “im_first”;</span><br><span class="line">var u = [“im_drunk”, “im_baked”, “im_trippin”, “im_blown”];</span><br><span class="line">var a = “mw-strobe_light”;</span><br><span class="line"></span><br><span class="line">/* harlem-shake-style.css，替换成你的位置，也可以直接使用：//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css */</span><br><span class="line">var f = “//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css”;</span><br><span class="line"></span><br><span class="line">var l = “mw_added_css”;</span><br><span class="line">var b = g();</span><br><span class="line">var w = y();</span><br><span class="line">var C = document.getElementsByTagName(“*”);</span><br><span class="line">var k = null;</span><br><span class="line">for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">var A = C[L];</span><br><span class="line">if (v(A)) &#123;</span><br><span class="line"> if (E(A)) &#123;</span><br><span class="line">     k = A;</span><br><span class="line">     break</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (A === null) &#123;</span><br><span class="line">console.warn(“Could not find a node of the right size. Please try a different page.”);</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">c();</span><br><span class="line">S();</span><br><span class="line">var O = [];</span><br><span class="line">for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">var A = C[L];</span><br><span class="line">if (v(A)) &#123;</span><br><span class="line"> O.push(A)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()’&gt;&lt;i class=&quot;menu-item-icon fa fa-music fa-fw&quot;&gt;&lt;/i&gt;High一下&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">&lt;!-- end High一下 --&gt;</span><br></pre></td></tr></table></figure><ul><li><div class="note danger"><p>这段代码貌似有个bug，在播放曲目为空的时候，博客就会尬舞，退出high一下，刷新界面就好</p></div></li></ul><h4 id="跳动的心"><a href="#跳动的心" class="headerlink" title="跳动的心"></a>跳动的心</h4><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  icon: heart</span><br></pre></td></tr></table></figure><ul><li>打开 <code>/blog/themes/next/layout/_partials/footer.swig</code>文件， 将 <code>&lt;span class=&quot;with-love&quot;&gt;</code>换成下面代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;with-love&quot; id=&quot;heart&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>打开<code>/blog/themes/next/source/css/_custom/custom.styl</code>文件，下面代码(颜色可以自定义)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 自定义页脚跳动的心样式</span><br><span class="line">@keyframes heartAnimate &#123;</span><br><span class="line">    0%,100%&#123;transform:scale(1);&#125;</span><br><span class="line">    10%,30%&#123;transform:scale(0.9);&#125;</span><br><span class="line">    20%,40%,60%,80%&#123;transform:scale(1.1);&#125;</span><br><span class="line">    50%,70%&#123;transform:scale(1.1);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#heart &#123;</span><br><span class="line">    animation: heartAnimate 1.33s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">.with-love &#123;</span><br><span class="line">    color: rgb(255, 113, 168);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h4><ul><li>在<code>blog/source/</code>文件夹下新建<code>404.html</code>并加入如下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;https://onlychristmas.github.io/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>&lt;!DOCTYPE HTML&gt;</p><h4 id="调试优化"><a href="#调试优化" class="headerlink" title="调试优化"></a>调试优化</h4><ul><li>在<code>blog/package.json</code>中并列<code>&quot;dependencies&quot;: {}</code>添加如下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>现在我们只需 <code>npm run dev</code> 一条命令就可以启动本地的调试环境</li></ul><h4 id="博客内容压缩"><a href="#博客内容压缩" class="headerlink" title="博客内容压缩"></a>博客内容压缩</h4><ul><li>在<code>blog/package.json</code>中 <code>&quot;dependencies&quot;: {}</code>后面平行的添加如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">“devDependencies”: &#123;</span><br><span class="line">  “gulp-asset-rev”: “^0.0.15”,</span><br><span class="line">  “gulp-clean-css”: “^3.9.0”,</span><br><span class="line">  “gulp-concat”: “^2.6.1”,</span><br><span class="line">  “gulp-debug”: “^3.1.0”,</span><br><span class="line">  “gulp-htmlclean”: “^2.7.15”,</span><br><span class="line">  “gulp-htmlmin”: “^3.0.0”,</span><br><span class="line">  “gulp-if”: “^2.0.2”,</span><br><span class="line">  “gulp-changed”: “^3.1.0”,</span><br><span class="line">  “gulp-make-css-url-version”: “^0.0.13”,</span><br><span class="line">  “gulp-modify-css-urls”: “^0.2.2”,</span><br><span class="line">  “gulp-plumber”: “^1.1.0”,</span><br><span class="line">  “gulp-uglify”: “^3.0.0”,</span><br><span class="line">  “gulp-useref”: “^3.1.2”,</span><br><span class="line">  “gulp-util”: “^3.0.8”,</span><br><span class="line"></span><br><span class="line">  “hexo-deployer-git”: “^0.3.1”,</span><br><span class="line">  “hexo-encrypt”: “^0.5.1”,</span><br><span class="line">  “hexo-generator-json-content”: “^3.0.1”,</span><br><span class="line">  “hexo-generator-search”: “^2.1.1”,</span><br><span class="line">  “hexo-generator-searchdb”: “^1.0.8”,</span><br><span class="line">  “hexo-server”: “^0.2.2”,</span><br><span class="line">  “run-sequence”: “^2.2.0”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后输入以下命令安装依赖包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>在<code>blog/gulpfile.js</code>中添加如下代码（没有的话则新建）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">/*  npm install 超时请使用：(两条命令在当前文件目录下执行)</span><br><span class="line">   npm config set registry https://registry.npm.taobao.org</span><br><span class="line">   npm install</span><br><span class="line">   或者：</span><br><span class="line">   npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">   cnpm install</span><br><span class="line">*/</span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var debug = require(&apos;gulp-debug&apos;);</span><br><span class="line">var cleancss = require(&apos;gulp-clean-css&apos;);   //css压缩组件</span><br><span class="line">var cssversion = require(&apos;gulp-make-css-url-version&apos;);   //css资源添加版本号</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);        //js压缩组件</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);      //html压缩组件</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);  //html清理组件</span><br><span class="line">var assetRev = require(&apos;gulp-asset-rev&apos;);   //版本控制插件</span><br><span class="line">var runSequence = require(&apos;run-sequence&apos;);  //异步执行组件</span><br><span class="line">var changed = require(&apos;gulp-changed&apos;);      //文件更改校验组件</span><br><span class="line">var gulpif = require(&apos;gulp-if&apos;)             //任务 帮助调用组件</span><br><span class="line">var plumber = require(&apos;gulp-plumber&apos;);      //容错组件（发生错误不跳出任务，并报出错误内容）</span><br><span class="line">var isScriptAll = true;     //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><br><span class="line">var isDebug = true;         //是否调试显示 编译通过的文件</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&apos;compressJs&apos;, function () &#123;</span><br><span class="line">    var option = &#123;</span><br><span class="line">        // preserveComments: &apos;all&apos;,//保留所有注释</span><br><span class="line">        mangle: true,           //类型：Boolean 默认：true 是否修改变量名</span><br><span class="line">        compress: true          //类型：Boolean 默认：true 是否完全压缩</span><br><span class="line">    &#125;</span><br><span class="line">    return gulp.src([&apos;./public/**/*.js&apos;,&apos;!./public/**/*.min.js&apos;])  //排除的js</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(&apos;./public&apos;)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &apos;Compress JS:&apos;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(uglify(option))                //调用压缩组件方法uglify(),对合并的文件进行压缩</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));         //输出到目标目录</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&apos;compressCss&apos;, function () &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(&apos;./public&apos;)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &apos;Compress CSS:&apos;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(&#123;rebase: false&#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&apos;compressHtml&apos;, function () &#123;</span><br><span class="line">    var cleanOptions = &#123;</span><br><span class="line">        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g,             //忽略处理</span><br><span class="line">        unprotect: /&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/ig //特殊处理</span><br><span class="line">    &#125;</span><br><span class="line">    var minOption = &#123;</span><br><span class="line">        collapseWhitespace: true,           //压缩HTML</span><br><span class="line">        collapseBooleanAttributes: true,    //省略布尔属性的值  &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeEmptyAttributes: true,        //删除所有空格作属性值    &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeScriptTypeAttributes: true,   //删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class="line">        removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class="line">        removeComments: true,               //清除HTML注释</span><br><span class="line">        minifyJS: true,                     //压缩页面JS</span><br><span class="line">        minifyCSS: true,                    //压缩页面CSS</span><br><span class="line">        minifyURLs: true                    //替换页面URL</span><br><span class="line">    &#125;;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &apos;Compress HTML:&apos;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&apos;default&apos;, function () &#123;</span><br><span class="line">    runSequence.options.ignoreUndefinedTasks = true;</span><br><span class="line">    runSequence(&apos;compressHtml&apos;,&apos;compressCss&apos;,&apos;compressJs&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>然后我们的上传命令就变成了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><div class="note success"><p>其实还可以继续偷懒，没办法，就是懒人才能改变世界……在刚才添加的`"devDependencies": {}`后面平行的添加如下代码</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;submit&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; gulp &amp;&amp; hexo d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>这样之后，上传就变为了一条命令`npm run sumbit`</p></div><h4 id="自动打开脚本"><a href="#自动打开脚本" class="headerlink" title="自动打开脚本"></a>自动打开脚本</h4><ul><li>为了每次新建博文我们可以直接编辑，而不是在一堆文件中找到它再打开。我们需要在博客根目录新建<code>script</code>文件夹（已有就不用新建）</li><li>在新建的文件夹新建一个<code>.js</code>文件，其中填写的代码如下所示。<a href="https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html" target="_blank" rel="noopener">代码来自这里</a><br>  win用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var spawn = require(‘child_process’).exec;</span><br><span class="line"></span><br><span class="line">// Hexo 2.x 用户复制这段</span><br><span class="line">hexo.on(‘new’, function(path)&#123;</span><br><span class="line">  spawn(‘start  “markdown编辑器绝对路径.exe” ’ + path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Hexo 3 用户复制这段</span><br><span class="line">hexo.on(‘new’, function(data)&#123;</span><br><span class="line">  spawn(‘start  “markdown编辑器绝对路径.exe” ’ + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Mac用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var exec = require(‘child_process’).exec;</span><br><span class="line"></span><br><span class="line">// Hexo 2.x 用户复制这段</span><br><span class="line">hexo.on(‘new’, function(path)&#123;</span><br><span class="line">    exec(‘open -a “markdown编辑器绝对路径.app” ’ + path);</span><br><span class="line">&#125;);</span><br><span class="line">// Hexo 3 用户复制这段</span><br><span class="line">hexo.on(‘new’, function(data)&#123;</span><br><span class="line">    exec(‘open -a “markdown编辑器绝对路径.app” ’ + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="仓库备份博客"><a href="#仓库备份博客" class="headerlink" title="仓库备份博客"></a>仓库备份博客</h4><ul><li>依次执行下列命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init  # 初始化仓库</span><br><span class="line">git remote add origin git@github.com # 从仓库复制你的地址 .git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><ul><li>在<code>/blog/</code>目录下新建<code>.gitignore</code>文件（如果没有的话），里面内容如下。主要是为了忽略<code>./public</code>等无需备份的文件，加快备份速度。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><ul><li>本地写完博客上传后，只要依次运行下列命令就可以备份文件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;更新hexo源文件&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li>当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><ul><li>在你的其他电脑，只要<code>git clone git@github.com #你的仓库地址</code>就可以同步博客文件了。</li></ul><!-- - <div class="note danger"><p>有在coding备份代码上传不成功的情况，一种比较懒得解决办法就是将配置好的博客在另一台电脑配置一下，反正我们每次需要同步的文件是以博客为主。</p></div> --><h4 id="自动备份博客脚本"><a href="#自动备份博客脚本" class="headerlink" title="自动备份博客脚本"></a>自动备份博客脚本</h4><ul><li>程序员在变懒这件事情上绝对有着永无止境的追求！我们不仅会担心博客本地源文件的丢失，还会烦恼多台电脑文件同步困难。那么我们怎么解决这样的困境呢？</li><li><code>npm install --save shelljs</code>安装这个模块</li><li>在<code>/blog/scripts/</code>文件夹下新建一个js脚本（任意名字）,如果没有<code>/blog/scripts/</code>目录，请新建一个。脚本内容如下：<span id="inline-black">更改第十七行的内容</span></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">require(‘shelljs/global’);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    hexo.on(‘deployAfter’, function() &#123;//当deploy完成后执行备份</span><br><span class="line">        run();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    console.log(“产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：” + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run() &#123;</span><br><span class="line">    if (!which(‘git’)) &#123;</span><br><span class="line">        echo(‘Sorry, this script requires git’);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo(“======================Auto Backup Begin===========================”);</span><br><span class="line">        cd(‘####你的地址’);    //此处修改为博客根目录路径</span><br><span class="line">        if (exec(‘git add -–all’).code !== 0) &#123;</span><br><span class="line">            echo(‘Error: Git add failed’);</span><br><span class="line">            exit(1);</span><br><span class="line">              &#125;</span><br><span class="line">    if (exec(&apos;git commit -am &quot;Form auto backup script\&apos;s commit&quot;&apos;).code !== 0) &#123;</span><br><span class="line">        echo(&apos;Error: Git commit failed&apos;);</span><br><span class="line">        exit(1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    if (exec(&apos;git push origin master&apos;).code !== 0) &#123;</span><br><span class="line">        echo(&apos;Error: Git push failed&apos;);</span><br><span class="line">        exit(1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    echo(&quot;==================Auto Backup Complete============================&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success"><p> 这样在每次`hexo d`命令之后就能自动备份博客到设置好的代码仓库。成功后会显示如下类似内容 </p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INFO  Deploy done: git</span><br><span class="line">======================Auto Backup Begin===========================</span><br><span class="line">[master cea81b4] Form auto backup script&apos;s commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">To #你的仓库地址</span><br><span class="line">   8f2653b..cea81b4  master -&gt; master</span><br><span class="line">==================Auto Backup Complete============================</span><br></pre></td></tr></table></figure><div class="note danger"><p> 此脚本在blog文件夹没有任何改动的情况下会报错，但不会影响上传。 </p></div><h4 id="博客自定义写作样式"><a href="#博客自定义写作样式" class="headerlink" title="博客自定义写作样式"></a>博客自定义写作样式</h4><ul><li>这里从<a href="https://neveryu.github.io/categories/Hexo/" target="_blank" rel="noopener">neveryu的建站日志</a>引用部分代码，放入到<code>themes/next/source/css/_custom/custom.styl</code>中,即可生效。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line">// 下载样式</span><br><span class="line">a#download &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  color: #000;</span><br><span class="line">  background: transparent;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  transition: all .5s ease;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    background: #000;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//阅读全文样式</span><br><span class="line">.post-more-link .btn &#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  background: transparent;</span><br><span class="line">  transition: all .5s ease;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    background: #000;</span><br><span class="line">    color: #eee;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// 颜色块-黄</span><br><span class="line">span#inline-yellow &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: #f0ad4e;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-黑</span><br><span class="line">span#inline-black &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-绿</span><br><span class="line">span#inline-green &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-蓝</span><br><span class="line">span#inline-blue &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: #2780e3;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-紫</span><br><span class="line">span#inline-purple &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: #9954bb;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-红</span><br><span class="line">span#inline-red &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  padding:.2em .6em .3em;</span><br><span class="line">  font-size:80%;</span><br><span class="line">  font-weight:bold;</span><br><span class="line">  line-height:1;</span><br><span class="line">  color:#fff;</span><br><span class="line">  text-align:center;</span><br><span class="line">  white-space:nowrap;</span><br><span class="line">  vertical-align:baseline;</span><br><span class="line">  border-radius:0;</span><br><span class="line">  background-color: #df3e3e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 左侧边框红色块级</span><br><span class="line">p#div-border-left-red &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-left-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-left-color: #df3e3e;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框黄色块级</span><br><span class="line">p#div-border-left-yellow &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-left-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-left-color: #f0ad4e;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框绿色块级</span><br><span class="line">p#div-border-left-green &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-left-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-left-color: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框蓝色块级</span><br><span class="line">p#div-border-left-blue &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-left-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-left-color: #2780e3;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框紫色块级</span><br><span class="line">p#div-border-left-purple &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-left-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-left-color: #9954bb;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框红色块级</span><br><span class="line">p#div-border-right-red &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-right-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-right-color: #df3e3e;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框黄色块级</span><br><span class="line">p#div-border-right-yellow &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-right-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-right-color: #f0ad4e;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框绿色块级</span><br><span class="line">p#div-border-right-green &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-right-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-right-color: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框蓝色块级</span><br><span class="line">p#div-border-right-blue &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-right-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-right-color: #2780e3;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框紫色块级</span><br><span class="line">p#div-border-right-purple &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-right-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-right-color: #9954bb;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框红色</span><br><span class="line">p#div-border-top-red &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-top-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-top-color: #df3e3e;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框黄色</span><br><span class="line">p#div-border-top-yellow &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-top-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-top-color: #f0ad4e;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框绿色</span><br><span class="line">p#div-border-top-green &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-top-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-top-color: #5cb85c;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框蓝色</span><br><span class="line">p#div-border-top-blue &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-top-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-top-color: #2780e3;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框紫色</span><br><span class="line">p#div-border-top-purple &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-top-width: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  border-top-color: #9954bb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//动画模块</span><br><span class="line">//第一篇博客中-精于心，简于形-的动画（https://neveryu.github.io/page/2/）</span><br><span class="line">span#top-down-samll &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  position:relative;</span><br><span class="line">  border-top:1px solid #222;</span><br><span class="line">  border-bottom:1px solid #222;</span><br><span class="line">  font-size:110%;</span><br><span class="line">  cursor:pointer;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    color: #fff;</span><br><span class="line">    animation: animate-yu-1 3s ease-in;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes animate-yu-1 &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    left:-10px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  10% &#123;</span><br><span class="line">    left:10px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    left:-8px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  30% &#123;</span><br><span class="line">    left:8px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    left:-5px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    left:5px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    left:-3px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  70% &#123;</span><br><span class="line">    left:3px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    left:-1px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  90% &#123;</span><br><span class="line">    left:1px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    left:0px;</span><br><span class="line">    top:0px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//留言页面-[最近访客]-的样式</span><br><span class="line">span#top-down &#123;</span><br><span class="line">  display:inline;</span><br><span class="line">  position:relative;</span><br><span class="line">  border-top:1px solid #222;</span><br><span class="line">  border-bottom:1px solid #222;</span><br><span class="line">  font-size:130%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="写作辅助"><a href="#写作辅助" class="headerlink" title="写作辅助"></a>写作辅助</h3><hr><h4 id="新建文件类型"><a href="#新建文件类型" class="headerlink" title="新建文件类型"></a>新建文件类型</h4><ul><li><code>hexo new post &quot;title&quot;</code> 用来创建新文章</li><li><code>hexo new page &quot;title&quot;</code> 用来创建新菜单页面</li><li><code>hexo new draft &quot;title&quot;</code> 用来创建新草稿</li><li><code>hexo new &quot;title&quot;</code> 用来创建新文章(默认)</li></ul><h4 id="关于目录"><a href="#关于目录" class="headerlink" title="关于目录"></a>关于目录</h4><ul><li>目录的层级靠<code>###</code>和<code>####</code>来维护，相差几个#就是相差几级的目录。</li><li>目录的最高层级为<code>##</code></li></ul><h4 id="主题自带样式-note-标签"><a href="#主题自带样式-note-标签" class="headerlink" title="主题自带样式 note 标签"></a>主题自带样式 note 标签</h4><div class="note info"><p>首先要在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line"></span><br><span class="line">note:</span><br><span class="line"></span><br><span class="line"># Note tag style values:</span><br><span class="line"></span><br><span class="line"># - simple    bs-callout old alert style. Default.</span><br><span class="line"></span><br><span class="line"># - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line"></span><br><span class="line"># - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line"></span><br><span class="line"># - disabled  disable all CSS styles import of note tag.</span><br><span class="line"></span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line"></span><br><span class="line"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line"></span><br><span class="line"># Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line"></span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><div class="note danger no-icon"></div><p>default灰色样式调用方式 <code>&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;</code><br>primary紫色样式调用方式 <code>&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;</code><br>success绿色样式调用方式 <code>&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;</code><br>info蓝色样式调用方式 <code>&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;</code><br>warning橙色样式调用方式 <code>&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;</code><br>danger红色样式调用方式 <code>&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;</code><br>danger no-icon红色无图标样式调用方式 <code>&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;</code></p><div class="note default"><p> just try </p></div><div class="note primary"><p> just try </p></div><div class="note success"><p> just try </p></div><div class="note info"><p> just try </p></div><div class="note warning"><p> just try </p></div><div class="note danger"><p> just try </p></div><div class="note danger no-icon"><p>  just try  </p></div><h4 id="自定义数字块"><a href="#自定义数字块" class="headerlink" title="自定义数字块"></a>自定义数字块</h4><ul><li><code>~/themes/next/source/css/_custom/custom.styl</code>中添加下列代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 自定义的数字块</span><br><span class="line">    span#inline-toc &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    border-radius: 80% 100% 90% 20%;</span><br><span class="line">    background-color: rgb(227, 242, 253);</span><br><span class="line">    color: #555;</span><br><span class="line">    padding: 0.05em 0.4em;</span><br><span class="line">    margin: 2px 5px 2px 0px;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这是调用方式<code>&lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt;</code>和样式展示 <span id="inline-toc">1.</span></li></ul><h4 id="自定义颜色块"><a href="#自定义颜色块" class="headerlink" title="自定义颜色块"></a>自定义颜色块</h4><p>自定义的<strong>颜色块</strong>标签，这么用: <span id="inline-yellow">yellow</span><span id="inline-black">black</span><span id="inline-green">green</span><span id="inline-blue">blue</span><span id="inline-red">red</span><span id="inline-purple">purple</span></p><p><span id="inline-purple">颜色块标签内容</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&apos;div-border-right-red&apos;&gt; 块级框该这么用（自定义的比Next主题内置的优化要更加清晰好用）:&lt;/p&gt;</span><br><span class="line">&lt;p id=&apos;div-border-top-red&apos;&gt; 上侧块级框总共5个类型 &lt;/p&gt;</span><br><span class="line">&lt;p id=&apos;div-border-left-red&apos;&gt; 类似的，侧边块级框比颜色块少一个黑色，分左右两种，总共十个类型 &lt;/p&gt;</span><br></pre></td></tr></table></figure><p id="div-border-left-red">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;top-down&quot;&gt;文字的上下加横线&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><span id="top-down">文字的上下加横线</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;top-down-samll&quot;&gt;鼠标放这里有惊喜&lt;/span&gt;</span><br></pre></td></tr></table></figure><p><span id="top-down-samll">小一号文字，上下加横线</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#### 文本居中</span><br><span class="line">&#123;% cq %&#125;</span><br><span class="line">人生乃是一面镜子，</span><br><span class="line">从镜子里认识自己，</span><br><span class="line">我要称之为头等大事，</span><br><span class="line">也只是我们追求的目的！</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><h4 id="添加视频"><a href="#添加视频" class="headerlink" title="添加视频"></a>添加视频</h4><p>采用如下代码，即可在博文中添加视频。更多的iframe标签参数设定<a href="http://www.w3school.com.cn/tags/tag_iframe.asp" target="_blank" rel="noopener">在此处查询</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;100%&quot; height=&quot;540&quot; align=&quot;middle&quot; src=&quot;https://jalammar.github.io/images/seq2seq_6.mp4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><iframe width="100%" height="540" align="middle" src="https://jalammar.github.io/images/seq2seq_6.mp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></li><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Hexo的Hnext主题个性化教程(33个小优化)</a></li><li><a href="https://neveryu.github.io/categories/Hexo/" target="_blank" rel="noopener">neveryu的建站日志</a></li><li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">thief的建站日志</a></li><li><a href="http://dinghongkai.com/2017/12/19/Blog-development-6-Customized-Style-of-Writing/" target="_blank" rel="noopener">很好的写作辅助</a></li></ul>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github-pages </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> Web-design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【NLP competition】中文信息学会 文本溯源技术评测（SMP ETST）Ranking First</title>
      <link href="/2018/07/09/%E3%80%90NLP%E6%AF%94%E8%B5%9B%E3%80%91%E4%B8%AD%E5%9B%BD%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%AD%A6%E4%BC%9A%E6%96%87%E6%9C%AC%E6%BA%AF%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B%EF%BC%88SMP-ETST%EF%BC%89Ranking-First/"/>
      <url>/2018/07/09/%E3%80%90NLP%E6%AF%94%E8%B5%9B%E3%80%91%E4%B8%AD%E5%9B%BD%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%AD%A6%E4%BC%9A%E6%96%87%E6%9C%AC%E6%BA%AF%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B%EF%BC%88SMP-ETST%EF%BC%89Ranking-First/</url>
      <content type="html"><![CDATA[<p>此次的文本溯源项目我们以n-gram为核心思想，构建候选句子对的评测标准。<br>用TF-IDF和词袋模型的的思想来预筛选候选句子对，大大提升算法效率。<br>最后用了两种切词方式的模型融合和规则后处理（提升很小）。<br><a href="https://biendata.com/competition/smpetst2018/final-leaderboard/" target="_blank" rel="noopener">Final-Leaderboard Ranking First</a></p><a id="more"></a><hr><p><strong><em>2018.07.24更新</em></strong><br>经过组委会测试算法的高效性和原创性，我们最终获得了SMP-ETSE测评的第一名。<br><a href="http://smp2018.cips-smp.org/rewards.html" target="_blank" rel="noopener">最终获奖名单</a><br><a href="http://smp2018.cips-smp.org/smpcup.html" target="_blank" rel="noopener">评测任务介绍</a><br><a href="https://github.com/OnlyChristmas/SMP-ETST-2018" target="_blank" rel="noopener">测评代码开源</a></p><hr><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>以前没有参加过NLP类型的比赛和测评，每天看论文想idea的日子有些许的枯燥和单调。<br>就和一个同学趁着期末考试复习期间（实力作死）的空闲时间，抽出时间玩了玩这个比赛。<br><a href="http://smp2018.cips-smp.org/smpcup.html" target="_blank" rel="noopener">SMP 2018 测评地址</a></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>本次的文本溯源题目和同期的另外两个比赛其实很相似。<br><a href="https://dc.cloud.alipay.com/index#/topic/intro?id=3" target="_blank" rel="noopener">蚂蚁金服计算句子相似度</a><br><a href="https://ai.ppdai.com/mirror/goToMirrorDetail?mirrorId=1&amp;tabindex=1" target="_blank" rel="noopener">拍拍贷识别相似的问题句子</a><br>但文本溯源又和另外两个题有着本质的不同，因为主办方放出的数据并没有任何标签。很明显，我们需要一个无监督的算法来找到<strong>句子之间的潜在语义关系</strong>，红的发紫的深度学习在此没有用武之地。<br>恐怕这也是为什么这个测评的参加人数如此之少的主要原因吧。</p><ul><li>验证集<ul><li>待溯源句子1000</li><li>候选句子约10W</li></ul></li><li>测试集<ul><li>待溯源句子4000</li><li>候选句子约500W</li></ul></li></ul><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>根据我们之前的一些经验，探讨两个句子之前的相似性的时候，n-gram就是一个简单，并且行之有效的方法。这也是我们最早的想法。</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>另一个想法，传统的NLP parsing技术在理论上会比简单的n-gram 方法更好的分析句子结构，从而帮助计算机理解句子语义，找到对应的句子。<br>但是，整个代码构建工程量大，实现难度较高。</p><p>我们的当然要从简单的第一种思路入手尝试。（也是我们最后采用的方案）</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>按照思路一构建一个简单的baseline，在没有调参和仔细预处理之前，在验证集上取得了<em>0.8737</em> 的成绩，这也给了我们继续这一方法的信心。</p><p>随后我们反过头来仔细进行预处理。</p><ul><li>处理影响分词效果的杂乱字符<ul><li>直接删除</li><li>将他们替换为空格</li></ul></li><li>对于数据进行全半角格式转换（计算机并不认为相同字符的全半角格式是一样的字符）</li></ul><p>符号预处理之后，在验证集获得了<em>0.9008</em>的表现 ，<br>然后又轻微调参（根据不等式，我们知道，P、R相等的时候，F值表现会是最好的），验证集表现上涨到了<em>0.9087</em>。</p><h3 id="切词"><a href="#切词" class="headerlink" title="切词"></a>切词</h3><p>在预处理方面，切词是最令人头疼的第一个地方。<br>我们有了很多开源的切词工具，最终选了用了<a href="http://thulac.thunlp.org/" target="_blank" rel="noopener">thulac</a>和<a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">jieba</a>两种。</p><p>我们发现这两种切词方法的本身都有一定的局限性，但是又有一定的互补性。<br>虽然用两种切词工具在时间上会对花费很多，但是为了更好的算法效果，我们采用两种切词方式（后来想想好像有点亏，这样的处理大约只能带来一个点的提升，但花费了大量的时间）。</p><p>python 代码运行效率的低效众所周知，对于测试集500W句子的数据量来说，可谓是十分头疼。</p><p>解决方式也很简单，直接调用两种切词方法的c++接口就好了。就可以体验飞一般的速度。</p><p>值得注意的是，<a href="http://thulac.thunlp.org/" target="_blank" rel="noopener">thulac</a> 的切词包在大数据量的情况下，会有崩溃的情况，原因未知。我们的处理方式是将500W数据切分成了四份，调用四次thulac的c++接口（多了三次的model载入时间），切词后再将所有数据合并起来。</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>n-gram 方法固然简单高效，但也很容易想到一个缺陷。我们不应该对于所有的gram“一视同仁”！</p><p>所以我们建立了TF-IDF，根据每个词语在文档中的几个句子中出现，设立TF。<br>并且设立反向的IDF，为了不同频次的词语反向加权。</p><p>这使我们的验证集F值表现达到了<em>0.9356</em>。</p><h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>对于深度学习，大家都知道。当我们的loss和最后的评价指标越相近的时候，模型的训练效果也往往是更好的。</p><p>一个简单的n-gram 通常是仅仅考虑精确率，我们为什么不进一步的考虑召回率呢？甚至直接对于F值进行优化？<br><a href="http://www.aclweb.org/anthology/W14-3348" target="_blank" rel="noopener">这里有一篇ACL2014的文章作为参考</a></p><p>这样的优化操作之后，我们的验证集表现达到了<em>0.9430</em></p><h3 id="倒排索引（词袋模型）"><a href="#倒排索引（词袋模型）" class="headerlink" title="倒排索引（词袋模型）"></a>倒排索引（词袋模型）</h3><p>以上主要是在算法精度上的优化，并且没有可以的优化算法效率。导致我们在每一次对齐的时候都要对10W数据做遍历比较……</p><p>为了使算法快点出结果，我们用了多进程的方法，但这显然不是长久之计。</p><p>经过观察发现。10W句子中的绝大多数句子，算法评价两个句子的相关性，都极低，对于我们的溯源任务造不成任何干扰，那么如何去掉他们呢？</p><p>不难想到，我们的算法基于n-gram，而对齐表现差的句子显然和目标句子重合的n-gram非常少。那么，我们为什么不讲这样的句子直接过滤掉呢？可以减少句子对的评价次数几百倍，大大提升算法运行效率！</p><p>具体的，我们首先用one gram对句子进行过滤（候选句子中连一个词语都没有出现在目标句子中，全部去掉不考虑）；进一步的，还可以对 two gram 设定一定的阈值。让我们在算法精度和运行速度上进行权衡。</p><p>最终，我们算法经过此处理后。在10W验证集上的表现，从单进程<em>500min</em>缩短为了<em>40s</em> 以下，还没有损失精度！</p><h3 id="模型融合-amp-后处理"><a href="#模型融合-amp-后处理" class="headerlink" title="模型融合 &amp; 后处理"></a>模型融合 &amp; 后处理</h3><p>以上提到了两种切词方式，以及两种预处理方式。为了取得更好的算法效果。我们从它们排列组合后的四种方法中挑取了两个互补性较强的model进行模型融合。<br>验证集达到了<em>0.9549</em>的数值水准。</p><p>然后我们肉眼观察一些阈值附近的“疑似”对齐错误的句子。建立几个规则性的后处理操作。<br>验证集达到了<em>0.96036</em>的数值水准。</p><h3 id="最终测试集结果"><a href="#最终测试集结果" class="headerlink" title="最终测试集结果"></a>最终测试集结果</h3><ol><li><p>硬件环境</p><ul><li>Intel(R) Xeon(R) CPU E5-2697 v4 @ 2.30GHz</li><li>内存 188 GB</li><li>Linux version 3.10.0-514.el7.x86_64 ，</li><li>gcc version 4.8.5 20150623 (Red Hat 4.8.5-11)</li><li>Python 3.4.5 ，numpy</li></ul></li><li><p>运行时间参考</p><ul><li>预处理时间共 1267秒 （21.1分钟)<ul><li>符号处理 &amp; 编码格式转换：218秒</li><li>THULAC分词（c++版本）：272秒</li><li>jieba分词（c++版本）：112秒</li><li>计算TF-IDF 164秒</li><li>建立倒排索引表 501秒</li></ul></li><li>核心算法：115秒 (1.9分钟）</li></ul></li><li><p>最后数值表现</p><ul><li>F1-Measure ： 0.801258108905052</li><li>Precision： 0.7133356667833392</li><li>Recall ： 0.9139013452914798</li><li>Ranking： <strong>First</strong></li></ul></li></ol><hr><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>虽然时间紧迫，经验不足。在比赛中和队友都有一些失误，但最终侥幸排名第一。</p><ul><li><p>做的不够好的地方：</p><ul><li>预处理不够精细</li><li>切词处理没有去增加一个字典</li><li>懒得去寻找同义词源，或者训练一个词语级别的翻译模型。理论上可以进一步提高算法表现。</li><li>由于留给测试集出结果的时间只有24h，事先准备的代码不够充分。</li><li>在测试集阈值设定的时候陷入了思维误区，算法最终的F值结果损失精度百分之三以上。</li></ul></li><li><p>做得比较好的地方：</p><ul><li>基本的n-gram 思路简单而高效。</li><li>TF-IDF使算法的评价方式更加合理。</li><li>倒排索引是使算法高效，简洁。</li><li>艰苦卓绝的后处理和肉眼调参……</li></ul></li></ul><p>最后：感谢队友这些天的付出，也感谢努力的自己。</p>]]></content>
      
      <categories>
          
          <category> NLP </category>
          
          <category> Competition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Paraphrase </tag>
            
            <tag> N-gram </tag>
            
            <tag> Segment </tag>
            
            <tag> Information-retrieval </tag>
            
            <tag> BoW </tag>
            
            <tag> Inverted-index </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
