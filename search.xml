<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>配置便捷的开发环境（PyCharm &amp; Jupyter）</title>
      <link href="/2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/"/>
      <url>/2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/</url>
      <content type="html"><![CDATA[<p>由于在PyCharm中进行统计整理数据、画图等操作有诸多的不便。在本地的jupyter notebook进行处理又显得步骤繁琐（传输文件），故萌生在服务器搭建jupyter notebook的想法。两种工具优势互补，从而最大程度上集中注意力在项目本身，提升开发效率。</p><a id="more"></a><hr><p>“工欲善其事，必先利其器”，接下来看看如何用PyCharm和Jupyter配置最便捷的python开发环境。</p><h2 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h2><p><img src="https://i.loli.net/2018/09/17/5b9f9730d9ad0.png" alt="pycharm_start.png"></p><p>一打开软件界面，满满的科幻感迎面扑来。用色块构建的魔幻画面好似一张变形金刚的面庞。最新的版本加入了默认的Vim编辑模式，让强大的PyCharm更如猛虎添翼一般。</p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>打开设置界面的快捷键是<code>Ctrl+Alt+S</code>。</p><ul><li><p>背景色：软件默认的背景是白色的，这显然不符合我们广大程序员的审美。<code>File -&gt; Appearance &amp;Behaior -&gt; Appearance</code> 中可以修改， <span id="inline-black"> Darcula </span>  是常用的黑色主题。</p></li><li><p>字体：不出意外的话，你会认为它的字体有些小。<code>File -&gt; Editor -&gt; Font</code> 中可以放大，console中的代码和编辑区的代码设置方式类似。</p></li><li><p>主题：如果对默认主题的配色不满意，可以在 <code>File -&gt; Editor -&gt; Color Scheme</code> 中修改。</p></li><li><p>代码风格：在 <code>File -&gt; Editor -&gt; Code Style</code>  中，可以对不同类型的代码文件可以分别进行个性化设置。</p></li></ul><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><p>懒人改变世界，而程序员往往都很懒。。。能让计算机手工完成的内容绝对不会自己动手重复添加。</p><p>不难发现，在程序开发过程中，有一些代码基本没有变化，而且我们会经常性的重复使用。那么，这种傻傻很麻烦的事情最适合计算机来自动完成了。显然，开发PyCharm的程序员小哥想到了这一用户痛点。</p><p>在 <code>File -&gt; Editor -&gt; File and Code Templates</code>  中，我们可以将常用的文件类型中的一些常用代码写入该类型文件的默认模板中，例如。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure><p>除此之外，还可以在文件开头添加一些注释信息。如下所示：</p><p><img src="https://i.loli.net/2018/09/17/5b9fa0f68a77c.png" alt="pycharm_templates.png"></p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>一个好的开发环境不可能没有版本控制系统。</p><p>PyCharm内置了CVS、Git、Mercurial、Subversion等多种版本控制工具，我们只需要简单的配置即可使用。</p><p>从github上Clone 代码，上传保存，进行版本控制，多人协同开发，统统可以在软件内轻松地完成。</p><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>这是一个超级良心的免费功能，我相信即使这个功能收费，也会有很多程序员小哥继续使用PyCharm。在其他的地方写代码，我们都需要在本地调试好，再上传服务器。出问题后，再次修改，再次上传，非常浪费时间。那么如何简化本地代码和服务器代码之间的沟通工作呢？PyCharm也帮我们内置好了。</p><p>在<code>Tools -&gt; Deployment -&gt; Configurtion</code>中可以配置好多台服务器，如果服务器中的python环境配置良好，我们就不需要再单独在本地配置一遍。配置如下所示：</p><p><img src="https://i.loli.net/2018/09/17/5b9fafe16ee1a.png" alt="pycharm_connection.png"></p><p>在对应的位置填写好服务器的位置，自己的用户名和密码，以及想要打开的根目录（节省重复打开文件夹的时间）。</p><p>第二个选项卡Mappings中配置本地项目和服务器项目对应的映射关系。这里有个需要注意的地方，建议只将代码和训练语料分开存储，不要使训练语料成为映射项目的一部分，加快加载速度。在第一次配置好开发环境的时候，需要将服务器的一些文件下载到本地，需要稍等几分钟，以后就很幸福了！</p><p>在<code>Tools -&gt; Deployment -&gt; Configurtion</code>中选择本地文件的上传方式，我这里将<code>Ctrl+S</code>设置为本地保存并上传服务器。</p><h2 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter-notebook"></a>Jupyter-notebook</h2><p>对于jupyter notebook来说，它的缺点还是十分明显的。没有一个很好的框架，不能清晰的构建大型项目。也不曾拥有IDE<code>Ctrl+点击函数名</code>就可以跳转的方便功能，导致阅读代码吃力。</p><p>但同样的，它的对于PyCharm的优点也是无可替代的。</p><ul><li>PyCharm简直是一个科学计算的神奇，在做数据挖掘的时候，代码和报告（支持latex公式）高度融合，无需二次撰写。</li><li>在处理数据的时候，所有中间结果不会被擦除，都显示在对应的cell下面。方便调试，减轻记忆的工作量。</li><li>方便的<strong>图表展示</strong>，不像PyCharm那样，会新弹出一个窗口展示图片，图文融合在一起。</li><li>丰富的插件支持，高度自定义。</li><li>等等……</li></ul><p>虽然优点众多，但如果只能在本地运行也只能算是鸡肋。经常将工程中的部分文件从服务器传输到本地再分析，这是一件很累人的事情。</p><h3 id="服务器jupyter搭建"><a href="#服务器jupyter搭建" class="headerlink" title="服务器jupyter搭建"></a>服务器jupyter搭建</h3><ul><li><p>首先保证我们的linux服务器的python(Anaconda)环境已经配置好了。</p></li><li><p>打开Ipython,输入如下两行代码后，会生成一个字符串，例如”sha1:9305015210b4:32cad364c85e7f7a13b9efa137cfadf633cc62d“。请复制出来暂时保存，稍后会使用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure><ul><li>如果<code>~/.jupyter</code>路径下没有 <span id="inline-blue">  jupyter_notebook_config.py </span> ，则输入如下命令新建它。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><ul><li>新产生的文件中的所有内容都以注释的形式存在，直接在文件末尾加入如下几行代码，并根据自己的环境调整路径。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip = &apos;*&apos;  # 允许访问此服务器的 IP，星号表示任意 IP</span><br><span class="line">c.NotebookApp.password = u&apos;sha1:xxx:xxx&apos; # 之前生成的密码 hash 字串</span><br><span class="line">c.NotebookApp.open_browser = False # 运行时不打开本机浏览器</span><br><span class="line">c.NotebookApp.port = 12035 # 使用的端口</span><br><span class="line">c.NotebookApp.enable_mathjax = True # 启用 MathJax</span><br></pre></td></tr></table></figure><ul><li>由于大家公用的服务器，我并没有管理员权限，不能将jupyter notebook添加为系统级别的服务。我们只需执行如下命令就可以方便的在本地调用jupyter notebook了(服务器不会经常重启)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &gt; notebook.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><div class="note success"><p> 调用方式：在本地浏览器中输入`服务器地址:设置的端口号`即可。例如：165.32.65.109:7060 </p></div><h3 id="Jupyter-优化"><a href="#Jupyter-优化" class="headerlink" title="Jupyter 优化"></a>Jupyter 优化</h3><ul><li><p>更换主题</p><ul><li>对于程序员来说，Jupyter默认的白色背景不是很友好，为了和黑色的Pycharm更加搭配，可以先执行如下命令安装其他主题 <code>pip install jupyterthemes --user</code></li><li>安装好之后的操作很简单，如下例所示。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># list available themes</span><br><span class="line"># onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd</span><br><span class="line"># 列出所有可用的主题</span><br><span class="line">jt -l</span><br><span class="line"></span><br><span class="line"># select theme...</span><br><span class="line"># jt -t 主题名</span><br><span class="line">jt -t chesterish</span><br><span class="line"></span><br><span class="line"># restore default theme</span><br><span class="line"># NOTE: Need to delete browser cache after running jt -r</span><br><span class="line"># If this doesn&apos;t work, try starting a new notebook session.</span><br><span class="line"># 恢复默认主题</span><br><span class="line">jt -r</span><br></pre></td></tr></table></figure></li><li><p>自动代码补全</p><ul><li><p>虽然Jupyter也可以代码补全，但是总是需要多此一举的按一个Tab键，与PyCharm风格不搭配。</p></li><li><p>方法一：执行<code>ipython profile create</code> 命令，  <code>vim ~/.ipython/profile_default/ipython_config.py</code>，修改成如下样子。重启jupyter后生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## Activate greedy completion PENDING DEPRECTION. this is now mostly taken care</span><br><span class="line">#  of with Jedi.</span><br><span class="line">#</span><br><span class="line">#  This will enable completion on elements of lists, results of function calls,</span><br><span class="line">#  etc., but can be unsafe because the code is actually evaluated on TAB.</span><br><span class="line">c.Completer.greedy = True</span><br><span class="line"></span><br><span class="line">## Experimental: restrict time (in milliseconds) during which Jedi can compute</span><br><span class="line">#  types. Set to 0 to stop computing types. Non-zero value lower than 100ms may</span><br><span class="line">#  hurt performance by preventing jedi to build its cache.</span><br><span class="line">c.Completer.jedi_compute_type_timeout = 400</span><br><span class="line"></span><br><span class="line">## Experimental: Use Jedi to generate autocompletions. Off by default.</span><br><span class="line">c.Completer.use_jedi = True</span><br></pre></td></tr></table></figure></li><li><p>方法二：安装如下插件，如果报错，还需要更新配置一些包环境：</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions --user</span><br><span class="line">pip install jupyter_nbextensions_configurator --user</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade ipykernel --user</span><br><span class="line">chmod 777 ~/.local/share/jupyter/</span><br><span class="line">pip install --upgrade --user nbconvert</span><br><span class="line">pip install --upgrade jupyter_core jupyter_client --user</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，PyCharm 和 Jupyter 都已经配置完毕。今后PyCharm仍然是主力的代码编辑工具。但在工程构建过程中，免不了许多中间结果需要分析和查看，这个时候Jupyter就可以派上用场。进行轻量的模块化分析任务。另外，Jupyter也可以打开文本文件进行编辑（可以自由选择Vim/Sublime等编辑模式），这样就不用使用WinSCP来单独查看文件；Jupyter也可以打开Terminal，这样我们就不用再单独使用Xshell，Xming等软件。释放本地内存。</p><p>我们只需要开启浏览器和PyCharm就可以方便交互服务器，进行代码的版本控制，以及进行数据分析。接下来可以更加愉快的干活了！</p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyCharm </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Win10平台下的常用软件</title>
      <link href="/2018/09/09/win10-software/"/>
      <url>/2018/09/09/win10-software/</url>
      <content type="html"><![CDATA[<p>由于电脑系统最近崩溃两次，让我有了备份常用软件清单的想法。工欲善其事必先利其器，不断追求效率的提升是一件很幸福的事情。清单不定期更新。</p><a id="more"></a><hr><blockquote class="blockquote-center"><h2 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h2></blockquote><p>由于组里面配备的电脑是金胜维硬盘，前一个月系统崩溃了两次，硬盘报废了。导致我花费了大量的时间重装系统，配置环境。</p><p>在此特地致谢<strong>良心的金胜维公司</strong>锻炼我重装系统的耐心。   🙃╮(╯▽╰)╭🙃</p><p>现在新换了三星的SSD，但还是决定记录一下常用的软件环境配置，为以后可能的迁移系统做准备（虽然也有可能直接入坑Linux了）。</p><blockquote class="blockquote-center"><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2></blockquote><ul><li><p>对于很多组织（学校/公司）来说，都会统一购买正版的win10系统，从相应的资源站点下载正版系统，并获取激活码即可。</p></li><li><p>在<a href="https://ultraiso.en.softonic.com/download" target="_blank" rel="noopener">这里</a>或者<a href="https://www.ultraiso.com/download.html" target="_blank" rel="noopener">这里</a>可以下载Ultraiso,将我们的正版系统制作成U盘安装。</p></li><li><p>台式机启动的时候按<code>Fn+F12</code>选择U盘启动（这里是Dell台式机），然后先格式化掉原有系统，重装正版系统。</p></li><li><p>安装系统后，登陆微软账号就可以将之前的主题配置找回。（前提在快捷键<code>win+i</code>后的<em>更新与安全</em>选项卡中同意配置同步）</p></li><li><p>双屏配置很简单（免去<code>Alt+Tab</code>之苦，还能多看几行代码），但找一个漂亮的壁纸就不简单了。可以在 <a href="https://www.ssyer.com/" target="_blank" rel="noopener">沙沙野</a> 找到很多漂亮的高清原图，然后按照显示器分辨率PS两张图出来就好了。</p><p><img src="https://i.loli.net/2018/09/09/5b94daca1d0e9.jpg" alt="IMG_20180908_211456.jpg"></p></li></ul><blockquote class="blockquote-center"><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2></blockquote><p>工欲善其事必先利其器，记录一下常用的一下软件。</p><h3 id="日常必备"><a href="#日常必备" class="headerlink" title="日常必备"></a>日常必备</h3><h4 id="Shadowsocks-SS"><a href="#Shadowsocks-SS" class="headerlink" title="Shadowsocks(SS)"></a>Shadowsocks(SS)</h4><p>如果学校/公司没有搭梯子，那只能自力更生了，<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">梯子在这里</a>，你只需要一台国外的服务器就好了~</p><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>可高度自定义的浏览器，搭配Google使用口味更佳哦（可以直接同步其他电脑的设置）。介绍一些有用的的插件（啧啧啧~）<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">插件商店</a></p><ul><li>Grammarly： 搭配 overleaf , 用于学术写作。</li><li>Google schoolar： 常用的学术搜索。</li><li>Google translate： 页面划词翻译。</li><li>Markdown here： 写漂亮得电子邮件。</li><li>qiniu upload files：七牛云插件（如果你用markdown写作的话）</li><li>低价保护/惠惠购物助手/购物党：淘宝京东等购物网站的比价插件~</li></ul><h4 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h4><p>有时候一些网站会有个人/公司，两个账号，浏览器记住密码的时候不方便，chrome搭配火狐使用。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>这是一个没有办法不用的东西啊。 <a href="https://git-scm.com/" target="_blank" rel="noopener">下载地址</a></p><h4 id="Bandzip"><a href="#Bandzip" class="headerlink" title="Bandzip"></a>Bandzip</h4><p>口碑较好的一个压缩软件。</p><h4 id="Offices"><a href="#Offices" class="headerlink" title="Offices"></a>Offices</h4><p>这个没什么好说的，必须安装。就算你每天写markdown或者latex，但是别人会给你发word啊，┏┛墓┗┓…(((m -__-)m</p><h4 id="Teamviwer"><a href="#Teamviwer" class="headerlink" title="Teamviwer"></a>Teamviwer</h4><p>非常棒的远程连接软件，QQ什么的远程连接就别提了。。。有了它，在家加班再也不是梦想了！（这追求……）</p><ul><li>注册账号登陆就可以免去忘了记密码，请别人帮忙的尴尬。</li><li>切记，设置电脑永不休眠。要不然还是要麻烦别人了。</li></ul><h4 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h4><p>虽然可以远程服务器调试代码，但本地常备一个python环境调试代码也是必须的。</p><h3 id="不想用，但必须用的聊天软件"><a href="#不想用，但必须用的聊天软件" class="headerlink" title="不想用，但必须用的聊天软件"></a>不想用，但必须用的聊天软件</h3><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><p>还不是因为生活所迫……有本事别装啊   😀&lt;(＿　＿)&gt;😀</p><h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h4><p>还有少量的QQ交流的需要，但是又不想要哪些花里胡哨的没用功能，那就选择TIM吧，它的共享文档还是一个能用的功能。当然，如果没有交流需要，还是不要安装了，共享文档找Google。</p><h3 id="可选软件"><a href="#可选软件" class="headerlink" title="可选软件"></a>可选软件</h3><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><p>虽然现在win10已经内置了护眼功能，但是我还是一直使用这款简洁的软件（直接开机自启就好了）。</p><h4 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h4><p>毕竟2T的存储空间，还是有很多人在使用的。如果嫌弃它上传/下载速度慢又不想充网费，那就DIY吧。<a href="https://github.com/iikira/BaiduPCS-Go" target="_blank" rel="noopener">BaiduPCS-Go</a>（估计百度的程序员小哥哥假装自己没看见吧）。</p><h4 id="Photoshop"><a href="#Photoshop" class="headerlink" title="Photoshop"></a>Photoshop</h4><p>虽然不是专业人士，但是工作中遇到稍微处理一下图片的情景还不少，手边预备一个PS是不错的选择。</p><h4 id="关于英语"><a href="#关于英语" class="headerlink" title="关于英语"></a>关于英语</h4><ul><li>Aboboo：如果你练习英语口语，这是一个不错的选择。</li><li>有道词典：如果你经常查看英文论文/文档，但是英语又不太好。网易有道的划词翻译还是有很大帮助的。</li><li>灵格斯：专业强大的英文词典。</li></ul><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p>任选一种或多种皆可。</p><ul><li>Sublime：常用的文本编辑器，满足轻量级的代码查看需求，也有人将其自定义成轻量IDE，不能连接远程服务器是硬伤。</li><li>Atom：基于github社区的开源编辑器，可谓是含着金钥匙出生。可高度自定义（程序员的最爱），完全可以变成一个IDE……</li><li>Vs code：相比于它兄弟vs studio，这款代码查看软件还是可以考虑的。（不过我没考虑）</li><li>Notepad++：相比于前面三位选手，Notepad++最主要的优势是容量小，启动快，速度快，不占内存，其他功能也不差的。麻雀虽小，balabala~</li></ul><h4 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h4><p>电脑文件多而杂怎么办，windows 自带的搜索功能太慢怎么办？这款软件值得拥有。</p><h4 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h4><ul><li>Adobe reader：广大科研工作者的第一选择（我看很多老师们都用它……）</li><li>SumatraPDF：一个广受好评的PDF阅读器。</li><li>Gaaiho Reader：一个功能齐全的阅读器。</li><li>Pdf element：好用的编辑功能，当初为了它的OCR功能而下载。</li><li>Foxit pdf reader：用过一段时间的轻量、快速的PDF阅读器，但是标注不是很方便。</li><li>Drawbroad：windows 下一个很不错的产品，漂亮也方便标注，但是……还挺贵的，全价67￥，不过有打折甚至免费的时候，看看你能不能遇到了。</li><li>Xodo：漂亮简洁的界面，运行快速，批注方便，而且免费。但是！它暂时不支持撤销操作，不支持中文……</li></ul><h4 id="textstudio"><a href="#textstudio" class="headerlink" title="textstudio"></a>textstudio</h4><p>其实网页版的overleaf写论文已经很方便了。但是，遇到ddl，免费帐户还是有点吃力，可以在电脑上安装一个text studio,以备不时之需。</p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><p>专业的markdown编辑器，优点很多。昧着良心不列举了，虽然我此刻正在使用它记笔记。</p><h4 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h4><p>画思维导图的软件，不想安装，也有网页版的<a href="http://naotu.baidu.com/home" target="_blank" rel="noopener">百度脑图</a>可以替代使用，百度为数不多的良心产品啊。</p><h4 id="Mendeley"><a href="#Mendeley" class="headerlink" title="Mendeley"></a>Mendeley</h4><p>window 平台常见的文献管理软件，虽然做的丑的一点，虽然会把你的文档在电脑里另外复制一份……但还是有一些用户的……</p><h4 id="PE制作"><a href="#PE制作" class="headerlink" title="PE制作"></a>PE制作</h4><p>大白菜/老毛桃这两个软件任选其一即可（这名字谁起的啊……）。</p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li>Pycharm： 配置导入，方便的代码跳转，自定义快捷键设定，还提供免费的远程服务器连接功能，还等什么啊？！真不明白用jupyter的人们是怎么写工程代码的……  <a href="https://www.jetbrains.com/pycharm-edu/download/" target="_blank" rel="noopener">Download</a></li><li>jupyter：存在即合理，虽然jupyter notebook 在工程构建方面略差pycharm一筹，但由于其便捷性的特点，处理数据的时候非常方便，广受数据科学家的喜爱。它与pycharm一起可以构建出最便捷的开发环境。</li><li>Xshell：连接服务器利器，可以改变常用服务器配置文件的存储位置，防止重装系统后再配置一遍……都是泪啊</li><li>Xming：提供远程服务器的图形界面。</li><li>winSCP：可以获取服务器的目录，通过本地的文本编辑器打开服务器上的文件。</li></ul><h4 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h4><ul><li>迅雷极速版：下载速度尚可，重点是没有广告！</li><li>IDM：下载速度很快，但是是收费软件。</li><li>uTorren：同样好用，但只有十五天试用期的下载软件。</li></ul><h4 id="电脑管理"><a href="#电脑管理" class="headerlink" title="电脑管理"></a>电脑管理</h4><p>如果对于电脑很熟悉，可以忽略以下软件。</p><ul><li>玩具大师（鲁大师）：有硬件检测，驱动更新，电脑温度异常等等不太常用的功能，但保不准需要偶尔用一下……</li><li>腾讯管家：可以方便地搜索一些国内的常见软件，管理开机时间等等。当然如果习惯自己配置电脑，也就不需要它了。</li></ul><h4 id="仅剩的娱乐"><a href="#仅剩的娱乐" class="headerlink" title="仅剩的娱乐"></a>仅剩的娱乐</h4><ul><li>网易云音乐：不多说，要不是因为版权问题，它会是一家独大的音乐软件吧~ 当然不安装也有网页版可以使用。</li><li>Potpalyter：一款小巧强大的视频播放器。</li></ul><blockquote class="blockquote-center"><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2></blockquote><p>上面列举了很多的软件，并且以后还会不定期的更新名单。</p><p>但其实，工具只是工具，它们能发挥出多大的生产力，最直接的影响因素还是用户本身。加油吧，皮卡丘~</p>]]></content>
      
      <categories>
          
          <category> Operating-system </category>
          
          <category> Win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flux </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> Pycharm </tag>
            
            <tag> Teamviwer </tag>
            
            <tag> Tpyora </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>双网卡配置：同时使用公司（学校/实验室）内网和外网</title>
      <link href="/2018/09/07/Dual-NIC-configuration/"/>
      <url>/2018/09/07/Dual-NIC-configuration/</url>
      <content type="html"><![CDATA[<p>没有一个好用的网络根本是没有办法好好工作的呀。最近通过改变路由表、调整网卡优先级，实现了内外网络的同时使用，终于可以愉快的上网了。</p><a id="more"></a><hr><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>实验室的内网实在是太慢了……即使是查资料也会有令人不悦的卡顿，更别说下载大规模数据。然而，学校的无线网还是不错的。但是，用学校的无线网怎么用实验室的服务器呢？</p><p>开始折腾。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>首先，自购一块无线网卡。并确认其可以正常工作。</p><p>这个时候，我们其实已经可以通过临时禁用有线网络，来使用无线网络下载数据等等……</p><p>但是，有线网络每次禁用启用都需要若干秒钟的时间，等待的滋味不好受呐。</p><h3 id="改变路由表"><a href="#改变路由表" class="headerlink" title="改变路由表"></a>改变路由表</h3><ul><li>快捷键<code>win+R</code> ，然后键入<code>cmd</code>回车。在cmd中键入命令<code>route print</code> 可以查看自己的当前路由表。</li><li><code>route delete #ip</code> 命令可以删除当前的路由表。在执行<code>route delete 0.0.0.0</code>后可以彻底禁用有线网络。</li><li>接着要添加内网的ip地址，以及无线外网的ip地址。用 <code>route add #ip</code>命令。</li></ul><p>总的来说，我们只需将上述三行代码写入一个.bat脚本中，以管理员权限运行就好了。比频繁的手动操作，等待网卡切换，节省很多时间。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">route delete 0.0.0.0</span><br><span class="line"></span><br><span class="line">route -p add 172.0.0.0 mask 255.0.0.0 172.31.202.1</span><br><span class="line"></span><br><span class="line">route add 0.0.0.0 mask 0.0.0.0 10.1.88.1</span><br></pre></td></tr></table></figure><h3 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h3><p>完成上述部分，貌似大功告成了，内网和外网都可以使用了。但是，此时很多国内的网站速度会非常之慢，慢到没有朋友……</p><p>这个时候就需要设置一下两块网卡的工作优先级。流程非常简单，如下图所示：</p><ul><li>从控制面板打开网络连接设置；</li><li>右键无线网络图标，选’属性‘；</li><li>双击“IPV4”，选取”高级”；</li><li>将自动跃点数改为固定的 <code>10</code>,一路确定保存。</li><li>同理，可以将有线网卡的自动跃点数设置为 <code>20</code>。</li><li>两张网卡的自动跃点数越小表示优先级越高。</li></ul><p>此时，我们就可以在实验室愉快的上网啦！</p><p><img src="https://i.loli.net/2018/09/07/5b9288ed79f38.png" alt="双网卡_1.png"></p>]]></content>
      
      <categories>
          
          <category> Tool </category>
          
          <category> Computer-network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hop-number </tag>
            
            <tag> Routing-table </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法的时间复杂度和空间复杂度</title>
      <link href="/2018/08/17/Summary-of-time-complexity-and-space-complexity/"/>
      <url>/2018/08/17/Summary-of-time-complexity-and-space-complexity/</url>
      <content type="html"><![CDATA[<p>趁假期复习了算法基础的时间复杂度和空间复杂度，整理一遍。</p><a id="more"></a><hr><h2 id="算法的有效性"><a href="#算法的有效性" class="headerlink" title="算法的有效性"></a>算法的有效性</h2><p>要想理解时间复杂度和空间复杂度这两个概念，首先要明白算法的含义。<br>所谓算法，是解决一类问题的通法，即一系列清晰无歧义的计算指令。</p><p>具体的，一个算法应该有以下五个方面的特性：</p><ul><li>输入（Input）：算法必须有输入量，用以刻画算法的初始条件（特殊情况也可以没有输入量，这时算法本身定义了初始状态）；</li><li>输出（Output）：算法应有一个或以上输出量，输出量是算法计算的结果。没有输出的算法毫无意义。</li><li>明确性（Definiteness）：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。</li><li>有限性（Finiteness）：算法必须在有限个步骤内完成任务。</li><li>有效性（Effectiveness）：算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现（又称可行性）。</li></ul><p>根据以上的定义，不难发现。每个算法只能解决具有特定特征的一类问题。然而，每个有固定输入输出的问题可以采取多种算法来决解。<br>那么，要怎么来比较解决同一个问题的不同算法之间的优劣呢？<br>这个时候，时间复杂度和空间复杂度就有了用武之地。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，在很大程度上能很好反映出算法的优劣与否。<br>验证算法的时间复杂度，我们有以下两个方法。</p><h4 id="事后统计"><a href="#事后统计" class="headerlink" title="事后统计"></a>事后统计</h4><p>一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。所以就有了事后统计的方法。<br>计算算法的时间复杂度，往往是为了评测算法的性能，设计更好的算法。这就给事后统计的方法带来了两个弊端。</p><ul><li>需要先实现算法设计，并至少运行一次。</li><li>统计算法时间容易受到计算机硬件、编程语言效率等环境因素影响。</li></ul><h4 id="事前分析"><a href="#事前分析" class="headerlink" title="事前分析"></a>事前分析</h4><p>由于事后统计的方法有上述的弊端，我们通常采取事先估计的方法来评价算法的时间复杂度。<br>为了更好的比较不同算法在处理统一问题上的效率，通常从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的重复执行的次数作为算法的时间量度，记为T(n)。<br>在这里，n为输入问题的规模。对于同一个问题来说，他的输入规模越大，往往时间复杂度也就越大。<br>关于输入问题规模n，有辅助函数f(n),来统计算法基本操作的频度。因此，算法的时间复杂度往往记为$T(n)=O(f(n))$。</p><p>为了简便，我们一般在计算时间复杂度往往选取最简单的f(n)表示。例如：$O(2n^2+n+1) = O (3n^2+n+3) = O(7n^2+n) = O(n_2)$ ，一般都只用$O(n_2)$表示就可以了。<br>也就是说，两个算法的时间频度不一样，但很有可能拥有相同的时间复杂度。<br>例如：$T(n)=n^2+3n+4$ 与 $T(n)=4n^2+2n+1$它们的频度不同，但时间复杂度相同，都为$O(n^2)$。</p><p>常见的算法时间复杂度由小到大依次为：<br><span id="inline-green"> $O(1)&lt;O(log_2(n))&lt;O(n)&lt;O(nlog_2(n))&lt;O(n^2)&lt;O(n^3)&lt;…&lt;O(n!)$ </span><br>下面的图片直观的表示他们之间复杂度关系。</p><p><img src="http://pc1z7pynx.bkt.clouddn.com/markdown-img-paste-20180822161350179.png" alt="常见的算法时间复杂度图示"></p><h5 id="时间复杂度的分类"><a href="#时间复杂度的分类" class="headerlink" title="时间复杂度的分类"></a>时间复杂度的分类</h5><ul><li>最坏时间复杂度：输入数据状态最不理想情况下的时间复杂度，也就是算法时间复杂度的上界。若没有特别声明，时间复杂度就是指最坏时间复杂度。</li><li>平均时间复杂度：在所有可能的输入实例均以等概率出现的情况下，算法的期望时间复杂度。</li><li>最好时间复杂度：输入数据状态最理想情况下的时间复杂度。</li></ul><h5 id="时间复杂度预估步骤"><a href="#时间复杂度预估步骤" class="headerlink" title="时间复杂度预估步骤"></a>时间复杂度预估步骤</h5><ol><li>找出基本语句：算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。</li><li>计算基本语句的执行次数的数量级：只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：<strong>增长率</strong>。</li><li>用O()表示算法的时间性能：将基本语句执行次数的数量级放入O()中。</li></ol><h5 id="时间复杂度分析技巧"><a href="#时间复杂度分析技巧" class="headerlink" title="时间复杂度分析技巧"></a>时间复杂度分析技巧</h5><ul><li>简单语句：程序的输入输出、赋值等语句都近似认为需要$O(1)$时间。</li><li>顺序结构：需要依次执行一系列语句所用的时间可采用O()的”求和法则”，</li><li>选择结构：如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要$O(1)$时间。</li><li>循环结构：循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用O()的”乘法法则”。</li><li>复杂算法：将其分成几个容易估算的部分,然后利用求和法则和乘法法则计算整个算法的时间复杂度。</li><li>其他准则<ul><li>若$g(n)=O(f(n))$,则$O(f(n))+ O(g(n))= O(f(n))$</li><li>$O(Cf(n)) = O(f(n))$ , 其中C是一个正常数。</li></ul></li></ul><blockquote><p><strong>乘法法则</strong>: 是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$和 $T_2(n)=O(g(n))$,则 $T_1 T_2=O(f(n) g(n))$</p><p><strong>求和法则</strong>:是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$ 和 $T_2(n)=O(g(n))$,则 $T_1(n)+T_2(n)=O(max(f(n), g(n)))$<br>特别地,若$T_1(m)=O(f(m))$, $T_2(n)=O(g(n))$,则 $T_1(m)+T_2(n)=O(f(m)+g(n))$</p></blockquote><h5 id="实际演练"><a href="#实际演练" class="headerlink" title="实际演练"></a>实际演练</h5><ul><li>三个简单语句，$T(n)=O(1)$。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Temp=i;</span><br><span class="line">i=j;</span><br><span class="line">j=temp;</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><p> 如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是$O(1)$。</p></div><ul><li>因为 $O(n^2+1)=n^2$ ，忽略低阶项， 所以$T(n)=O(n^2)$；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="number">0</span>；                 （一次）</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">     sum++；            （n^<span class="number">2</span>次）</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p> 一般情况下，循环语句只需考虑循环体中语句的执行次数，忽略该语句中步长加1、终值判别、控制转移等成分，当有若干个循环语句嵌套时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。 </p></div><ul><li><p>语句①的频度是$n-1$,语句②的频度是$(n-1)*(2n+1)=2n^2-n-1$（乘法法则）, 所以$f(n)=2n^2-n-1+(n-1)=2n^2-2$（加法法则）, 最终 $O(2n^2-2)=n^2 $ , 即该程序的时间复杂度$T(n)=O(n^2)$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">     y=y+<span class="number">1</span>;                  ①</span><br><span class="line">     <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=(<span class="number">2</span>*n);j++)</span><br><span class="line">        x++;                 ②</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>语句①的频度：2；语句②的频度一般不考虑；语句③的频度：n-1；语句④的频度：n-1；语句⑤的频度：n-1；$T(n)=2+3(n-1)=3n-1=O(n)$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span>;                        ①</span><br><span class="line">b=<span class="number">1</span>;                        ①</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)          ②</span><br><span class="line">&#123;</span><br><span class="line">   s=a+b;                   ③</span><br><span class="line">   b=a;　　　　　            ④</span><br><span class="line">   a=s;　　　　　            ⑤</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语句①的频度是1；设语句②的频度是f(n), 则：$f(n)&lt;=log_2(n)$。取最大值$f(n)=log_2(n)$,$T(n)=O(log_(n))$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;                        ①</span><br><span class="line"><span class="keyword">while</span> (i&lt;=n)</span><br><span class="line">   i=i*<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>$T(n)=O((n)(n+1)(n-1)/6)=O(n^3)$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;j;k++)</span><br><span class="line">            x=x+<span class="number">2</span>;             ①</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>设计算法的时候，我们还会关注空间复杂度，空间复杂度是算法在运行过程中临时占用的存储空间大小的度量, 同样是关于问题规模n的函数。<br>但根本上，算法的时间运行效率才是最重要的。只要算法占用的存储空间不要达到计算机无法接受的程度即可。所以，常常通过牺牲空间复杂度来换取算法更加高效的运行时间效率。</p><p>算法在计算机存储器上占用的空间包括三个部分。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不会随算法的不同而改变。这不是我们需要考虑的部分。</p><h4 id="算法本身"><a href="#算法本身" class="headerlink" title="算法本身"></a>算法本身</h4><p>存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这部分存储空间，就必须编写出较短的算法。然而，算法想要实际应用需要根据需求采取不同的编程语言来实现，不同编程语言实现的代码长短差别很大，然而存储空间都在可接受范围之内（通常不同编程语言的效率更受关注）。</p><h4 id="运行临时占用"><a href="#运行临时占用" class="headerlink" title="运行临时占用"></a>运行临时占用</h4><p>根据算法在运行过程中临时占用存储空间的不同，可以将算法分为两类。</p><ul><li>原地算法（in-place algorithm）：只需要占用少量的临时工作单元，而且<span id="inline-blue"> 不随问题规模的大小而改变 </span>，我们称这种算法是“就地”进行的，是节省存储的算法, <span id="inline-red"> 空间复杂度为O(1) </span>。</li><li>非原地算法（not-in-place）：需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元。<br>算法临时占用空间是考虑算法空间复杂度时主要考虑的部分。相比于随着问题输入规模扩大而扩大的非原地算法，原地算法是更加简洁高效的算法（仅考虑空间复杂度时）。</li></ul><h5 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h5><p>假设我们想要将拥有n个项目的数组反过来。一个最简单作这件事的方式是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function reverse(a[0..n])</span><br><span class="line">    allocate b[0..n]</span><br><span class="line">    for i from 0 to n</span><br><span class="line">        b[n - i] = a[i]</span><br><span class="line">    return b</span><br></pre></td></tr></table></figure></p><p>不幸地，这样需要$O(n)$的空间来创建b数组，且配置存储器通常是一件缓慢的运算。如果我们不再需要a，我们可使用这个原地算法，用它自己反转的内容来覆盖掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function reverse-in-place(a[0..n])</span><br><span class="line">    for i from 0 to floor(n/2)</span><br><span class="line">        swap(a[i], a[n-i])</span><br></pre></td></tr></table></figure></p><h3 id="排序算法分析"><a href="#排序算法分析" class="headerlink" title="排序算法分析"></a>排序算法分析</h3><p>了解算法的时间复杂度和空间复杂度之后，再看一些常用算法总结的时候就不会再向原来一样有雾里探花之感了。<br><img src="http://pc1z7pynx.bkt.clouddn.com/markdown-img-paste-20180822181641573.png" alt="常见排序算法总结"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/zolalad/article/details/11848739" target="_blank" rel="noopener">算法的时间复杂度和空间复杂度-总结</a><br><a href="https://zh.wikipedia.org/wiki/原地算法" target="_blank" rel="noopener">原地算法</a></p><!-- | 排序法 | 最差时间分析 | 平均时间复杂度 | 稳定度 | 空间复杂度 || --- | --- | --- | --- | --- || 冒泡排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 快速排序 | $O(n^2)$ | $O(n*log_2(n))$ | 不稳定 | $O(n*log_2(n))$~$O(n)$ || 选择排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 二叉树排序 | $O(n^2)$ | $O(n*log_2(n))$ | 不一定 | $O(n)$ || 插入排序 | $O(n^2)$ | $O(n^2)$ | 稳定 | $O(1)$ || 堆排序 | $O(n*log_2(n))$ | $O(n*log_2(n))$ | 不稳定 | $O(1)$ || 希尔排序 | O | O | 不稳定 | $O(1)$ | -->]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Time-complexity </tag>
            
            <tag> Space-complexity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AI发电厂——数据标注公司（国内数据标注公司服务调研）</title>
      <link href="/2018/08/07/Investigate-domestic-data-labeling-companies/"/>
      <url>/2018/08/07/Investigate-domestic-data-labeling-companies/</url>
      <content type="html"><![CDATA[<p>众所周知，深度学习需要大量的标记数据和高效的运算来做支撑。<br>计算资源只要从黄老板的公司订购就可以了，但大规模的高质量有标记数据却不是那么容易获得，让科研人员头疼不已。<br>应用时代而生的就是一大批数据众包公司和平台。正好借着一个数据众包任务，对于国内的数据标注公司服务有了更深一步的了解。</p><a id="more"></a><hr><p><img src="https://i.loli.net/2018/08/10/5b6cfff5ccf31.png" alt="AI发电厂————数据标注公司"></p><blockquote class="blockquote-center"><p>AI的老师：画框的这些人</p></blockquote><p>伴随着AI兴起的最关键的技术莫过于深度学习，作为深度学习的基础，神经网络是一种以输入为导向的算法，其结果的准确性取决于接近“无穷”量级的数据。<br>所以摒除那些复杂的中间环节，深度学习最关键的就是需要大量的数据训练，这也是为什么在互联网大数据的时代，AI可以崛起。而在数据训练之前，又必须先对大量的数据进行标注，作为机器学习的先导经验。</p><p>因此，催生了大量数据标注公司的诞生。</p><h4 id="什么是数据标注"><a href="#什么是数据标注" class="headerlink" title="什么是数据标注"></a>什么是数据标注</h4><p>要理解数据标注，得先理解AI其实是部分替代人的认知功能。<br>回想一下我们是如何学习的，例如我们学习认识苹果，那么就需要有人拿着一个苹果到你面前告诉你，这是一个苹果。然后以后你遇到了苹果，你才知道这玩意儿叫做“苹果”。类比机器学习，我们要教他认识一个苹果，你直接给它一张苹果的图片，它是完全不知道这是个啥玩意的。我们得先有苹果的图片，上面标注着“苹果”两个字，然后机器通过学习了大量的图片中的特征，这时候再给机器任意一张苹果的图片，它就能认出来了。</p><p>根据应用场景的不同，数据标注有许多类型。大体上分为图像、语音、自然语言三大类。<br>其中由于图像研究领域的水文热潮，图像标注的任务也尤为众多。。。无人驾驶、人脸识别、物体检测……<br>语音和语言相对来说，数据标注难度更大一点。价格也相对高昂一些。</p><p>在进行数据标注之前，我们首先要对数据进行清洗，得到符合我们要求的数据。数据的清洗包括去除无效的数据、整理成规整的格式等等。具体的数据要求可以和算法人员确认。</p><h4 id="众包标注的困难"><a href="#众包标注的困难" class="headerlink" title="众包标注的困难"></a>众包标注的困难</h4><p>众包标注由于是非专业标注，自然会遇到很多问题。这困难主要由以下三个方面组成：</p><ol><li>标注者的水平<br>由于标注者是众包标注，因此其标注者的水平也参差不齐，其背景知识和行为习惯可能有较大的差异。这就相当于是给若干个已训练好的模型来做预测一样，其不同的模型有不同的输出结果。那么这种情况下，基本上使用多数投票的方法来解决。</li><li>评价困难<br>标注的内容可以分为两类，一类是有明确标签的，就好比是试卷里的客观题一样，尽管各个标注都不同，但是还是在有限集合内的。另一类是开放式回答，这种标注如同试卷里的主观题一样，可能会有无限种可能的结果。甚至是截然相反的结果，比如什么是美，什么是丑，每个人的评价标准是不同的。我们本次想要的数据众包也是这个类型的。</li><li>标注稀疏性<br>如果一个需要标注的训练集中的数据本身就比较稀疏，而我们又需要把它们分割成一个个小块，这就有可能造成数据稀疏。比如，我们要进行鸟类图片标注，如果本身鸟类种类很多，而分给每个人的鸟的种类也很多的话，由于每个人认识的鸟的种类是不多的，因此可能存在每个人的标注都会有很高的错误率。这时候我们可能就需要让标注者之间有重叠的部分，然后使用多数表决来解决。</li></ol><h4 id="数据众包公司调研"><a href="#数据众包公司调研" class="headerlink" title="数据众包公司调研"></a>数据众包公司调研</h4><p>由于我们需要众包的数据是中文数据，所以只关心国内的一些数据众包公司。国外的Amazon Mechanical Turk、CrowdFlower、Mighty AI等公司不在考察范围之内。</p><p>据悉，在国内的数据标注行业实行这样一套分工流程：上游的科技巨头把任务交给中游的数据标注公司，再由中游众包给下游的小公司、小作坊，有的小作坊还会进一步众包给“散兵游勇”，比如学生或家庭主妇。<br>这条产业链上，分包现象越严重，最终落到最底层的数据服务公司的价格就越低，一层层的“数据黄牛”压缩了利润空间，所以一些任务经过数手转包，酬劳已低得惊人。<br>目前的数据标注工作主要是集中在河北、河南、山东、山西等劳动力密集的地区，这样的选址也因为能够以更加低廉的劳动力成本去完成大量的数据标注工作。</p><p>下面是我对国内的数据众包公司做的一些调研（按照我搜索得知该公司的顺序排序）。<br>不知道是否是我们的标注任务太难的缘故，绝大多数公司没有任何反馈。</p><p>1.<a href="http://zhongbao.baidu.com/ds/requirement/preview?requirementId=1152" target="_blank" rel="noopener">百度数据众包</a>、<a href="https://cloud.baidu.com/product/dcs.html" target="_blank" rel="noopener">百度云众包</a><br>百度不愧是靠PC端的网页搜索起家的，其前端技术还是不错，网站做的还是比较精致的。但是我提出了数据标注任务之后，贵司的这个相应效率可就有点搞笑了。完全没有反应……</p><p>2.<a href="https://www.fanhantech.com/zh" target="_blank" rel="noopener">泛函科技</a><br>第二天下午有反馈, <strong>0.35元/条</strong>, 后来涨价到<strong>1.5元/条</strong>……而且拿走我的数据，试标结果都没有反馈。<br>但是客户经理态度还比较好，最后给出这样一个方案“您确定一个期望的价格，我们也可以把他发到我们的平台上，我们抽取一定佣金后，按您意愿的价格发布任务。看是否有用户愿意标注，这样的工期我们不敢保证。”，我是不敢采取的，23333。</p><p>3.<a href="https://biao.jd.com/" target="_blank" rel="noopener">京东众智</a><br>数据标注的需求申请是真难用！京东公司就没有一个会前端的人嘛？<br>但是，京东的效率很高，反应很快（第二天就有回复），对接服务还比较周到细致，测评试标注有标注结果反馈，且效果尚可。最后谈妥的价格是0.55元/条，含6个点的税，增值税普通发票。关键是，京东平台只接受<strong>5W元</strong>以上的订单。这一点为什么不在官网说明？浪费我那么多的联系时间。</p><p>4.<a href="http://www.datatang.com/" target="_blank" rel="noopener">数据堂</a><br>联系之后没有反馈</p><p>5.<a href="http://www.longmaosoft.com/cn/index.html" target="_blank" rel="noopener">龙猫数据</a><br>联系之后没有反馈</p><p>6.<a href="http://zhongbao.alibaba.com/#J-contact" target="_blank" rel="noopener">阿里众包</a><br>联系之后没有反馈</p><p>7.<a href="http://stardust.ai/" target="_blank" rel="noopener">星辰数据</a><br>网页做的很好看，但是联系之后没有反馈</p><p>8.<a href="http://www.magicdatatech.com/" target="_blank" rel="noopener">爱数智慧</a><br>第二天下午有反应，但进展比较慢。问我要走了样例数据试标注却没有结果反馈。难道不需要顾客审查标注质量么？<br>最后报出的定价是<strong>0.45元/条</strong>，但是谁知道他们标注的质量呢？</p><p>9.<a href="https://www.basicfinder.com/service.html?search-id=7" target="_blank" rel="noopener">倍赛公司</a><br>联系之后没有反馈</p><p>10.<a href="http://www.imtagger.com/" target="_blank" rel="noopener">tagger</a><br>联系之后没有反馈</p><p>总的来说，我眼中国内最靠谱的数据标注公司是京东众智。不论是客户经理的对接工作，还是数据的试标注反馈，完成的都比较高效和到位。但也有一个致命的缺陷，它们只接受<strong>5W元</strong>以上的标注任务订单，，，这就基本把高校的科研组统统拒之门外了。另外，泛函科技和爱数智慧的服务以及价格尚可，只是没有京东众志应答迅速，没有试标注的结果反馈。至于其他一些公司，统统没有反馈，令人失望。</p><hr><blockquote><p>PS:上文中，BA已经出镜，不给T家一个机会貌似不太公平。那就给他们一个亮相机会吧。</p></blockquote><p><img src="https://i.loli.net/2018/08/07/5b697c5bee37b.png" alt="腾讯数据标注实习生招聘"></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://blog.csdn.net/qq_35082030/article/details/70162245" target="_blank" rel="noopener">众包数据标注中的隐类别分析</a><br><a href="https://www.jianshu.com/p/d6dd960b550c" target="_blank" rel="noopener">谈谈人工智能数据标注那些事儿</a><br><a href="https://new.qq.com/omn/20180714/20180714A18X5E.html" target="_blank" rel="noopener">数据标注员，最后一批被AI取代的人</a></p>]]></content>
      
      <categories>
          
          <category> Machine-learning </category>
          
          <category> Data-labeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine-learning </tag>
            
            <tag> Data-labeling </tag>
            
            <tag> Crowdsourcing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Github和Coding双线绑定自定义域名</title>
      <link href="/2018/07/29/Github-and-Coding-bulid-blog/"/>
      <url>/2018/07/29/Github-and-Coding-bulid-blog/</url>
      <content type="html"><![CDATA[<p>本来博客已经搭建好了，可是总觉得用Github一个二级域名怪怪的，非要折腾自己来绑定自己的域名，并申请SSL（就是喜欢看那个小绿锁！）前前后后花了不少时间，走了不少弯路，将踩过的坑记录下来。</p><a id="more"></a><hr><h3 id="域名设计原则"><a href="#域名设计原则" class="headerlink" title="域名设计原则"></a>域名设计原则</h3><p>域名的设置应该根据什么原则呢？参考<a href="http://www.nuobg.com/reed/439.html" target="_blank" rel="noopener">域名价值评估</a>，我们可以根据如下因素来</p><p><strong>域名的长短</strong>:1位：10万，2位：5万，3位：1万，4位：5000，5位以上1000，6位以上500<br><strong>域名的组成结构</strong>：纯字母的*2，数字与字母杂的*1，中划线/3<br><strong>域名的组合方式</strong>：单词*3，纯数及单词组合*2，拼音及其它*1<br><strong>域名的形式分类</strong>：行业词*3，通用词*2，创单词*1<br><strong>域名的商业价值</strong>：搜索数量：1000以下/3，1000到1万/2，1万到10万*1，10万到100万*2，100万*3，100万以后搜索数量多一个0就*3的倍数，百度以100万，google以300万为参数。<br><strong>域名的后缀</strong>：com结尾的大于net，net结尾的大约cn的，cn结尾的大于<a href="http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名" target="_blank" rel="noopener">http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名</a><br><strong>域名的历史记录</strong>：自己衡量。<br><strong>域名记忆性标准</strong>：跟实际生活中某些词汇重叠，跟语言、语音发声重叠适用性较强<br><strong>域名的合法性标准</strong>：域名是否符合法律，是否涉及到知识产品争议方面。<br><strong>域名的潜在商业价值</strong>：域名所涉及的行业规模及互联网的相关性。</p><h3 id="域名服务商选择"><a href="#域名服务商选择" class="headerlink" title="域名服务商选择"></a>域名服务商选择</h3><p>心中构思好了自己的域名后，就可以着手选择一个靠谱的域名购买商。如果懒得备案，那就将我们的目光锁定在国外。<br>参考<a href="https://www.zhihu.com/question/19551906/answer/31986656" target="_blank" rel="noopener">分析域名购买商</a>，<a href="https://www.1deng.me/2017-best-domain-registrars.html" target="_blank" rel="noopener">2018最佳国外域名注册商，不需要备案</a>这两篇文章，我将目光初步锁定在namesilo和namecheap两家口碑较好、服务稳定、价格尚可的服务商身上。</p><p>这里有两个网站来查询你所想好的域名目前的状况，以及价格对比。<br><a href="https://namebeta.com/" target="_blank" rel="noopener">查域名是否被注册（中文站）</a>，<a href="https://www.domcomp.com/" target="_blank" rel="noopener">domcomp——国外多家域名购买网站的价格对比</a><br>如果准备购买，从domcomp内点击对应的域名服务商还有额外的优惠。</p><p>我最终选择的是Namesilo，因为更便宜……口碑也还不错。<a href="https://www.namesilo.com/?rid=cffdf56sr" target="_blank" rel="noopener">namesilo传送门</a> Namesilo还免费提供隐私服务（即不公开域名持有者的信息）。对了， Namesilo 支持支付宝付款。<br>从传送门进去，注册新用户，选好合适的域名后填入下面两个优惠码其中任意一个都可以优惠一美元。（截止日期：2020年12月31日）</p><div class="note success"><p>NameSilo 新用户购物优惠码一 <span id="inline-blue">imbowei</span>     NameSilo 新用户购物优惠码二 <span id="inline-blue">miaomiao</span>  </p></div><h3 id="域名购买及配置"><a href="#域名购买及配置" class="headerlink" title="域名购买及配置"></a>域名购买及配置</h3><p>namesilo购买域名之前记得填写优惠码，并且提交（提交按钮一直都是灰色的！），提交后可以便宜一美元。<br><img src="https://i.loli.net/2018/07/29/5b5dd61453e66.png" alt="namesilo购买域名"><br>经过以上步骤，就可以最终购买域名了。</p><p>购买得到域名，要紧接着配置。新域名默认有四条停靠的广告记录，不要犹豫，直接全部删除！<br><img src="https://i.loli.net/2018/07/30/5b5e66fe8bec0.png" alt="Namesilo需要删除的默认配置"><br>然后我选用了<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSpod</a>的域名解析服务。中文网站，简单易懂。它有两个默认的解析记录，我们直接添加到<code>namesilo</code>购买的域名中，如下图所示。（注意：不需要第三条记录。）<br>这样就可以放心关闭Namesilo的网站了。<br><img src="https://i.loli.net/2018/07/29/5b5dd74a5f2e6.png" alt="namesilo第三方服务器设置"></p><h3 id="Coding配置"><a href="#Coding配置" class="headerlink" title="Coding配置"></a>Coding配置</h3><p>如果Coding和GitHub的用户名和注册邮箱完全一样，就不用再次配置Git，只要找到<code>.ssh</code>文件夹下对应的<code>id_ras.pub</code>文件，再去coding以相同的方式设置一次公钥即可。</p><p>如果用户名或者注册邮箱并不是完全一致，那么按照如下步骤在进行一遍配置。<br>注意，需要先将配置GitHub时候生成的公钥密钥文件备份，或者生成Coding配置的时候改掉生成的文件名。</p><ul><li><code>git config --global user.name &quot;OnlyChristmas&quot;</code> 设置Coding用户名</li><li><code>git config --global user.email &quot;OnlyChristmas@hh.com&quot;</code>设置注册Coding邮箱</li><li><code>ssh-keygen -t rsa &quot;OnlyChristmas@hh.com&quot;</code> 在bash中执行命令，连着三个回车（不需要密码）。</li><li>生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。生成文件目录`C:/用户/你的用户名/</li></ul><p>输入 <code>ssh -T git@coding.net</code> 如果出现如下字样不要慌张，因为可能是本地网络禁止了22端口，我们换个端口就好。</p><blockquote><p>ssh: connect to host coding.net port 22: Connection refused</p></blockquote><p>再次输入 <code>ssh -T -p 443 git@git-ssh.coding.net</code> 出现如下字样，说明配置coding成功。</p><blockquote><p>The authenticity of host …………………<br>Coding 提示: Hello OnlyChristmas, You’ve connected to Coding.net via SSH. This is a personal key.<br>OnlyChristmas，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</p></blockquote><h3 id="将博客托管到Coding和GitHub"><a href="#将博客托管到Coding和GitHub" class="headerlink" title="将博客托管到Coding和GitHub"></a>将博客托管到Coding和GitHub</h3><p>首先，在本地<code>博客根目录/source/</code>下建立一个名为 <code>CNAME</code>的文件，里面写填入你购买的域名。例如<a href="imbowei.com">imbowei.com</a>, 不需要任何的其他字符，例如“www”,”https”之类。</p><p>在本地博客文件夹下的srouce文件夹下新建<span id="inline-green">Staticfile</span>文件，接下来就可以同时向coding和GitHub上传博客了。</p><p>向coding提交代码遇到了如下问题怎么办？</p><blockquote><p>remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码</p></blockquote><p>我是因为配置出现了问题，改成如下样式，即可同时上传github和coding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git</span><br><span class="line">    coding: git@git.coding.net:OnlyChristmas/OnlyChristmas.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>代码上传之后，在coding项目的<code>代码/pages 服务</code>中选取master分支，开启静态pages服务，即可访问coding的<a href="https://onlychristmas.coding.me" target="_blank" rel="noopener">主页</a>了。</p><h3 id="Github-and-Coding-双线部署并申请SSL"><a href="#Github-and-Coding-双线部署并申请SSL" class="headerlink" title="Github and Coding 双线部署并申请SSL"></a>Github and Coding 双线部署并申请SSL</h3><p>现在Coding pages和Github pages 已经都可以使用了。<br>那么我们现在要做的就是设置他们同时解析到我们刚才购买的域名<a href="imbowei.com">imbowei.com</a>，实现双线访问。<br>这里的坑比较多。<br>首先要在DNSpod先设置解析Coding，并且在Coding项目的pages界面申请SSL证书。申请配置如下图所示。<br>否则Let’s Encrypt主机根据域名解析记录验证域名所有权时，会定位到GitHub Page的主机上，导致Let’s EncryptSSL证书申请失败。<br><img src="https://i.loli.net/2018/07/30/5b5e625ebaacc.png" alt="Coding pages SSL 申请成功"></p><p>然后在DNSpod再配置Github pages的解析，并在Github博客项目的设置中绑定主页。</p><p>然而，Github pages 出现了如下的错误信息，</p><blockquote><p>Domain’s DNS record could not be retrieved.<br>不要着急，这是因为github pages的自定义HTTPS请求没有配置成功（2018年5月1日新推出的良心服务），在刚才的DNSpod中添加一条A记录即可,其中IP指向在下面的地址中任选其一即可（一项不行，就换另外一个）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure></p></blockquote><p>Gituhb pages的配置成功界面如下所示。<br><img src="https://i.loli.net/2018/07/30/5b5e62c7adf58.png" alt="Gituhb pages SSL配置成功"><br>最终的DNSpod解析配置如下图所示。<br><img src="https://i.loli.net/2018/07/30/5b5e62ff63ffc.png" alt="DNSpod 配置"></p><h3 id="去除Coding的广告……"><a href="#去除Coding的广告……" class="headerlink" title="去除Coding的广告……"></a>去除Coding的广告……</h3><p>配置好之后很开心，然而发现，Coding会自动给你的博客加一个滞留好几秒钟的跳转页面，感觉非常非常的不好。<br>还好除了升级为它的黄金会员之外还有其他解决方法。</p><p>只要在博客主页为它打一点点广告就好了（要两个工作日才会通过！）……毕竟托管在上面还是很方便的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>对于Next主题来说，在<code>themes/next/layout/_partials/footer.swig</code>的文件末尾加入上述代码就可以把Coding要求的小广告加入到主页的页脚位置。</p><p>但是Coding这种强制要求真的很烦人，一点互联网精神都没有！货比货，感觉Coding距离Github还差几个光年吧。<br>既然打广告，也顺便带上良心的Github吧！</p><h3 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h3><p>现在部署好了HTTPS，那为什么还是没有出现小绿锁？刷新页面出现的小绿锁一闪而过，让我们空欢喜一场！<br>因为网站没有全站HTTPS，也就是说，我们引用了http的资源，要将对应资源全部换成HTTPS才能出现小绿锁。</p><p>怎么知道自己什么还没有换成HTTPS资源？很简单，<code>F12</code>打开调式界面就可以发现警告信息。<br>例如我的站点就是因为加载了一个自定义的鼠标图片，如鼠标图片引用了HTTP的资源，将该段代码注释掉，或者换一个HTTPS的资源连接即可。</p><p>然后，就有心心念的<strong>小绿锁</strong>了！</p><p>另外由于主页地址的改变，我还更新了如下资源配置：</p><ul><li>gitment评论系统的<code>Authorization callback URL</code>主页设置为自定义域名。</li><li>SEO相关设置</li><li>在<span id="inline-blue"> 站点配置文件 </span>中更改默认站点，使得文档末尾的copyright链接生成正确。</li><li>还在阿里云申请了一个为期一年的SSL免费证书，用于一些资源网站的验证使用。</li></ul><!-- 配置结束后，如果能直接访问，那是最好。但是如果有悲催的如下错误发生，也不要慌张。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">无法访问此网站</span><br><span class="line">找不到 imbowei.com 的服务器 IP 地址。</span><br><span class="line">尝试运行 Windows 网络诊断。</span><br><span class="line">DNS_PROBE_FINISHED_NXDOMAIN</span><br></pre></td></tr></table></figure><p>我的电脑除了刚刚购买的域名<a href="imbowei.com">imbowei.com</a>之外，所有网站都可以正常访问！……<br>不要慌，也不要问度娘，老老实实的google一下，<br>只要打开<code>控制面板/网络和Internet/网络连接/</code>，选择你使用的网络，右键-&gt;属性-&gt;IPV4（双击），将DNS服务器改成如下配置</p><p><div class="note success"><p> 首选DNS服务器　8.8.8.8</p><p>备用DNS服务器　8.8.4.4 &lt;/p&gt;&lt;/div&gt; —&gt;</p>-->]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github-pages </tag>
            
            <tag> Coding-pages </tag>
            
            <tag> DNSpod </tag>
            
            <tag> SSL </tag>
            
            <tag> Domain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux服务器命令行上传数据到百度云盘</title>
      <link href="/2018/07/26/linux-uploading-baiduyunpan/"/>
      <url>/2018/07/26/linux-uploading-baiduyunpan/</url>
      <content type="html"><![CDATA[<p>每次想把服务器上的数据上传到百度云盘都要先下载到本地，然后再上传百度云。<br>这一点都不优雅，既浪费时间，还占用电脑本来的带宽。<br>如果Linux命令行能够直接上传百度云盘岂不美哉？说干就干，磨刀不误砍柴工！</p><a id="more"></a><hr><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>CentOS Linux, python3  配置环境</li><li><code>pip install bypy --user</code></li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>输入<code>bypy info</code>，得到如下显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please visit:</span><br><span class="line">https://openapi.baidu.com/oauth/2.0/authorize?client_id=q8WE4EpCsau1oS0MplgMKNBn&amp;response_type=code&amp;redirect_uri=oob&amp;scope=basic+netdisk</span><br><span class="line">And authorize this app</span><br><span class="line">Paste the Authorization Code here within 10 minutes.</span><br><span class="line">Press [Enter] when you are done</span><br></pre></td></tr></table></figure></li><li><p>访问该链接，获得授权码，复制回来。确认。得到类似信息即配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Quota: 2.008TB</span><br><span class="line">Used: 1.272TB</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>再也不用把一些实验结果保存到本地，从实验室服务器折腾到本地再进行上传。写两条命令就可以继续干活了，感觉真好！<br>下面是一些常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bypy list                 # 显示文档</span><br><span class="line">bypy upload filename -v   # 上传某文件，显示进度</span><br><span class="line">bypy -c                   # 取消令牌文件。一段时间后要重新授权</span><br><span class="line">bypy downdir filename     # 下载</span><br><span class="line">bypy compare              # 比较本地目录和网盘目录</span><br></pre></td></tr></table></figure><p>执行上传命令之后有如下的显示，说明正在上传</p><blockquote><p>‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.<br>[=<strong><strong><strong><strong>___</strong></strong></strong></strong>] 9% (20.0MB/214.1MB) ETA: 6m52s (481kB/s, 42s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.<br>[===<strong><strong><strong><strong>_</strong></strong></strong></strong>] 18% (40.0MB/214.1MB) ETA: 6m10s (481kB/s, 1m25s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.</p></blockquote><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://www.cnblogs.com/liwei0526vip/p/5002434.html" target="_blank" rel="noopener">Linux命令行上传文件到百度网盘</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Bypy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wikipedia 训练繁（简）体中文 embedding(word2vec)模型</title>
      <link href="/2018/07/22/wikipedia-train-traditional-chinese-embedding%EF%BC%88word2vec%EF%BC%89model/"/>
      <url>/2018/07/22/wikipedia-train-traditional-chinese-embedding%EF%BC%88word2vec%EF%BC%89model/</url>
      <content type="html"><![CDATA[<p>由于课题任务需要一个繁体中文的word3vec, 折腾经过记录在此。希望以后少掉几个坑。<br>训练好的embedding放在<a href="https://pan.baidu.com/s/1DB_Sft8N9XMyDP9cpVMpBw" target="_blank" rel="noopener">网盘</a>中， 密码：<code>2um0</code><br>后来又按照这个方法训练了简体中文维度分别为50、100、200、300的embedding，一并放出来<a href="https://pan.baidu.com/s/1JgjRBWwwrcJSy4taPFtLhA" target="_blank" rel="noopener">网盘链接</a> 密码：<code>751d</code></p><a id="more"></a><hr><h5 id="get-wiki"><a href="#get-wiki" class="headerlink" title="get wiki"></a>get wiki</h5><p><a href="https://dumps.wikimedia.org/zhwiki/latest/zhwiki-latest-pages-articles.xml.bz2" target="_blank" rel="noopener">最新的wiki datas下载地址</a>，目前有1.6G大小。</p><p>里面的内容以XML格式保存。节点信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;page&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;id&gt;&lt;/id&gt;</span><br><span class="line">  &lt;timestamp&gt;&lt;/timestamp&gt;</span><br><span class="line">  &lt;username&gt;&lt;/username&gt;</span><br><span class="line">  &lt;comment&gt;&lt;/comment&gt;</span><br><span class="line">  &lt;text xml:space=&quot;preserve&quot;&gt;&lt;/text&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure></p><h5 id="初步处理"><a href="#初步处理" class="headerlink" title="初步处理"></a>初步处理</h5><p>我顺手直接解压真的too young。<br>为了节省时间，免去自己写代码处理Wiki的烦恼，Wikipedia Extractor先初步处理。（服务器非root用户，安装命令加上<code>--user</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/attardi/wikiextractor.git wikiextractor</span><br><span class="line">cd wikiextractor</span><br><span class="line">python setup.py install --user</span><br><span class="line">python WikiExtractor.py -b 1024M -o extracted zhwiki-latest-pages-articles.xml.bz2</span><br></pre></td></tr></table></figure><p>执行过程如下，可以看到一共处理了1012693篇文章，输出如下所示：</p><blockquote><p>INFO: 6205533    手語新聞<br>INFO: 6205536    班傑明·古根海姆<br>INFO: 6205549    同意<br>INFO: 6205556    2018年荷蘭網路監控法公民投票<br>INFO: 6205594    李儒新<br>INFO: 6205610    深圳信息职业技术学院<br>INFO: 6205626    停下來等著你 (2018年電視劇)<br>INFO: 6205642    簡單矩陣的快速演算法設計<br>INFO: 6205644    斯義桂<br>INFO: 6205646    焦耳效应<br>INFO: 6205648    1925年世界大賽<br>INFO: 6205653    True (方力申專輯)<br>INFO: 6205657    华睿2号<br>INFO: 6205664    河內郡 (大阪府)<br>INFO: 6205691    京都寺町三条商店街的福爾摩斯<br>INFO: 6205675    莫莉·比什死亡事件<br>INFO: 6205703    都筑郡<br>INFO: 6205701    皇座法庭所屬分庭庭長<br>INFO: 6205709    冬瓜餅<br>INFO: 6205710    吸血鬼莫比亞斯<br>INFO: 6205712    淘綾郡<br>INFO: 6205714    明石香織<br>INFO: Finished 71-process extraction of 1012693 articles in 1114.1s (909.0 art/s)</p></blockquote><p>通过以上抽取后得到两个文件<code>wiki_00</code>和<code>wiki_01</code>。里面的格式类似下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;doc id=&quot;5323477&quot; url=&quot;https://zh.wikipedia.org/wiki?curid=5323477&quot; title=&quot;結構與能動性&quot;&gt;</span><br><span class="line">文章内容</span><br><span class="line">&lt;/doc&gt;</span><br></pre></td></tr></table></figure></p><p>在上面的基础上，我们在去掉一些不需要的特殊符号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import codecs</span><br><span class="line">def filte(input_file):</span><br><span class="line">    p5 = re.compile(&apos;&lt;doc (.*)&gt;&apos;)</span><br><span class="line">    p6 = re.compile(&apos;&lt;/doc&gt;&apos;)</span><br><span class="line">    outfile = codecs.open(&apos;std_&apos; + input_file, &apos;w&apos;, &apos;utf-8&apos;)</span><br><span class="line">    with codecs.open(input_file, &apos;r&apos;, &apos;utf-8&apos;) as myfile:</span><br><span class="line">        for line in myfile:</span><br><span class="line">            line = p5.sub(&apos;&apos;, line)</span><br><span class="line">            line = p6.sub(&apos;&apos;, line)</span><br><span class="line">            outfile.write(line)</span><br><span class="line">    outfile.close()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">filte(input_file)</span><br><span class="line">    input_file = sys.argv[1]</span><br></pre></td></tr></table></figure></p><h5 id="简体转繁体"><a href="#简体转繁体" class="headerlink" title="简体转繁体"></a>简体转繁体</h5><p>首先安装<a href="https://github.com/yichen0831/opencc-python.git" target="_blank" rel="noopener">opencc-python</a><br>网上一大堆教程，全是深坑！其实直接按照代码仓库作者的方法安装就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yichen0831/opencc-python.git</span><br><span class="line">cd opencc-python</span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure></p><p>但是，如果追求效率，可以安装<a href="https://github.com/BYVoid/OpenCC" target="_blank" rel="noopener">opencc C++ 版本</a>，python代码的效率堪忧。</p><p>看文档不难发现，繁体字也分为香港区和台湾省，要用怎么样的转换看具体需求就好<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> opencc <span class="keyword">import</span> OpenCC</span><br><span class="line"></span><br><span class="line">opencc = OpenCC(<span class="string">'s2hk'</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> [<span class="string">'wiki_01'</span>,<span class="string">'wiki_00'</span>]:</span><br><span class="line">true<span class="keyword">with</span> open(<span class="string">'std_'</span>+filename,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fin, open(<span class="string">'hk_'</span>+filename,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fou:</span><br><span class="line">truetrue<span class="keyword">for</span> index , line <span class="keyword">in</span> enumerate(fin.readlines()):</span><br><span class="line">truetruetruehk = opencc.convert(line)</span><br><span class="line">truetruetrue<span class="keyword">if</span> index % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">truetruetruetrueprint(index,hk)</span><br><span class="line">truetruetruefou.write(hk)</span><br></pre></td></tr></table></figure></p><p>得到了两个文件分别大小为 <code>1024M</code> 和<code>154M</code></p><h5 id="jieba-Segment"><a href="#jieba-Segment" class="headerlink" title="jieba Segment"></a>jieba Segment</h5><p>先把两个wiki文件合并<code>cat hk_wiki_00 hk_wiki_01 &gt; hk_wiki</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m jieba -d " " ./hk_wiki &gt; ./SegHk_wiki</span><br></pre></td></tr></table></figure><h5 id="train-word2vec"><a href="#train-word2vec" class="headerlink" title="train word2vec"></a>train word2vec</h5><p>运行下面写好的脚本，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> KeyedVectors</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'./word2vec_tradiCN/'</span>):</span><br><span class="line">trueos.makedirs(<span class="string">'./word2vec_tradiCN/'</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line">sentences = word2vec.LineSentence(<span class="string">'./SegHk_wiki'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]:</span><br><span class="line">truemodel = word2vec.Word2Vec(sentences,size=number,window=<span class="number">5</span>,min_count=<span class="number">5</span>,workers=<span class="number">20</span>)</span><br><span class="line">true<span class="comment"># min-count 表示设置最低频率，默认为5，如果一个词语在文档中出现的次数小于该阈值，那么该词就会被舍弃; size代表词词向量的维度</span></span><br><span class="line">true<span class="comment"># 为了后续建模读取vector方便，我们的保存格式应该和glove vector 保持一致</span></span><br><span class="line">truemodel.wv.save_word2vec_format(<span class="string">'./word2vec_tradiCN/Wiki'</span>+str(number)+<span class="string">'.txt'</span>, binary=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p>然而出现了<code>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.</code>这个错误<br>运行<code>conda install nomkl</code>安装nomkl，这是anaconda的问题。</p><h5 id="test-word2vec"><a href="#test-word2vec" class="headerlink" title="test word2vec"></a>test word2vec</h5><p>如果用python2，运行下面的测试脚本可能会出现如下错误<code>KeyError: &quot;word &#39;\xe7\xb8\xbd\xe7\xb5\xb1&#39; not in vocabulary&quot;</code><br>这个是python2对于中文的支持不太友好造成的，用python3即可表现正常。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> gensim.models.keyedvectors <span class="keyword">import</span> KeyedVectors</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> [<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>]:</span><br><span class="line">    wv = KeyedVectors.load_word2vec_format(<span class="string">'./word2vec_tradiCN/Wiki'</span>+ str(number)+<span class="string">'.txt'</span>, binary=<span class="keyword">False</span>)</span><br><span class="line">    print(number, wv.similarity(<span class="string">'總統'</span>,<span class="string">'民國'</span>)) <span class="comment">#两个词的相关性</span></span><br><span class="line">    print(number, wv.most_similar([<span class="string">'倫敦'</span>,<span class="string">'中國'</span>],[<span class="string">'北京'</span>]),<span class="string">'\n\n'</span>) <span class="comment"># 北京is to中国 as 伦敦is to？</span></span><br></pre></td></tr></table></figure></p><ul><li>注意，繁体中文，测试的时候也要用繁体的</li><li>这里直接测试了四组不同大小的embedding，可以对比效果。以这个简单的测试来说，200d embedding效果比较好。</li><li>当然，在实际中，效果怎么样，还是要实际测试。</li></ul><blockquote><p>50 0.08906988<br>50 [(‘美國’, 0.8497380614280701), (‘英國’, 0.8156374096870422), (‘荷蘭’, 0.7635571956634521), (‘加拿大’, 0.7618951201438904), (‘蘇格蘭’, 0.7564111948013306), (‘法國’, 0.7498287558555603), (‘冰島’, 0.7447660565376282), (‘愛爾蘭’, 0.7290477752685547), (‘德國’, 0.7261558175086975), (‘哥倫比亞’, 0.715803861618042)]</p><p>100 0.0021609096<br>100 [(‘英國’, 0.7518529891967773), (‘美國’, 0.716768741607666), (‘蘇格蘭’, 0.706271767616272), (‘德國’, 0.6398693323135376), (‘法國’, 0.6289862394332886), (‘愛爾蘭’, 0.6286278963088989), (‘荷蘭’, 0.6277433633804321), (‘英格蘭’, 0.625410795211792), (‘加拿大’, 0.6076068878173828), (‘威爾斯’, 0.6075741052627563)]</p><p>200 0.044366393<br>200 [(‘英國’, 0.6959728598594666), (‘蘇格蘭’, 0.6404226422309875), (‘美國’, 0.6401909589767456), (‘英格蘭’, 0.6158463358879089), (‘愛爾蘭’, 0.5740842223167419), (‘德國’, 0.5558757781982422), (‘威爾斯’, 0.5539498925209045), (‘法國’, 0.5375431776046753), (‘荷蘭’, 0.5276069641113281), (‘威爾士’, 0.5051602721214294)]</p><p>300 0.034565542<br>300 [(‘英國’, 0.6512337923049927), (‘蘇格蘭’, 0.5884094834327698), (‘英格蘭’, 0.5666802525520325), (‘美國’, 0.5420516729354858), (‘愛爾蘭’, 0.5202239751815796), (‘威爾斯’, 0.48060378432273865), (‘荷蘭’, 0.4763559103012085), (‘德國’, 0.4744102358818054), (‘法國’, 0.4675533175468445), (‘北愛爾蘭’, 0.46320733428001404)]</p></blockquote><h5 id="网盘链接"><a href="#网盘链接" class="headerlink" title="网盘链接"></a>网盘链接</h5><p>训练好的四个embedding包含892594个词，都放到了<a href="https://pan.baidu.com/s/1DB_Sft8N9XMyDP9cpVMpBw" target="_blank" rel="noopener">网盘</a>中，可以按需下载。 密码：<code>2um0</code></p><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p><a href="https://blog.csdn.net/qq_32166627/article/details/68942216" target="_blank" rel="noopener">word2vec实战：获取和预处理中文维基百科(Wikipedia)语料库，并训练成word2vec模型</a></p>]]></content>
      
      <categories>
          
          <category> NLP </category>
          
          <category> Word2vex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wikipedia </tag>
            
            <tag> Gensim </tag>
            
            <tag> Embedding </tag>
            
            <tag> Opencc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo_Next_博客搭建记</title>
      <link href="/2018/07/14/Hexo_Next_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0/"/>
      <url>/2018/07/14/Hexo_Next_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>与我而言，建立个人博客存在的意义有两个。<br>一方面，当作自己的备忘录，记录零散的知识点，避免重复的搜索工作；<br>另一方面，可以更好的分享一些自己的心得，方便与大家交流。<br>选择<code>GitHub Hexo Next</code>的组合的主要原因就是方便、便宜、简单，为从来没有接触过前端的自己降低难度。<br>为了能让博客漂亮一点，这几天来的折腾过程记录整理在此，以备遗忘。</p><a id="more"></a><hr><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><hr><h4 id="本地构建博客"><a href="#本地构建博客" class="headerlink" title="本地构建博客"></a>本地构建博客</h4><p>我的环境是win10系统，经过一下步骤可以构建好一个运行在本地的静态博客（电脑不能占用localhost:4000端口）</p><ul><li>安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>, 这是建立Hexo的基础。在powershell中验证是否安装成功用后面两条命令 <code>node -v</code>、 <code>npm -v</code>。</li><li>建立一个存放博客文件的新文件夹。按住<code>shift</code>单击右键点击‘在此处打开Powershell’</li><li><p>安装Hexo，并初始化博客（需要几分钟）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>开启本地服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我就是试试博客搭建好没&quot;</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><p>要想将本地博客部署到gitpages上，按照下面步骤操作即可。</p><ul><li>安装分布式版本控制系统Git， <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">这是下载地址</a> 、<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">这是git教程</a></li><li>没有github账户的先注册一个</li><li><p>要将本地的git和github账户绑定，打开git bash ,配置如下信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;OnlyChristmas&quot;</span><br><span class="line">git config --global user.email &quot;OnlyChristmas@hh.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成ssh密钥文件的命令：<code>ssh-keygen -t rsa -C &quot;OnlyChristmas@hh.com&quot;</code>,中间不需要设置什么，直接三个回车。</p></li><li><a href="https://github.com/settings/keys" target="_blank" rel="noopener">在这里</a> 点击 <span id="inline-green">New SSH key</span> 新建一个链接，并将<span id="inline-red">C://users/用户名/.ssh/id_rsa.pub</span>文件中的密钥复制进去（标题随便填）。</li><li>bash中输入<code>ssh git@github.com</code>验证是否配置成功。如果出现<blockquote><p><code>Hi 你的用户名！You&#39;ve successfully authenticated ,,,bala,,,Connection to github.com closed</code><br>证明连接成功，以后推送的时候只需第一次输入密码，以后直接推送即可。</p><ul><li>在github中新建一个仓库，名字是默认写法<span id="inline-black">用户名.github.io</span>  例如:<a href="http://OnlyChristmas.github.io" target="_blank" rel="noopener">OnlyChristmas.github.io</a></li></ul></blockquote></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git # 你的代码仓库地址，记得后面加上`.git`</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>然后保存你的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>让你的博客上线！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><p>博客上线后，chrome浏览器页面通常会直接载入缓存，无法正常显示我们上传的新内容。 </p></div><div class="note info"><p>这时按`F12`进入后台，然后右键单击浏览器的刷新按钮，选择<span id="inline-black">清空缓存并硬性重新加载</span>即可正常浏览页面</p></div><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>不来不准备弄的，但是不折腾不舒服啊，最终还是配置完成了，链接如下。<br><a href="https://imbowei.com/2018/07/29/Github-and-Coding-bulid-blog/#more">用Github和Coding双线绑定自定义域名,并申请全站SSL</a></p><h4 id="初探Hexo"><a href="#初探Hexo" class="headerlink" title="初探Hexo"></a>初探Hexo</h4><ul><li><p>下面是常用的及条命令以及简写，更多命令<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">参考官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line"># 主要命令的含义以及简写</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line"># 可能用到的设置命令</span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure></li><li><p>图片是博客必不可少的一部分，但它们会造成加载缓慢。所以对于我们严肃的技术博客来说，就要少贴图，多敲代码，哈哈~。<br>但是偶尔也是要贴几张图，才能说得更明白，这个时候推荐使用<a href="https://portal.qiniu.com/signup?code=3lgfr7lh13uj6" target="_blank" rel="noopener">七牛云的外链</a>，来提高速度。<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">为什么选用七牛云</a></p></li><li><p>虽然我们是个严肃的技术博客，要有学术风格（就是丑！），但也不能太丑吧！？所以我这里换用<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题</a>，配置方式如下。当然也有<a href="https://hexo.io/themes/" target="_blank" rel="noopener">更多的漂亮主题可供挑选</a>，只是在配置的时候如是出现问题，更难解决，新手慎用。<br>在blog文件夹下的shell中输入，下载主题文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"># theme: landscape</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><hr><h3 id="Next内置优化"><a href="#Next内置优化" class="headerlink" title="Next内置优化"></a>Next内置优化</h3><hr><p>优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。</p><h4 id="选择Next主题中的风格样式"><a href="#选择Next主题中的风格样式" class="headerlink" title="选择Next主题中的风格样式"></a>选择Next主题中的风格样式</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，并在四种风格中选择一个即可。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></li></ul><h4 id="algolia搜索"><a href="#algolia搜索" class="headerlink" title="algolia搜索"></a>algolia搜索</h4><p>   首先在 <a href="https://www.algolia.com/" target="_blank" rel="noopener">algolia</a> 注册账号。此处优化需注意，官方文档不够完善。</p><ul><li>创建APIKey HEXO_ALGOLIA_INDEXING_KEY</li><li>进入Algolia的API Keys页面ALL API KEYS选项卡</li><li><p>创建APIKey</p><ul><li>Description：HEXO_ALGOLIA_INDEXING_KEY</li><li>Indices：&lt;此处选择之前创建的Index&gt;</li><li><p>ACL：Add records，Delete records，List indices，Delete index</p><p>也就是说，我们有两个APIKey，其中一个是Search-only API Key（我们后面需要进行用它配置），另一个是HEXO_ALGOLIA_INDEXING_KEY（新建好即可）。<br>具体的配置步骤如下：</p></li></ul></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 中需要添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">    applicationID:  # Application ID</span><br><span class="line">    apiKey: # Search-only API Key</span><br><span class="line">    indexName: # 此处选择之前创建的Index</span><br><span class="line">    chunkSize: 5000</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，只需将enable改为true，最后两个搜索提示信息有需要的话也可以修改。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">algolia_search:</span><br><span class="line">    enable: true</span><br><span class="line">    hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">    labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;不好意思，木有&apos;$&#123;query&#125;&apos;的搜索结果😂&quot;</span><br><span class="line">    hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span><br></pre></td></tr></table></figure></li><li><p>接下来，我采取的配置方法和官方文档有点出入，但是亲测有效(我是win10系统)。<br>  ​    1. 在博客文件夹根目录右键打开git bash here<br>  ​    2. <code>export HEXO_ALGOLIA_INDEXING_KEY=&#39;Search-only API Key&#39;</code><br>  ​    3. <code>hexo algolia</code></p></li><li><p>bash中出现类似提示说明配置成功</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [Algolia] Identified 6 pages and posts to index.</span><br><span class="line">INFO  [Algolia] Indexing chunk 1 of 1 (50 items each)</span><br><span class="line">INFO  [Algolia] Indexing done.</span><br></pre></td></tr></table></figure></li></ul><h4 id="选择动画背景"><a href="#选择动画背景" class="headerlink" title="选择动画背景"></a>选择动画背景</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息，最好四选一。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true   # 背景有降落伞</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false    # 背景有像海浪一样的小球球</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false    # 背景有立体蜘蛛网</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false    # 屏幕中央有一个爆炸状的球球</span><br></pre></td></tr></table></figure></li></ul><h4 id="代码块语法高亮设置"><a href="#代码块语法高亮设置" class="headerlink" title="代码块语法高亮设置"></a>代码块语法高亮设置</h4><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace: true</span><br></pre></td></tr></table></figure></li></ul><p>注意，网上的自定义样式优化代码中，有对代码块的优化，那部分代码需要注释掉。</p><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><ul><li><p>打开博客根目录，shell安装插件，用如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: &quot;/atom.xml&quot;</span><br></pre></td></tr></table></figure></li><li><p>最后重新生成，只要在<code>./public</code>中看到<code>atom.xml</code>说明生成成功。</p></li></ul><h4 id="修改文章底部的tag图标"><a href="#修改文章底部的tag图标" class="headerlink" title="修改文章底部的tag图标"></a>修改文章底部的tag图标</h4><ul><li>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>,当然也可以切换成任何你喜欢的小图标。</li></ul><h4 id="busuanzi统计访客人数"><a href="#busuanzi统计访客人数" class="headerlink" title="busuanzi统计访客人数"></a>busuanzi统计访客人数</h4><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息，也可以根据自己的喜欢修改其他配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 你是第</span><br><span class="line">  site_uv_footer: 个小伙伴</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问</span><br><span class="line">  site_pv_footer: 人次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure></p><h4 id="文章“热度”"><a href="#文章“热度”" class="headerlink" title="文章“热度”"></a>文章“热度”</h4><ul><li>首先要注册<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a></li><li>左上角创建一个新的应用，获取AppID and AppKey。并且在网站的<code>设置-&gt;安全中心</code>中设置Web安全域名。</li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中搜索并配置如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id:  #&lt;app_id&gt;</span><br><span class="line">  app_key:  #&lt;app_key&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开<code>/themes/next/layout/_macro/post.swig</code>,我的代码修改成如下样子，也可以自由发挥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;# LeanCould PageView #&#125;</span><br><span class="line">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class="line">   &lt;span id=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;</span><br><span class="line">     &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 注释掉了图片 --&gt;</span><br><span class="line">&lt;!-- &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">     &lt;/span&gt;   --&gt;</span><br><span class="line"></span><br><span class="line">     &#123;% if theme.post_meta.item_text %&#125;</span><br><span class="line">       &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123;__(&apos;post.visitors&apos;)&#125;&#125;&amp;#58;&lt;/span&gt;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">       &lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt;</span><br><span class="line">       &lt;span&gt;℃&lt;/span&gt;</span><br><span class="line">   &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后，在<code>/themes/next/languages/zh-Hans.yml</code>,可以任意修改文字信息,我的代码如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">  created: 创建于</span><br><span class="line">  modified: 更新于</span><br><span class="line">  sticky: 置顶</span><br><span class="line">  posted: &apos;发表于:&apos;</span><br><span class="line">  in: &apos;类别:&apos;</span><br><span class="line">  read_more: 阅读全文</span><br><span class="line">  untitled: 未命名</span><br><span class="line">  toc_empty: 此文章未包含目录</span><br><span class="line">  visitors: 热度</span><br></pre></td></tr></table></figure></li></ul><h4 id="字数统计功能配置"><a href="#字数统计功能配置" class="headerlink" title="字数统计功能配置"></a>字数统计功能配置</h4><ul><li><p>切换到根目录下，然后运行如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li><li><p>然后在<span id="inline-purple"> 主题配置文件 </span>中自定义如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: false</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></li></ul><p id="div-border-left-red"> 这里我遇到一个大坑，在正文中写`<html>`标签一定要用代码块包括，否则可能会造成wordcount无法正常统计字数！一直显示为0 </html></p><h4 id="解决readme问题"><a href="#解决readme问题" class="headerlink" title="解决readme问题"></a>解决readme问题</h4><p>在github手动添加readme文件总是会被擦掉，会很麻烦，现在有两种解决方法。</p><ul><li>第一种，在<code>/blog/source</code>中添加一个<code>README.MDOWN</code>文件，每次推送到github都可以正常解析。</li><li>第二种，在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义网站图标"><a href="#自定义网站图标" class="headerlink" title="自定义网站图标"></a>自定义网站图标</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中搜索到如下这部分，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  # small: /images/favicon-16x16-next.png</span><br><span class="line">  # medium: /images/favicon-32x32-next.png</span><br><span class="line">  # apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  # safari_pinned_tab: /images/logo.svg</span><br><span class="line">  small: # 你的图像</span><br><span class="line">  medium: # 你的图像</span><br><span class="line">  apple_touch_icon: # 你的图像</span><br><span class="line">  safari_pinned_tab: # 你的图像</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure></li></ul><h4 id="网站顶部加载条"><a href="#网站顶部加载条" class="headerlink" title="网站顶部加载条"></a>网站顶部加载条</h4><ul><li>已经被Next主题做成了默认的设置，在<span id="inline-purple"> 主题配置文件 </span>中配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure></li></ul><h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><ul><li><p>已经被Next主题做成了默认的设置，在<span id="inline-purple"> 主题配置文件 </span>中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2018</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon: heart</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line">  powered: false</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: true</span><br></pre></td></tr></table></figure></li><li><p>可以在每天博文生成的时候，将它作为一个文章模板。这样可以灵活地对于每篇文章设定是否需要版权信息。</p></li><li>我在<code>/blog/scaffolds/</code>中新建了一个next博文模板，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments: true</span><br><span class="line">categories: NLP</span><br><span class="line">tags: [tag1, tag2]</span><br><span class="line">post_copyright: true</span><br><span class="line">---</span><br><span class="line"> This is a summary</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><ul><li>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息,每次新生成的文章都会使用此模板。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: next</span><br></pre></td></tr></table></figure><h4 id="SEO配置"><a href="#SEO配置" class="headerlink" title="SEO配置"></a>SEO配置</h4><ul><li>想要让我们的站点被搜索引擎收录，要提交给他们站点文件。</li><li><p>首先安装两个插件,并生成两个站点文件，sitemap.xml与baidusitemap.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save-dev</span><br><span class="line">hexo d -g</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save-dev</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-blue"> 站点配置文件 </span> 配置如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># SEO 优化</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User-agent: * Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: http://imbowei.com/sitemap.xml</span><br><span class="line">Sitemap: http://imbowei.com/baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中配置如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure></li><li><p>当然还要去<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长</a>和<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长</a>验证,<a href="https://www.bing.com/webmaster/" target="_blank" rel="noopener">bing验证</a></p></li></ul><h4 id="google-analytics"><a href="#google-analytics" class="headerlink" title="google_analytics"></a>google_analytics</h4><ul><li>在<span id="inline-purple"> 主题配置文件 </span>中有若干种分析工具可以配置，我这里只配置了<a href="https://analytics.google.com/" target="_blank" rel="noopener">谷歌分析</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Google Analytics</span><br><span class="line">google_analytics: UA-balbalbal</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>20180809更新</strong></p></blockquote><ul><li>为了提升新浏览器的性能，将Next主题原有的<code>blog/themes/next/layout/_third_party/analytics/google_analytics.js</code>脚本改为异步加载。如果 IE 9 以及不识别 async 脚本属性的旧版移动浏览器中会自动降级为同步加载和执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            (i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">          m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'https://www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line">  ga(<span class="string">'create'</span>, <span class="string">'&#123;&#123; theme.google_analytics &#125;&#125;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.ga=<span class="built_in">window</span>.ga||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(ga.q=ga.q||[]).push(<span class="built_in">arguments</span>)&#125;;ga.l=+<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">ga(<span class="string">'create'</span>, <span class="string">'&#123;&#123; theme.google_analytics &#125;&#125;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script async src='https:/</span><span class="regexp">/www.google-analytics.com/</span>analytics.js<span class="string">'&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="gitment评论系统"><a href="#gitment评论系统" class="headerlink" title="gitment评论系统"></a>gitment评论系统</h4><p>先注册gitment,<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">这是作者博客</a>，按照<a href="https://github.com/imsun/gitment#customize" target="_blank" rel="noopener">官方文档搭建即可</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Gitment</span><br><span class="line"># Introduction: https://imsun.net/posts/gitment-introduction/</span><br><span class="line"># You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;</span><br><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: false # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: OnlyChristmas # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: OnlyChristmas.github.io # MUST HAVE, The repo you use to store Gitment comments</span><br><span class="line">  client_id: 8fc5c43242323koljoa # MUST HAVE, Github client id for the Gitment</span><br><span class="line">  client_secret: 4ff9a214325312515151b04c400d46 # EITHER this or proxy_gateway, Github access secret token for the Gitment</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure></p><h4 id="Mathjax数学公式支持"><a href="#Mathjax数学公式支持" class="headerlink" title="Mathjax数学公式支持"></a>Mathjax数学公式支持</h4><ul><li>08.22更新</li><li><p>首先，在<span id="inline-purple"> 主题配置文件 </span>中修改如下配置：enable 为 true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure></li><li><p>在<code>/scaffolds/draft.md</code>文件中添加<code>mathjax: false</code>默认不启用mathjax（想要启用的文章再改为true），加快页面加载速度。</p></li><li><p>Hexo默认使用<code>hexo-renderer-marked</code>引擎进行网页渲染，其中对许多字符诸如划线、下划线、中括号等定义了转义。因此，在进行网页渲染时，数学公式中的这些字符先通过<code>hexo-renderer-marked</code>进行转义，就发生了歧义，而再通过MathJax渲染出来的数学公式，自然就显示不正常了。根据这种情况，我们更换渲染器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>在做完工作上面的工作后，行间公式就可以被正确渲染了，但行内公式却还存在着部分问题，这是因为对行间定义的转义字符和对行内定义的转义字符并不相同，还有部分已定义的行间转义字符会与数学公式中可能用到的字符发生冲突，用到这些字符的数学公式在渲染前仍被进行了转义。</p><p>打开<code>node_modules\kramed\lib\rules\inline.js</code>文件，做出如下两处修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">line 11,</span><br><span class="line">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">-&gt;  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line"></span><br><span class="line">line 20,</span><br><span class="line">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">-&gt;  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></li></ul><div class="note danger"><p> 不要安装 `hexo-math` 和 `hexo-renderer-markdown-it-plus` 这两个包，否则出错。</p></div><hr><h3 id="自定义优化"><a href="#自定义优化" class="headerlink" title="自定义优化"></a>自定义优化</h3><hr><p>优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。</p><h4 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h4><p>next内置的代码在服务器升级https之后，百度分享的js请求不了。但是在 <a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">github上的轮子</a> 可以修改后再其启用这一功能。</p><ul><li>下载后得到static文件夹，放入到<code>/themes/next/source/</code>目录下。</li><li><p>将<code>themes/next/layout/_partials/share/baidushare.swig</code>中末尾处的代码进行替换。<br>原代码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p>替换代码</p><pre><code>&lt;script&gt;  with(document)0[(getElementsByTagName(&#39;head&#39;)[0]||body).appendChild(createElement(&#39;script&#39;)).src=&#39;/static/api/js/share.js?v=89860593.js?cdnversion=&#39;+~(-new Date()/36e5)];&lt;/script&gt;</code></pre><ul><li>最后一定记得先<code>hexo g</code>再<code>hexo s</code>，否则可能会出现问题。</li></ul><h4 id="自定义网页title"><a href="#自定义网页title" class="headerlink" title="自定义网页title"></a>自定义网页title</h4><p>   在<code>next\source\js\src</code>下新建脚本<code>custom_title.js</code>,将下面代码复制进去。  <a href="https://asdfv1929.github.io/2018/01/25/crash-cheat/" target="_blank" rel="noopener">js脚本来源</a><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> var OriginTitle = document.title;</span><br><span class="line"> var titleTime;</span><br><span class="line"> document.addEventListener(&apos;visibilitychange&apos;, function () &#123;</span><br><span class="line">     if (document.hidden) &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;);</span><br><span class="line">         document.title = &apos;╭(°A°`)╮ 爱我别走 ~&apos;;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;);</span><br><span class="line">         document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 这才对嘛~&apos; + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(function () &#123;</span><br><span class="line">             document.title = OriginTitle;</span><br><span class="line">         &#125;, 2000);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>   在<code>next\layout\_layout.swig</code>的<code>&lt;body&gt; &lt;/body&gt;</code>标签体内添加</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom_title.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="鼠标点击桃心样式"><a href="#鼠标点击桃心样式" class="headerlink" title="鼠标点击桃心样式"></a>鼠标点击桃心样式</h4><ul><li><p>在<code>/themes/next/source/js/src/</code>中新建<code>love.js</code>,其中写入的代码如下。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function r()&#123;for(var e=0;e&lt;n.length;e++)n[e].alpha&lt;=0?(t.body.removeChild(n[e].el),n.splice(e,1)):(n[e].y--,n[e].scale+=.004,n[e].alpha-=.013,n[e].el.style.cssText=&quot;left:&quot;+n[e].x+&quot;px;top:&quot;+n[e].y+&quot;px;opacity:&quot;+n[e].alpha+&quot;;transform:scale(&quot;+n[e].scale+&quot;,&quot;+n[e].scale+&quot;) rotate(45deg);background:&quot;+n[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;var n=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,function(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),function()&#123;var a=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;a&amp;&amp;a(),function(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,n.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;),t.body.appendChild(a)&#125;(e)&#125;&#125;(),r()&#125;(window,document);</span><br></pre></td></tr></table></figure></li><li><p>在<code>/themes/next/layout/_layout.swig</code>中的<code>&lt;body&gt;&lt;/body&gt;</code>标签体内添加下面代码。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="鼠标点击烟花爆炸样式"><a href="#鼠标点击烟花爆炸样式" class="headerlink" title="鼠标点击烟花爆炸样式"></a>鼠标点击烟花爆炸样式</h4><ul><li><p>在<code>/themes/next/source/js/src/</code>中新建<code>fireworks.js</code>,其中写入的代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在<code>/themes/next/layout/_layout.swig</code>中的<code>&lt;body&gt;&lt;/body&gt;</code>标签体内添加下面代码。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 页面点击烟花爆炸 --&gt;</span><br><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<span id="inline-purple"> 主题配置文件 </span>中添加如下配置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks 鼠标点击烟花爆炸</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义鼠标图片"><a href="#自定义鼠标图片" class="headerlink" title="自定义鼠标图片"></a>自定义鼠标图片</h4><ul><li><p>在<code>themes/next/source/css/_custom/custom.styl</code>中，添加如下代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">&#123;</span><br><span class="line">cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">&#125;</span><br><span class="line">:active &#123;</span><br><span class="line">  cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 上面的url必须是ico 图片，想要自定义图片可以自行上传七牛云获取外链（加速），也可以本地加载。我就偷懒直接用其他博主的链接了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 网易云音乐添加歌单进正文页面</span><br><span class="line">[怎么生成歌单的外链看这里](https://jingyan.baidu.com/article/d7130635dcdf6813fdf475c7.html)</span><br><span class="line">然后将生成的代码加入到想要放入的位置就好了（适当调整大小）。</span><br></pre></td></tr></table></figure></li></ul><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="260" height="240" src="//music.163.com/outchain/player?type=0&id=2315300596&auto=1&height=430"></iframe><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 设置fork me on github</span><br><span class="line">- [在这里挑选样式并复制代码](http://tholman.com/github-corners/) 或者[这里](https://blog.github.com/2008-12-19-github-ribbons/)也可以。</span><br><span class="line">- 刚才复制的代码放到`themes/next/layout/_layout.swig`文件中，`&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;`的下面，并且记得`herf`改为自己的github地址。</span><br><span class="line"></span><br><span class="line">#### 配置文章结束模板</span><br><span class="line">- 在`\themes\next\layout\_macro`文件夹中，新建`passage-end-tag.swig`，并且写入如下代码(当然也可以自由发挥):</span><br></pre></td></tr></table></figure></p><p><div>            <blockquote class="blockquote-center">        <div style="text-align:center;color: #FF5733;font-size:24px;">-------------本文结束 <i class="fa fa-heart"></i> 感谢您的时间-------------</div>        </blockquote>    </div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 接着打开`\themes\next\layout\_macro\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加如下代码。（在我文件大约360的位置）</span><br></pre></td></tr></table></figure></p><pre><code>&lt;div&gt;  {% if not is_index %}        {% include 'passage-end-tag.swig' %}      {% endif %}&lt;/div&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 最后在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中添加如下配置：</span><br></pre></td></tr></table></figure><h1 id="文章末尾添加“本文结束”标记"><a href="#文章末尾添加“本文结束”标记" class="headerlink" title="文章末尾添加“本文结束”标记"></a>文章末尾添加“本文结束”标记</h1><p>passage_end_tag:<br>  enabled: true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- 实现效果如本文结尾所示</span><br><span class="line"></span><br><span class="line">####  头像制作</span><br><span class="line"></span><br><span class="line">按照**NEXT**主题，上传的网站图片需要满足一定的规格要求。</span><br><span class="line"></span><br><span class="line">- 网站图标：我这里在一个在线艺术字网站，设计了一个汉字，下载图片（转换SVG），并且尽量在保证图片清晰度的情况下减小图片大小，以保证网站的加载速度。[很棒的免费在线图片压缩网站](https://tinypng.com/)</span><br><span class="line"></span><br><span class="line">- 个人头像：这里涉及到方照片裁剪呈圆形图片的问题。</span><br><span class="line"></span><br><span class="line">  - 首先，你需要安装一个PS；</span><br><span class="line"></span><br><span class="line">  - 然后，左上角选取圆形套索。按住`SHIFT`键的同时选取图片满意的部分；</span><br><span class="line"></span><br><span class="line">    ![方头像变成圆形_1.png](https://i.loli.net/2018/09/07/5b928d3d3221d.png)</span><br><span class="line"></span><br><span class="line">  - 在图片中，右键”通过拷贝的图层“。然后勾选掉下面图层的眼睛标识，得到下图所示的样子。</span><br><span class="line"></span><br><span class="line">    ![方头像变成圆形_2.png](https://i.loli.net/2018/09/07/5b928e5905fdc.png)</span><br><span class="line"></span><br><span class="line">  - 接下来用裁剪工具可以去掉多余的透明背景。</span><br><span class="line"></span><br><span class="line">  - 在顶部选项卡，”图像--&gt;图像大小“可以根据需要调整图像的大小。</span><br><span class="line"></span><br><span class="line">  - 最后，照例为了保证网站的加载速度，尽可能的在保证图片质量的前提下压缩图片。[很棒的免费在线图片压缩网站](https://tinypng.com/)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 头像旋转</span><br><span class="line"></span><br><span class="line">- 首先打开头像选项,在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中。</span><br></pre></td></tr></table></figure></p><p>in theme directory(source/images): # 你的头像</p><h1 id="in-site-directory-source-uploads-uploads-avatar-gif"><a href="#in-site-directory-source-uploads-uploads-avatar-gif" class="headerlink" title="in site  directory(source/uploads): /uploads/avatar.gif"></a>in site  directory(source/uploads): /uploads/avatar.gif</h1><p>avatar: # 你的头像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 打开`\themes\next\source\css\_common\components\sidebar\sidebar-author.styl`，在里面添加如下代码：</span><br></pre></td></tr></table></figure></p><p>.site-author-image {<br>  display: block;<br>  margin: 0 auto;<br>  padding: $site-author-image-padding;<br>  max-width: $site-author-image-width;<br>  height: $site-author-image-height;<br>  border: $site-author-image-border-width solid $site-author-image-border-color;<br>  /<em> 头像圆形 </em>/<br>  border-radius: 80px;<br>  -webkit-border-radius: 80px;<br>  -moz-border-radius: 80px;<br>  box-shadow: inset 0 -1px 0 #333sf;<br>  /<em> 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束<br>    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]</em>/</p><p>  /<em> 鼠标经过头像旋转360度 </em>/<br>  -webkit-transition: -webkit-transform 1.0s ease-out;<br>  -moz-transition: -moz-transform 1.0s ease-out;<br>  transition: transform 1.0s ease-out;<br>}<br>img:hover {<br>  /<em> 鼠标经过停止头像旋转<br>  -webkit-animation-play-state:paused;<br>  animation-play-state:paused;</em>/<br>  /<em> 鼠标经过头像旋转360度 </em>/<br>  -webkit-transform: rotateZ(360deg);<br>  -moz-transform: rotateZ(360deg);<br>  transform: rotateZ(360deg);<br>}<br>/<em> Z 轴旋转动画 </em>/<br>@-webkit-keyframes play {<br>  0% {<br>    -webkit-transform: rotateZ(0deg);<br>  }<br>  100% {<br>    -webkit-transform: rotateZ(-360deg);<br>  }<br>}<br>@-moz-keyframes play {<br>  0% {<br>    -moz-transform: rotateZ(0deg);<br>  }<br>  100% {<br>    -moz-transform: rotateZ(-360deg);<br>  }<br>}<br>@keyframes play {<br>  0% {<br>    transform: rotateZ(0deg);<br>  }<br>  100% {<br>    transform: rotateZ(-360deg);<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 站点上线时间</span><br><span class="line">- 在`/themes/next/layout/_partials/footer.swig`文件尾部加上，并且修改你的上线时间。</span><br></pre></td></tr></table></figure></p><p><span id="timeDate">载入天数…</span><span id="times">载入时分秒…</span></p><script>    var now = new Date();    function createtime() {        var grt= new Date("07/06/2018 11:11:00");//此处修改你的建站时间或者网站上线时间        now.setTime(now.getTime()+250);        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);        if(String(hnum).length ==1 ){hnum = "0" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = "0" + mnum;}        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = "0" + snum;}        document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 ";        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";    }setInterval("createtime()",250);</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### daovoice</span><br><span class="line">- 在[daovoice](https://dashboard.daocloud.io/)注册账号可以得到 app_id</span><br><span class="line"></span><br><span class="line">- 在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中添加如下配置</span><br></pre></td></tr></table></figure># Online contactdaovoice: truedaovoice_app_id:   # 这里填你刚才获得的 app_id<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在`/themes/next/layout/_partials/head.swig`,添加如下代码：</span><br></pre></td></tr></table></figure><!-- 添加DaoVioce --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 阅读排行榜</span><br><span class="line">- `hexo n page top`新建页面，编辑自动生成的index.md文件，代码如下,替换好你的 __leancloud账号__ 和页面链接（一共三处）</span><br></pre></td></tr></table></figure><div id="top"></div><script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"></script><script>AV.initialize("leancloud_appid", "leancloud_appkey");</script><script type="text/javascript">  var time=0  var title=""  var url=""  var query = new AV.Query('Counter');  query.notEqualTo('id',0);  query.descending('time');  query.limit(1000);  query.find().then(function (todo) {    for (var i=0;i<1000;i++){      var result=todo[i].attributes;      time=result.time;      title=result.title;      url=result.url;      // var content="<a href='"+"https://onlychristmas.github.io"+url+"'>"+title+"</a>"+"<br>"+"<font color='#fff'>"+"阅读次数："+time+"</font>"+"<br><br>";      var content="<p>"+"<font color='#1C1C1C'>"+"【文章热度:"+time+"℃】"+"</font>"+"<a href='"+"https://onlychristmas.github.io"+url+"'>"+title+"</a>"+"</p>";      document.getElementById("top").innerHTML+=content    }  }, function (error) {    console.log("error");  });</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 本地调试不显示，重新生成上传，才能看到排序效果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 背景透明</span><br><span class="line">- 考虑到我们这么好看的动态背景，只在文章两边很小的区域展示，有点别扭，想要让它在文章后面也能显示。</span><br><span class="line">- 在`themes\next\source\css_schemes\你设置的主题\index.styl`文件中搜索`background`,会出现五个结果，我这里只将前两个设置为`none(透明)`，也可以根据需求设置更多的透明。</span><br></pre></td></tr></table></figure>// =================================================// Desktop layout styles.// =================================================// Post blocks..content-wrap {  padding: initial;  background: none;  box-shadow: initial;  border-radius: initial;}// Post & Comments blocks..post-block {  padding: $content-desktop-padding;  background: none;  box-shadow: $box-shadow-inner;  border-radius: $border-radius-inner;}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 如果手机端背景透明，整个页面会比较凌乱，影响阅读效果。切记保持`white`</span><br></pre></td></tr></table></figure>// =================================================// < 767px// =================================================+mobile() {  // Posts in blocks.  .content-wrap {    padding: $content-mobile-padding;    background: white;  }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 同理，在平台电脑上最好也保持背景不透明</span><br></pre></td></tr></table></figure>// =================================================// > 768px & < 991px// =================================================+tablet() {  // Posts in blocks.  .content-wrap {    padding: $content-tablet-padding;    background: white;  }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 添加代码块复制按钮</span><br><span class="line">- 下载[clipboard.min.js](https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js)并将其放到`.\themes\next\source\js\src\`目录下。</span><br><span class="line">- 在`.\themes\next\source\js\src\`目录下，创建`clipboard-use.js`，文件内容如下：</span><br></pre></td></tr></table></figure>/*页面载入完成后，创建复制按钮*/!function (e, t, a) {  /* code */  var initCopyCode = function(){    var copyHtml = '';    copyHtml += '<button class="btn-copy" data-clipboard-snippet="">';    copyHtml += '  <i class="fa fa-globe"></i><span>copy</span>';    copyHtml += '</button>';    $(".highlight .code pre").before(copyHtml);    new ClipboardJS('.btn-copy', {        target: function(trigger) {            return trigger.nextElementSibling;        }    });  }  initCopyCode();}(window, document);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在`.\themes\next\source\css\_custom\custom.styl`样式文件中添加下面代码：</span><br></pre></td></tr></table></figure>//代码块复制按钮.highlight{  //方便copy代码按钮（btn-copy）的定位  position: relative;}.btn-copy {    display: inline-block;    cursor: pointer;    background-color: #eee;    background-image: linear-gradient(#fcfcfc,#eee);    border: 1px solid #d5d5d5;    border-radius: 3px;    -webkit-user-select: none;    -moz-user-select: none;    -ms-user-select: none;    user-select: none;    -webkit-appearance: none;    font-size: 13px;    font-weight: 700;    line-height: 20px;    color: #333;    -webkit-transition: opacity .3s ease-in-out;    -o-transition: opacity .3s ease-in-out;    transition: opacity .3s ease-in-out;    padding: 2px 6px;    position: absolute;    right: 5px;    top: 5px;    opacity: 0;}.btn-copy span {    margin-left: 5px;}.highlight:hover .btn-copy{  opacity: 1;}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在`.\themes\next\layout\_layout.swig`文件中，添加引用要在`&lt;body&gt;&lt;/body&gt;`标签内：</span><br></pre></td></tr></table></figure><!-- 代码块复制功能 -->  <script type="text/javascript" src="/js/src/clipboard.min.js"></script>  <script type="text/javascript" src="/js/src/clipboard-use.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### high一下</span><br><span class="line">- 打开 `blog\themes\next\layout\_partials\header.swig` ，在`&lt;ul&gt; ... /ul&gt;` 标签之间加入以下代码：</span><br></pre></td></tr></table></figure><!-- 自定义High一下的功能 --><!-- 现有歌单  1、#Lov3 #Ngẫu Hứng 2、骄傲的少年 --><p><li class="menu-item"> &lt;a title=”把这个链接拖到你的工具栏中,任何网页都可以High” href=’javascript:(</li></p><p>function go() {</p><p>var songs = [<br>       “<a href="http://www.170mv.com/kw/other.web.ri01.sycdn.kuwo.cn/resource/n3/43/85/4088203395.mp3" target="_blank" rel="noopener">http://www.170mv.com/kw/other.web.ri01.sycdn.kuwo.cn/resource/n3/43/85/4088203395.mp3</a>“,<br>       “<a href="http://www.170mv.com/kw/other.web.rm01.sycdn.kuwo.cn/resource/n3/10/77/3147640053.mp3" target="_blank" rel="noopener">http://www.170mv.com/kw/other.web.rm01.sycdn.kuwo.cn/resource/n3/10/77/3147640053.mp3</a>“,<br>       “<a href="http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3" target="_blank" rel="noopener">http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3</a>“,<br>       “”<br>];</p><p>function c() {<br>var e = document.createElement(“link”);<br>e.setAttribute(“type”, “text/css”);<br>e.setAttribute(“rel”, “stylesheet”);<br>e.setAttribute(“href”, f);<br>e.setAttribute(“class”, l);<br>document.body.appendChild(e)<br>}</p><p>function h() {<br>var e = document.getElementsByClassName(l);<br>for (var t = 0; t &lt; e.length; t++) {<br> document.body.removeChild(e[t])<br>}<br>}</p><p>function p() {<br>var e = document.createElement(“div”);<br>e.setAttribute(“class”, a);<br>document.body.appendChild(e);<br>setTimeout(function() {<br> document.body.removeChild(e)<br>}, 100)<br>}</p><p>function d(e) {<br>return {<br> height : e.offsetHeight,<br> width : e.offsetWidth<br>}<br>}</p><p>function v(i) {<br>var s = d(i);<br>return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r<br>}</p><p>function m(e) {<br>var t = e;<br>var n = 0;<br>while (!!t) {<br> n += t.offsetTop;<br> t = t.offsetParent<br>}<br>return n<br>}</p><p>function g() {<br>var e = document.documentElement;<br>if (!!window.innerWidth) {<br> return window.innerHeight<br>} else if (e &amp;&amp; !isNaN(e.clientHeight)) {<br> return e.clientHeight<br>}<br>return 0<br>}</p><p>function y() {<br>if (window.pageYOffset) {<br> return window.pageYOffset<br>}<br>return Math.max(document.documentElement.scrollTop, document.body.scrollTop)<br>}</p><p>function E(e) {<br>var t = m(e);<br>return t &gt;= w &amp;&amp; t &lt;= b + w<br>}</p><p>function S() {<br>var e = document.getElementById(“audio_element_id”);<br>if(e != null){<br> var index = parseInt(e.getAttribute(“curSongIndex”));<br> if(index &gt; songs.length - 2) {<br>     index = 0;<br> } else {<br>     index++;<br> }<br> e.setAttribute(“curSongIndex”, index);<br> N();<br>}</p><p>e.src = i;<br>e.play()<br>}</p><p>function x(e) {<br>e.className += “ “ + s + “ “ + o<br>}</p><p>function T(e) {<br>e.className += “ “ + s + “ “ + u[Math.floor(Math.random() * u.length)]<br>}</p><p>function N() {<br>var e = document.getElementsByClassName(s);<br>var t = new RegExp(“\\b” + s + “\\b”);<br>for (var n = 0; n &lt; e.length; ) {<br> e[n].className = e[n].className.replace(t, “”)<br>}<br>}</p><p>function initAudioEle() {<br>var e = document.getElementById(“audio_element_id”);<br>if(e === null){<br> e = document.createElement(“audio”);<br> e.setAttribute(“class”, l);<br> e.setAttribute(“curSongIndex”, 0);<br> e.id = “audio_element_id”;<br> e.loop = false;<br> e.bgcolor = 0;<br> e.addEventListener(“canplay”, function() {<br> setTimeout(function() {<br>     x(k)<br> }, 500);<br> setTimeout(function() {<br>     N();<br>     p();<br>     for (var e = 0; e &lt; O.length; e++) {<br>         T(O[e])<br>     }<br> }, 15500)<br>}, true);<br>e.addEventListener(“ended”, function() {<br> N();<br> h();<br> go();<br>}, true);<br>e.innerHTML = “ </p><p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>“;<br>document.body.appendChild(e);<br>}<br>}</p><p>initAudioEle();<br>var e = 30;<br>var t = 30;<br>var n = 350;<br>var r = 350;</p><p>var curSongIndex = parseInt(document.getElementById(“audio_element_id”).getAttribute(“curSongIndex”));<br>var i = songs[curSongIndex];</p><p>var s = “mw-harlem_shake_me”;<br>var o = “im_first”;<br>var u = [“im_drunk”, “im_baked”, “im_trippin”, “im_blown”];<br>var a = “mw-strobe_light”;</p><p>/<em> harlem-shake-style.css，替换成你的位置，也可以直接使用：//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css </em>/<br>var f = “//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css”;</p><p>var l = “mw_added_css”;<br>var b = g();<br>var w = y();<br>var C = document.getElementsByTagName(“*”);<br>var k = null;<br>for (var L = 0; L &lt; C.length; L++) {<br>var A = C[L];<br>if (v(A)) {<br> if (E(A)) {<br>     k = A;<br>     break<br> }<br>}<br>}<br>if (A === null) {<br>console.warn(“Could not find a node of the right size. Please try a different page.”);<br>return<br>}<br>c();<br>S();<br>var O = [];<br>for (var L = 0; L &lt; C.length; L++) {<br>var A = C[L];<br>if (v(A)) {<br> O.push(A)<br>}<br>}<br>})()’&gt;<i class="menu-item-icon fa fa-music fa-fw"></i>High一下&lt;/a&gt; &lt;/li&gt;<br><!-- end High一下 --></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;这段代码貌似有个bug，在播放曲目为空的时候，博客就会尬舞，退出high一下，刷新界面就好&lt;/p&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 跳动的心</span><br><span class="line">- 在&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 配置如下信息：</span><br></pre></td></tr></table></figure><p>footer:<br>  icon: heart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 打开 `/blog/themes/next/layout/_partials/footer.swig`文件， 将 `&lt;span class=&quot;with-love&quot;&gt;`换成下面代码：</span><br></pre></td></tr></table></figure></p><p><span class="with-love" id="heart"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 打开`/blog/themes/next/source/css/_custom/custom.styl`文件，下面代码(颜色可以自定义)：</span><br></pre></td></tr></table></figure></span></p><p>// 自定义页脚跳动的心样式<br>@keyframes heartAnimate {<br>    0%,100%{transform:scale(1);}<br>    10%,30%{transform:scale(0.9);}<br>    20%,40%,60%,80%{transform:scale(1.1);}<br>    50%,70%{transform:scale(1.1);}<br>}</p><h1 id="heart"><a href="#heart" class="headerlink" title="heart {"></a>heart {</h1><pre><code>animation: heartAnimate 1.33s ease-in-out infinite;</code></pre><p>}<br>.with-love {<br>    color: rgb(255, 113, 168);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 添加404页面</span><br><span class="line">- 在`blog/source/`文件夹下新建`404.html`并加入如下代码：</span><br></pre></td></tr></table></figure></p><p>&lt;!DOCTYPE HTML&gt;</p><p><html></html></p><p><head>  <!-- hexo-inject:begin --><!-- hexo-inject:end --><meta http-equiv="content-type" content="text/html;charset=utf-8;">  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">  <meta name="robots" content="all">  <meta name="robots" content="index,follow">  <link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"><!-- hexo-inject:begin --><!-- hexo-inject:end --></head></p><p><body>  <!-- hexo-inject:begin --><!-- hexo-inject:end --><script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="https://onlychristmas.github.io/" homepagename="回到我的主页">  </script>  <script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"></script>  <script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"></script><!-- hexo-inject:begin --><!-- hexo-inject:end --></body><br>&lt;/html&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 调试优化</span><br><span class="line"></span><br><span class="line">- 在`blog/package.json`中并列`&quot;dependencies&quot;: &#123;&#125;`添加如下代码：</span><br></pre></td></tr></table></figure></p><p>  “scripts”: {<br>    “dev”: “hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server —debug”<br>  }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 现在我们只需 `npm run dev` 一条命令就可以启动本地的调试环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 博客内容压缩</span><br><span class="line"></span><br><span class="line">- 在`blog/package.json`中 `&quot;dependencies&quot;: &#123;&#125;`后面平行的添加如下内容：</span><br></pre></td></tr></table></figure></p><p>“devDependencies”: {<br>  “gulp-asset-rev”: “^0.0.15”,<br>  “gulp-clean-css”: “^3.9.0”,<br>  “gulp-concat”: “^2.6.1”,<br>  “gulp-debug”: “^3.1.0”,<br>  “gulp-htmlclean”: “^2.7.15”,<br>  “gulp-htmlmin”: “^3.0.0”,<br>  “gulp-if”: “^2.0.2”,<br>  “gulp-changed”: “^3.1.0”,<br>  “gulp-make-css-url-version”: “^0.0.13”,<br>  “gulp-modify-css-urls”: “^0.2.2”,<br>  “gulp-plumber”: “^1.1.0”,<br>  “gulp-uglify”: “^3.0.0”,<br>  “gulp-useref”: “^3.1.2”,<br>  “gulp-util”: “^3.0.8”,</p><p>  “hexo-deployer-git”: “^0.3.1”,<br>  “hexo-encrypt”: “^0.5.1”,<br>  “hexo-generator-json-content”: “^3.0.1”,<br>  “hexo-generator-search”: “^2.1.1”,<br>  “hexo-generator-searchdb”: “^1.0.8”,<br>  “hexo-server”: “^0.2.2”,<br>  “run-sequence”: “^2.2.0”<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 然后输入以下命令安装依赖包</span><br></pre></td></tr></table></figure></p><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在`blog/gulpfile.js`中添加如下代码（没有的话则新建）：</span><br></pre></td></tr></table></figure></p><p>/<em>  npm install 超时请使用：(两条命令在当前文件目录下执行)<br>   npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>   npm install<br>   或者：<br>   npm install -g cnpm —registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>   cnpm install</em>/<br>var gulp = require(‘gulp’);<br>var debug = require(‘gulp-debug’);<br>var cleancss = require(‘gulp-clean-css’);   //css压缩组件<br>var cssversion = require(‘gulp-make-css-url-version’);   //css资源添加版本号<br>var uglify = require(‘gulp-uglify’);        //js压缩组件<br>var htmlmin = require(‘gulp-htmlmin’);      //html压缩组件<br>var htmlclean = require(‘gulp-htmlclean’);  //html清理组件<br>var assetRev = require(‘gulp-asset-rev’);   //版本控制插件<br>var runSequence = require(‘run-sequence’);  //异步执行组件<br>var changed = require(‘gulp-changed’);      //文件更改校验组件<br>var gulpif = require(‘gulp-if’)             //任务 帮助调用组件<br>var plumber = require(‘gulp-plumber’);      //容错组件（发生错误不跳出任务，并报出错误内容）<br>var isScriptAll = true;     //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)<br>var isDebug = true;         //是否调试显示 编译通过的文件<br>// 压缩js文件<br>gulp.task(‘compressJs’, function () {<br>    var option = {<br>        // preserveComments: ‘all’,//保留所有注释<br>        mangle: true,           //类型：Boolean 默认：true 是否修改变量名<br>        compress: true          //类型：Boolean 默认：true 是否完全压缩<br>    }<br>    return gulp.src([‘./public/<strong>/*.js’,’!./public/</strong>/<em>.min.js’])  //排除的js<br>        .pipe(gulpif(!isScriptAll, changed(‘./public’)))<br>        .pipe(gulpif(isDebug,debug({title: ‘Compress JS:’})))<br>        .pipe(plumber())<br>        .pipe(uglify(option))                //调用压缩组件方法uglify(),对合并的文件进行压缩<br>        .pipe(gulp.dest(‘./public’));         //输出到目标目录<br>});<br>// 压缩css文件<br>gulp.task(‘compressCss’, function () {<br>    return gulp.src(‘./public/**/</em>.css’)<br>        .pipe(gulpif(!isScriptAll, changed(‘./public’)))<br>        .pipe(gulpif(isDebug,debug({title: ‘Compress CSS:’})))<br>        .pipe(plumber())<br>        .pipe(cleancss({rebase: false}))<br>        .pipe(gulp.dest(‘./public’));<br>});<br>// 压缩html文件<br>gulp.task(‘compressHtml’, function () {<br>    var cleanOptions = {<br>        protect: /&lt;!—%fooTemplate\b.<em>?%—&gt;/g,             //忽略处理<br>        unprotect: /<script [^="">]</em>\btype=”text\/x-handlebars-template”[\s\S]+?&lt;\/script&gt;/ig //特殊处理<br>    }<br>    var minOption = {<br>        collapseWhitespace: true,           //压缩HTML<br>        collapseBooleanAttributes: true,    //省略布尔属性的值  <input checked="true"/> ==&gt; <input /><br>        removeEmptyAttributes: true,        //删除所有空格作属性值    <input id="" /> ==&gt; <input /><br>        removeScriptTypeAttributes: true,   //删除<script>的type=”text/javascript”<br>        removeStyleLinkTypeAttributes: true,//删除<style>和<link>的type=”text/css”<br>        removeComments: true,               //清除HTML注释<br>        minifyJS: true,                     //压缩页面JS<br>        minifyCSS: true,                    //压缩页面CSS<br>        minifyURLs: true                    //替换页面URL<br>    };<br>    return gulp.src(‘./public/<em>*/</em>.html’)<br>        .pipe(gulpif(isDebug,debug({title: ‘Compress HTML:’})))<br>        .pipe(plumber())<br>        .pipe(htmlclean(cleanOptions))<br>        .pipe(htmlmin(minOption))<br>        .pipe(gulp.dest(‘./public’));<br>});<br>// 默认任务<br>gulp.task(‘default’, function () {<br>    runSequence.options.ignoreUndefinedTasks = true;<br>    runSequence(‘compressHtml’,’compressCss’,’compressJs’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 然后我们的上传命令就变成了</span><br></pre></td></tr></table></figure><p>hexo g<br>gulp<br>hexo d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;其实还可以继续偷懒，没办法，就是懒人才能改变世界……在刚才添加的`&quot;devDependencies&quot;: &#123;&#125;`后面平行的添加如下代码&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>  “scripts”: {<br>    “submit”: “hexo clean &amp;&amp; hexo generate &amp;&amp; gulp &amp;&amp; hexo d”<br>  }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这样之后，上传就变为了一条命令`npm run sumbit`&lt;/p&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 自动打开脚本</span><br><span class="line"></span><br><span class="line">- 为了每次新建博文我们可以直接编辑，而不是在一堆文件中找到它再打开。我们需要在博客根目录新建`script`文件夹（已有就不用新建）</span><br><span class="line">- 在新建的文件夹新建一个`.js`文件，其中填写的代码如下所示。[代码来自这里](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)</span><br><span class="line">win用户</span><br></pre></td></tr></table></figure></p><p>var spawn = require(‘child_process’).exec;</p><p>// Hexo 2.x 用户复制这段<br>hexo.on(‘new’, function(path){<br>  spawn(‘start  “markdown编辑器绝对路径.exe” ‘ + path);<br>});</p><p>// Hexo 3 用户复制这段<br>hexo.on(‘new’, function(data){<br>  spawn(‘start  “markdown编辑器绝对路径.exe” ‘ + data.path);<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mac用户</span><br></pre></td></tr></table></figure></p><p>var exec = require(‘child_process’).exec;</p><p>// Hexo 2.x 用户复制这段<br>hexo.on(‘new’, function(path){<br>    exec(‘open -a “markdown编辑器绝对路径.app” ‘ + path);<br>});<br>// Hexo 3 用户复制这段<br>hexo.on(‘new’, function(data){<br>    exec(‘open -a “markdown编辑器绝对路径.app” ‘ + data.path);<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 仓库备份博客</span><br><span class="line">- 依次执行下列命令</span><br></pre></td></tr></table></figure></p><p>git init  # 初始化仓库<br>git remote add origin git@github.com # 从仓库复制你的地址 .git<br>git pull origin master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 在`/blog/`目录下新建`.gitignore`文件（如果没有的话），里面内容如下。主要是为了忽略`./public`等无需备份的文件，加快备份速度。</span><br></pre></td></tr></table></figure></p><p>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 本地写完博客上传后，只要依次运行下列命令就可以备份文件。</span><br></pre></td></tr></table></figure></p><p>git add .<br>git commit -m “更新hexo源文件”<br>git push origin master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。</span><br></pre></td></tr></table></figure></p><p>git pull origin master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 在你的其他电脑，只要`git clone git@github.com #你的仓库地址`就可以同步博客文件了。</span><br><span class="line"></span><br><span class="line">&lt;!-- - &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;有在coding备份代码上传不成功的情况，一种比较懒得解决办法就是将配置好的博客在另一台电脑配置一下，反正我们每次需要同步的文件是以博客为主。&lt;/p&gt;&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 自动备份博客脚本</span><br><span class="line">- 程序员在变懒这件事情上绝对有着永无止境的追求！我们不仅会担心博客本地源文件的丢失，还会烦恼多台电脑文件同步困难。那么我们怎么解决这样的困境呢？</span><br><span class="line">- `npm install --save shelljs`安装这个模块</span><br><span class="line">- 在`/blog/scripts/`文件夹下新建一个js脚本（任意名字）,如果没有`/blog/scripts/`目录，请新建一个。脚本内容如下：&lt;span id=&quot;inline-black&quot;&gt;更改第十七行的内容&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p>require(‘shelljs/global’);</p><p>try {<br>    hexo.on(‘deployAfter’, function() {//当deploy完成后执行备份<br>        run();<br>    });<br>} catch (e) {<br>    console.log(“产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：” + e.toString());<br>}</p><p>function run() {<br>    if (!which(‘git’)) {<br>        echo(‘Sorry, this script requires git’);<br>        exit(1);<br>    } else {<br>        echo(“======================Auto Backup Begin===========================”);<br>        cd(‘####你的地址’);    //此处修改为博客根目录路径<br>        if (exec(‘git add —all’).code !== 0) {<br>            echo(‘Error: Git add failed’);<br>            exit(1);</p><pre><code>    }    if (exec(&#39;git commit -am &quot;Form auto backup script\&#39;s commit&quot;&#39;).code !== 0) {        echo(&#39;Error: Git commit failed&#39;);        exit(1);    }    if (exec(&#39;git push origin master&#39;).code !== 0) {        echo(&#39;Error: Git push failed&#39;);        exit(1);    }    echo(&quot;==================Auto Backup Complete============================&quot;)}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt; 这样在每次`hexo d`命令之后就能自动备份博客到设置好的代码仓库。成功后会显示如下类似内容 &lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>INFO  Deploy done: git<br>======================Auto Backup Begin===========================<br>[master cea81b4] Form auto backup script’s commit<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br>To #你的仓库地址<br>   8f2653b..cea81b4  master -&gt; master<br>==================Auto Backup Complete============================<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt; 此脚本在blog文件夹没有任何改动的情况下会报错，但不会影响上传。 &lt;/p&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 博客自定义写作样式</span><br><span class="line">- 这里从[neveryu的建站日志](https://neveryu.github.io/categories/Hexo/)引用部分代码，放入到`themes/next/source/css/_custom/custom.styl`中,即可生效。</span><br></pre></td></tr></table></figure></p><p>// 下载样式<br>a#download {<br>  display: inline-block;<br>  padding: 0 10px;<br>  color: #000;<br>  background: transparent;<br>  border: 2px solid #000;<br>  border-radius: 2px;<br>  transition: all .5s ease;<br>  font-weight: bold;<br>  &amp;:hover {<br>    background: #000;<br>    color: #fff;<br>  }<br>}</p><p>//阅读全文样式<br>.post-more-link .btn {<br>  position:relative;<br>  border: 2px solid #000;<br>  border-radius: 2px;<br>  padding: 0 10px;<br>  font-weight: bold;<br>  background: transparent;<br>  transition: all .5s ease;<br>  &amp;:hover {<br>    background: #000;<br>    color: #eee;<br>  }<br>}<br>//</p><p>// 颜色块-黄<br>span#inline-yellow {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: #f0ad4e;<br>}<br>// 颜色块-黑<br>span#inline-black {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: black;<br>}<br>// 颜色块-绿<br>span#inline-green {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: #5cb85c;<br>}<br>// 颜色块-蓝<br>span#inline-blue {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: #2780e3;<br>}<br>// 颜色块-紫<br>span#inline-purple {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: #9954bb;<br>}<br>// 颜色块-红<br>span#inline-red {<br>  display:inline;<br>  padding:.2em .6em .3em;<br>  font-size:80%;<br>  font-weight:bold;<br>  line-height:1;<br>  color:#fff;<br>  text-align:center;<br>  white-space:nowrap;<br>  vertical-align:baseline;<br>  border-radius:0;<br>  background-color: #df3e3e;<br>}</p><p>// 左侧边框红色块级<br>p#div-border-left-red {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-left-width: 5px;<br>  border-radius: 3px;<br>  border-left-color: #df3e3e;<br>}<br>// 左侧边框黄色块级<br>p#div-border-left-yellow {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-left-width: 5px;<br>  border-radius: 3px;<br>  border-left-color: #f0ad4e;<br>}<br>// 左侧边框绿色块级<br>p#div-border-left-green {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-left-width: 5px;<br>  border-radius: 3px;<br>  border-left-color: #5cb85c;<br>}<br>// 左侧边框蓝色块级<br>p#div-border-left-blue {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-left-width: 5px;<br>  border-radius: 3px;<br>  border-left-color: #2780e3;<br>}<br>// 左侧边框紫色块级<br>p#div-border-left-purple {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-left-width: 5px;<br>  border-radius: 3px;<br>  border-left-color: #9954bb;<br>}<br>// 右侧边框红色块级<br>p#div-border-right-red {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-right-width: 5px;<br>  border-radius: 3px;<br>  border-right-color: #df3e3e;<br>}<br>// 右侧边框黄色块级<br>p#div-border-right-yellow {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-right-width: 5px;<br>  border-radius: 3px;<br>  border-right-color: #f0ad4e;<br>}<br>// 右侧边框绿色块级<br>p#div-border-right-green {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-right-width: 5px;<br>  border-radius: 3px;<br>  border-right-color: #5cb85c;<br>}<br>// 右侧边框蓝色块级<br>p#div-border-right-blue {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-right-width: 5px;<br>  border-radius: 3px;<br>  border-right-color: #2780e3;<br>}<br>// 右侧边框紫色块级<br>p#div-border-right-purple {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-right-width: 5px;<br>  border-radius: 3px;<br>  border-right-color: #9954bb;<br>}<br>// 上侧边框红色<br>p#div-border-top-red {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-top-width: 5px;<br>  border-radius: 3px;<br>  border-top-color: #df3e3e;<br>}<br>// 上侧边框黄色<br>p#div-border-top-yellow {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-top-width: 5px;<br>  border-radius: 3px;<br>  border-top-color: #f0ad4e;<br>}<br>// 上侧边框绿色<br>p#div-border-top-green {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-top-width: 5px;<br>  border-radius: 3px;<br>  border-top-color: #5cb85c;<br>}<br>// 上侧边框蓝色<br>p#div-border-top-blue {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-top-width: 5px;<br>  border-radius: 3px;<br>  border-top-color: #2780e3;<br>}<br>// 上侧边框紫色<br>p#div-border-top-purple {<br>  display: block;<br>  padding: 10px;<br>  margin: 10px 0;<br>  border: 1px solid #ccc;<br>  border-top-width: 5px;<br>  border-radius: 3px;<br>  border-top-color: #9954bb;<br>}</p><p>//动画模块<br>//第一篇博客中-精于心，简于形-的动画（<a href="https://neveryu.github.io/page/2/）">https://neveryu.github.io/page/2/）</a><br>span#top-down-samll {<br>  display:inline;<br>  position:relative;<br>  border-top:1px solid #222;<br>  border-bottom:1px solid #222;<br>  font-size:110%;<br>  cursor:pointer;<br>  &amp;:hover {<br>    background-color: #000;<br>    color: #fff;<br>    animation: animate-yu-1 3s ease-in;<br>  }<br>}<br>@keyframes animate-yu-1 {<br>  0% {<br>    left:-10px;<br>    top:0px;<br>  }<br>  10% {<br>    left:10px;<br>    top:0px;<br>  }<br>  20% {<br>    left:-8px;<br>    top:0px;<br>  }<br>  30% {<br>    left:8px;<br>    top:0px;<br>  }<br>  40% {<br>    left:-5px;<br>    top:0px;<br>  }<br>  50% {<br>    left:5px;<br>    top:0px;<br>  }<br>  60% {<br>    left:-3px;<br>    top:0px;<br>  }<br>  70% {<br>    left:3px;<br>    top:0px;<br>  }<br>  80% {<br>    left:-1px;<br>    top:0px;<br>  }<br>  90% {<br>    left:1px;<br>    top:0px;<br>  }<br>  100% {<br>    left:0px;<br>    top:0px;<br>  }<br>}<br>//留言页面-[最近访客]-的样式<br>span#top-down {<br>  display:inline;<br>  position:relative;<br>  border-top:1px solid #222;<br>  border-bottom:1px solid #222;<br>  font-size:130%;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">###  写作辅助</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### 新建文件类型</span><br><span class="line"></span><br><span class="line">- `hexo new post &quot;title&quot;` 用来创建新文章</span><br><span class="line">- `hexo new page &quot;title&quot;` 用来创建新菜单页面</span><br><span class="line">- `hexo new draft &quot;title&quot;` 用来创建新草稿</span><br><span class="line">- `hexo new &quot;title&quot;` 用来创建新文章(默认)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 关于目录</span><br><span class="line">- 目录的层级靠`###`和`####`来维护，相差几个#就是相差几级的目录。</span><br><span class="line">- 目录的最高层级为`##`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 主题自带样式 note 标签</span><br><span class="line">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;首先要在&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 配置如下信息：&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Note-tag-bs-callout"><a href="#Note-tag-bs-callout" class="headerlink" title="Note tag (bs-callout)."></a>Note tag (bs-callout).</h1><p>note:</p><h1 id="Note-tag-style-values"><a href="#Note-tag-style-values" class="headerlink" title="Note tag style values:"></a>Note tag style values:</h1><h1 id="simple-bs-callout-old-alert-style-Default"><a href="#simple-bs-callout-old-alert-style-Default" class="headerlink" title="- simple    bs-callout old alert style. Default."></a>- simple    bs-callout old alert style. Default.</h1><h1 id="modern-bs-callout-new-v2-v3-alert-style"><a href="#modern-bs-callout-new-v2-v3-alert-style" class="headerlink" title="- modern    bs-callout new (v2-v3) alert style."></a>- modern    bs-callout new (v2-v3) alert style.</h1><h1 id="flat-flat-callout-style-with-background-like-on-Mozilla-or-StackOverflow"><a href="#flat-flat-callout-style-with-background-like-on-Mozilla-or-StackOverflow" class="headerlink" title="- flat      flat callout style with background, like on Mozilla or StackOverflow."></a>- flat      flat callout style with background, like on Mozilla or StackOverflow.</h1><h1 id="disabled-disable-all-CSS-styles-import-of-note-tag"><a href="#disabled-disable-all-CSS-styles-import-of-note-tag" class="headerlink" title="- disabled  disable all CSS styles import of note tag."></a>- disabled  disable all CSS styles import of note tag.</h1><p>  style: flat<br>  icons: true<br>  border_radius: 3</p><h1 id="Offset-lighter-of-background-in-for-modern-and-flat-styles-modern-12-12-flat-18-6"><a href="#Offset-lighter-of-background-in-for-modern-and-flat-styles-modern-12-12-flat-18-6" class="headerlink" title="Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6)."></a>Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</h1><h1 id="Offset-also-applied-to-label-tag-variables-This-option-can-work-with-disabled-note-tag"><a href="#Offset-also-applied-to-label-tag-variables-This-option-can-work-with-disabled-note-tag" class="headerlink" title="Offset also applied to label tag variables. This option can work with disabled note tag."></a>Offset also applied to label tag variables. This option can work with disabled note tag.</h1><p>  light_bg_offset: 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;</span><br></pre></td></tr></table></figure></p><p>default灰色样式调用方式 <code>&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;</code><br>primary紫色样式调用方式 <code>&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;</code><br>success绿色样式调用方式 <code>&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;</code><br>info蓝色样式调用方式 <code>&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;</code><br>warning橙色样式调用方式 <code>&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;</code><br>danger红色样式调用方式 <code>&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;</code><br>danger no-icon红色无图标样式调用方式 <code>&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;/p&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;note default&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;  just try  &lt;/p&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 自定义数字块</span><br><span class="line">- `~/themes/next/source/css/_custom/custom.styl`中添加下列代码：</span><br></pre></td></tr></table></figure></p><p>// 自定义的数字块<br>    span#inline-toc {<br>    display: inline-block;<br>    border-radius: 80% 100% 90% 20%;<br>    background-color: rgb(227, 242, 253);<br>    color: #555;<br>    padding: 0.05em 0.4em;<br>    margin: 2px 5px 2px 0px;<br>    line-height: 1.5;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 这是调用方式`&lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt;`和样式展示 &lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 自定义颜色块</span><br><span class="line"></span><br><span class="line">自定义的**颜色块**标签，这么用: &lt;span id=&quot;inline-yellow&quot;&gt;yellow&lt;/span&gt;&lt;span id=&quot;inline-black&quot;&gt;black&lt;/span&gt;&lt;span id=&quot;inline-green&quot;&gt;green&lt;/span&gt;&lt;span id=&quot;inline-blue&quot;&gt;blue&lt;/span&gt;&lt;span id=&quot;inline-red&quot;&gt;red&lt;/span&gt;&lt;span id=&quot;inline-purple&quot;&gt;purple&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p><span id="inline-purple">颜色块标签内容</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&apos;div-border-right-red&apos;&gt; 块级框该这么用（自定义的比Next主题内置的优化要更加清晰好用）:&lt;/p&gt;</span><br><span class="line">&lt;p id=&apos;div-border-top-red&apos;&gt; 上侧块级框总共5个类型 &lt;/p&gt;</span><br><span class="line">&lt;p id=&apos;div-border-left-red&apos;&gt; 类似的，侧边块级框比颜色块少一个黑色，分左右两种，总共十个类型 &lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p><p id='div-border-left-red'>  </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;span id=&quot;top-down&quot;&gt;文字的上下加横线&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p><span id="top-down">文字的上下加横线</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;span id=&quot;top-down-samll&quot;&gt;鼠标放这里有惊喜&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><p><span id="top-down-samll">小一号文字，上下加横线</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 文本居中</span><br><span class="line">&#123;% cq %&#125;</span><br><span class="line">人生乃是一面镜子，</span><br><span class="line">从镜子里认识自己，</span><br><span class="line">我要称之为头等大事，</span><br><span class="line">也只是我们追求的目的！</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><p>```</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></li><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html">Hexo的Hnext主题个性化教程(33个小优化)</a></li><li><a href="https://neveryu.github.io/categories/Hexo/">neveryu的建站日志</a></li><li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/">thief的建站日志</a></li><li><a href="http://dinghongkai.com/2017/12/19/Blog-development-6-Customized-Style-of-Writing/">很好的写作辅助</a></li></ul></script></em></p>]]></content>
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github-pages </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> Web-design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【NLP competition】中文信息学会 文本溯源技术评测（SMP ETST）Ranking First</title>
      <link href="/2018/07/09/%E3%80%90NLP%E6%AF%94%E8%B5%9B%E3%80%91%E4%B8%AD%E5%9B%BD%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%AD%A6%E4%BC%9A%E6%96%87%E6%9C%AC%E6%BA%AF%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B%EF%BC%88SMP-ETST%EF%BC%89Ranking-First/"/>
      <url>/2018/07/09/%E3%80%90NLP%E6%AF%94%E8%B5%9B%E3%80%91%E4%B8%AD%E5%9B%BD%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%AD%A6%E4%BC%9A%E6%96%87%E6%9C%AC%E6%BA%AF%E6%BA%90%E6%8A%80%E6%9C%AF%E8%AF%84%E6%B5%8B%EF%BC%88SMP-ETST%EF%BC%89Ranking-First/</url>
      <content type="html"><![CDATA[<p>此次的文本溯源项目我们以n-gram为核心思想，构建候选句子对的评测标准。<br>用TF-IDF和词袋模型的的思想来预筛选候选句子对，大大提升算法效率。<br>最后用了两种切词方式的模型融合和规则后处理（提升很小）。<br><a href="https://biendata.com/competition/smpetst2018/final-leaderboard/" target="_blank" rel="noopener">Final-Leaderboard Ranking First</a></p><a id="more"></a><hr><p><strong><em>2018.07.24更新</em></strong><br>经过组委会测试算法的高效性和原创性，我们最终获得了SMP-ETSE测评的第一名。<br><a href="http://smp2018.cips-smp.org/rewards.html" target="_blank" rel="noopener">最终获奖名单</a><br><a href="http://smp2018.cips-smp.org/smpcup.html" target="_blank" rel="noopener">评测任务介绍</a><br><a href="https://github.com/OnlyChristmas/SMP-ETST-2018" target="_blank" rel="noopener">测评代码开源</a></p><hr><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>以前没有参加过NLP类型的比赛和测评，每天看论文想idea的日子有些许的枯燥和单调。<br>就和一个同学趁着期末考试复习期间（实力作死）的空闲时间，抽出时间玩了玩这个比赛。<br><a href="http://smp2018.cips-smp.org/smpcup.html" target="_blank" rel="noopener">SMP 2018 测评地址</a></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>本次的文本溯源题目和同期的另外两个比赛其实很相似。<br><a href="https://dc.cloud.alipay.com/index#/topic/intro?id=3" target="_blank" rel="noopener">蚂蚁金服计算句子相似度</a><br><a href="https://ai.ppdai.com/mirror/goToMirrorDetail?mirrorId=1&amp;tabindex=1" target="_blank" rel="noopener">拍拍贷识别相似的问题句子</a><br>但文本溯源又和另外两个题有着本质的不同，因为主办方放出的数据并没有任何标签。很明显，我们需要一个无监督的算法来找到<strong>句子之间的潜在语义关系</strong>，红的发紫的深度学习在此没有用武之地。<br>恐怕这也是为什么这个测评的参加人数如此之少的主要原因吧。</p><ul><li>验证集<ul><li>待溯源句子1000</li><li>候选句子约10W</li></ul></li><li>测试集<ul><li>待溯源句子4000</li><li>候选句子约500W</li></ul></li></ul><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>根据我们之前的一些经验，探讨两个句子之前的相似性的时候，n-gram就是一个简单，并且行之有效的方法。这也是我们最早的想法。</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>另一个想法，传统的NLP parsing技术在理论上会比简单的n-gram 方法更好的分析句子结构，从而帮助计算机理解句子语义，找到对应的句子。<br>但是，整个代码构建工程量大，实现难度较高。</p><p>我们的当然要从简单的第一种思路入手尝试。（也是我们最后采用的方案）</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>按照思路一构建一个简单的baseline，在没有调参和仔细预处理之前，在验证集上取得了<em>0.8737</em> 的成绩，这也给了我们继续这一方法的信心。</p><p>随后我们反过头来仔细进行预处理。</p><ul><li>处理影响分词效果的杂乱字符<ul><li>直接删除</li><li>将他们替换为空格</li></ul></li><li>对于数据进行全半角格式转换（计算机并不认为相同字符的全半角格式是一样的字符）</li></ul><p>符号预处理之后，在验证集获得了<em>0.9008</em>的表现 ，<br>然后又轻微调参（根据不等式，我们知道，P、R相等的时候，F值表现会是最好的），验证集表现上涨到了<em>0.9087</em>。</p><h3 id="切词"><a href="#切词" class="headerlink" title="切词"></a>切词</h3><p>在预处理方面，切词是最令人头疼的第一个地方。<br>我们有了很多开源的切词工具，最终选了用了<a href="http://thulac.thunlp.org/" target="_blank" rel="noopener">thulac</a>和<a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">jieba</a>两种。</p><p>我们发现这两种切词方法的本身都有一定的局限性，但是又有一定的互补性。<br>虽然用两种切词工具在时间上会对花费很多，但是为了更好的算法效果，我们采用两种切词方式（后来想想好像有点亏，这样的处理大约只能带来一个点的提升，但花费了大量的时间）。</p><p>python 代码运行效率的低效众所周知，对于测试集500W句子的数据量来说，可谓是十分头疼。</p><p>解决方式也很简单，直接调用两种切词方法的c++接口就好了。就可以体验飞一般的速度。</p><p>值得注意的是，<a href="http://thulac.thunlp.org/" target="_blank" rel="noopener">thulac</a> 的切词包在大数据量的情况下，会有崩溃的情况，原因未知。我们的处理方式是将500W数据切分成了四份，调用四次thulac的c++接口（多了三次的model载入时间），切词后再将所有数据合并起来。</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>n-gram 方法固然简单高效，但也很容易想到一个缺陷。我们不应该对于所有的gram“一视同仁”！</p><p>所以我们建立了TF-IDF，根据每个词语在文档中的几个句子中出现，设立TF。<br>并且设立反向的IDF，为了不同频次的词语反向加权。</p><p>这使我们的验证集F值表现达到了<em>0.9356</em>。</p><h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>对于深度学习，大家都知道。当我们的loss和最后的评价指标越相近的时候，模型的训练效果也往往是更好的。</p><p>一个简单的n-gram 通常是仅仅考虑精确率，我们为什么不进一步的考虑召回率呢？甚至直接对于F值进行优化？<br><a href="http://www.aclweb.org/anthology/W14-3348" target="_blank" rel="noopener">这里有一篇ACL2014的文章作为参考</a></p><p>这样的优化操作之后，我们的验证集表现达到了<em>0.9430</em></p><h3 id="倒排索引（词袋模型）"><a href="#倒排索引（词袋模型）" class="headerlink" title="倒排索引（词袋模型）"></a>倒排索引（词袋模型）</h3><p>以上主要是在算法精度上的优化，并且没有可以的优化算法效率。导致我们在每一次对齐的时候都要对10W数据做遍历比较……</p><p>为了使算法快点出结果，我们用了多进程的方法，但这显然不是长久之计。</p><p>经过观察发现。10W句子中的绝大多数句子，算法评价两个句子的相关性，都极低，对于我们的溯源任务造不成任何干扰，那么如何去掉他们呢？</p><p>不难想到，我们的算法基于n-gram，而对齐表现差的句子显然和目标句子重合的n-gram非常少。那么，我们为什么不讲这样的句子直接过滤掉呢？可以减少句子对的评价次数几百倍，大大提升算法运行效率！</p><p>具体的，我们首先用one gram对句子进行过滤（候选句子中连一个词语都没有出现在目标句子中，全部去掉不考虑）；进一步的，还可以对 two gram 设定一定的阈值。让我们在算法精度和运行速度上进行权衡。</p><p>最终，我们算法经过此处理后。在10W验证集上的表现，从单进程<em>500min</em>缩短为了<em>40s</em> 以下，还没有损失精度！</p><h3 id="模型融合-amp-后处理"><a href="#模型融合-amp-后处理" class="headerlink" title="模型融合 &amp; 后处理"></a>模型融合 &amp; 后处理</h3><p>以上提到了两种切词方式，以及两种预处理方式。为了取得更好的算法效果。我们从它们排列组合后的四种方法中挑取了两个互补性较强的model进行模型融合。<br>验证集达到了<em>0.9549</em>的数值水准。</p><p>然后我们肉眼观察一些阈值附近的“疑似”对齐错误的句子。建立几个规则性的后处理操作。<br>验证集达到了<em>0.96036</em>的数值水准。</p><h3 id="最终测试集结果"><a href="#最终测试集结果" class="headerlink" title="最终测试集结果"></a>最终测试集结果</h3><ol><li><p>硬件环境</p><ul><li>Intel(R) Xeon(R) CPU E5-2697 v4 @ 2.30GHz</li><li>内存 188 GB</li><li>Linux version 3.10.0-514.el7.x86_64 ，</li><li>gcc version 4.8.5 20150623 (Red Hat 4.8.5-11)</li><li>Python 3.4.5 ，numpy</li></ul></li><li><p>运行时间参考</p><ul><li>预处理时间共 1267秒 （21.1分钟)<ul><li>符号处理 &amp; 编码格式转换：218秒</li><li>THULAC分词（c++版本）：272秒</li><li>jieba分词（c++版本）：112秒</li><li>计算TF-IDF 164秒</li><li>建立倒排索引表 501秒</li></ul></li><li>核心算法：115秒 (1.9分钟）</li></ul></li><li><p>最后数值表现</p><ul><li>F1-Measure ： 0.801258108905052</li><li>Precision： 0.7133356667833392</li><li>Recall ： 0.9139013452914798</li><li>Ranking： <strong>First</strong></li></ul></li></ol><hr><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>虽然时间紧迫，经验不足。在比赛中和队友都有一些失误，但最终侥幸排名第一。</p><ul><li><p>做的不够好的地方：</p><ul><li>预处理不够精细</li><li>切词处理没有去增加一个字典</li><li>懒得去寻找同义词源，或者训练一个词语级别的翻译模型。理论上可以进一步提高算法表现。</li><li>由于留给测试集出结果的时间只有24h，事先准备的代码不够充分。</li><li>在测试集阈值设定的时候陷入了思维误区，算法最终的F值结果损失精度百分之三以上。</li></ul></li><li><p>做得比较好的地方：</p><ul><li>基本的n-gram 思路简单而高效。</li><li>TF-IDF使算法的评价方式更加合理。</li><li>倒排索引是使算法高效，简洁。</li><li>艰苦卓绝的后处理和肉眼调参……</li></ul></li></ul><p>最后：感谢队友这些天的付出，也感谢努力的自己。</p>]]></content>
      
      <categories>
          
          <category> NLP </category>
          
          <category> Competition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Paraphrase </tag>
            
            <tag> N-gram </tag>
            
            <tag> Segment </tag>
            
            <tag> Information-retrieval </tag>
            
            <tag> BoW </tag>
            
            <tag> Inverted-index </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
