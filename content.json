{"meta":{"title":"Cape of Good Hope","subtitle":"I miss you","description":"I'm not only Christmas，I'm also a captain.","author":"Christmas","url":"https://imbowei.com"},"pages":[{"title":"","date":"2018-07-11T03:19:47.000Z","updated":"2018-08-10T03:37:36.000Z","comments":false,"path":"about/index.html","permalink":"https://imbowei.com/about/index.html","excerpt":"","text":"It was the best of times, it was the worst of times. About meI am now a Master student.My major research focuses on Data Mining and Natural Language Processing.More specifically, I am now conducting research into semantic parsing and paraphrase. Contact me Blog: Imbowei.com Email: m_christmas@qq.com GitHub: OnlyChristmas"},{"title":"categories","date":"2016-09-05T15:41:55.000Z","updated":"2018-08-10T03:37:36.000Z","comments":false,"path":"categories/index.html","permalink":"https://imbowei.com/categories/index.html","excerpt":"","text":""},{"title":"top","date":"2018-07-16T07:55:01.000Z","updated":"2018-08-10T03:37:36.000Z","comments":false,"path":"top/index.html","permalink":"https://imbowei.com/top/index.html","excerpt":"","text":"AV.initialize(\"CYiT0KdkmU0LEo3kFuLb4TPP-gzGzoHsz\", \"6RIqigijTviGwWrSUQgaVMP7\"); var time=0 var title=\"\" var url=\"\" var query = new AV.Query('Counter'); query.notEqualTo('id',0); query.descending('time'); query.limit(1000); query.find().then(function (todo) { for (var i=0;i"},{"title":"tags","date":"2016-09-05T15:41:32.000Z","updated":"2018-08-10T03:37:36.000Z","comments":false,"path":"tags/index.html","permalink":"https://imbowei.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何写好学术论文？","slug":"How-to-write-a-great-paper","date":"2018-09-29T12:09:59.000Z","updated":"2018-09-30T00:54:29.928Z","comments":true,"path":"2018/09/29/How-to-write-a-great-paper/","link":"","permalink":"https://imbowei.com/2018/09/29/How-to-write-a-great-paper/","excerpt":"Since the last submission was rejected, I studied how to write English papers. The details are summarized as follows.","text":"Since the last submission was rejected, I studied how to write English papers. The details are summarized as follows. Several Suggestions for writing academic papers Don’t wait: Just write Your idea -&gt; Write paper -&gt; Do research(Forces us to be clear, focused) Do not be intimidated Identify your key idea A re-usable insight, useful to the reader(one clear, sharp idea) You want to infect the mind of your reader with your idea, like a virus. Papers are far more durable than programs. Tell one story(Your narrative flow) Do not assume that the reader wants to read your paper. You have to convince the reader to keep reading at every paragraph. Before switching sections, always have the last paragraph of the previous one introduce it. More importantly, explain why the next section is needed. Do not say “Here are some guarantees from our algorithm”. Introduce and justify its existence first. Here is a problem It’s an interesting problem It’s an unsolved problem Here is my idea My idea works(details , data) Here’s how my idea compares to other people’s approaches Nail your contributions to the mast Write the list of contributions（The major contributions of this paper are summarized as follows:） Do not leave the reader to guess what your contributions are! The list of contributions drives the entire paper: the paper substantiates the claims you have made Reader thinks “gosh, if they can really deliver this, that’s be exciting; I’d better read on” A brief description of each point in one or two sentences. Related work: later The most important thing in the whole paper is my own point of view, put in front. Fallacy: To make my work look good, I have to make other people’s work look bad. Put your readers first Remember: Explain it as if you were speaking to someone using a whiteboard Conveying the intuition is primary, not secondary Introduce the problem Your idea Using EXAMPLES and only then present the general case Do not recapitulate your personal journey of discovery. This route may be soaked with your blood, but that is not interesting to the reader. Instead, choose the most direct route to the idea. Once your reader has the intuition, she can follow the details (but not vice versa) Even if she skips the details, she still takes away something valuable Listen to your readers Getting help Each reader can only read your paper for the first time once! So use them carefully Explain carefully what you want (“I got lost here” is much more important than “Jarva is mis-spelt”.) Treat every review like gold dust Be (truly) grateful for criticism as well as praise Read every criticism as a positive suggestion for something you could explain more clearly DO NOT respond “you stupid person, I meant X” INSTEAD: fix the paper so that X is apparent even to the stupidest reader. Thank them warmly. They have given up their time for you. Language and Style Submit by the deadline Keep to the length restrictions Always use a spell checker Give strong visual structure to your paper using Figures and their captions are the first thing the reader will see! Make them self-contained, with extremely concise and clear captions, saying what they mean and their conclusion. Find out how to draw pictures, and use them Use the active voice（Use “we” as the subject） Use simple, direct language Finish the paper 2 weeks before actual deadline Add colourized TODO notes (different colour for each author) in the document using \\newcommand. This way you can easily remove them to generate a draft for submission. When there’s a paper you like, take literally notes, and try to understand why you liked reading it! Paper Structure Framing research problems (conference paper) Title (1000 readers) Abstract (4 sentences, 100 readers) Do you have a clear problem statement in the abstract? Can you write a research statement for your paper in a single sentence? The “one thing” is stated in the first two lines of the abstract..…(two sentences) Introduction (1 page, 100 readers) Describe the problem Use an example to introduce the problem Transform the sentence pattern and have a simple description of the problem, not a straightforward description. “To the best of our knowledge, balabala……” State your contributions My idea(model) (2 pages, 10 readers) The details(experiments) (4 pages, 3 readers) Related work (1-2 pages, 10 readers) Conclusions and further work (0.5 pages) Good papers leave the reader with one solution to solving a specific problem; great papers leave the reader with new ideas for their own problems. Don’t leave it up to your reader, always ask yourself “what have I learned” and make that explicit. ​ Ideal process Write a rough 2-4 sentence abstract first (what, why, how) Write the Model description next. This is easy, it’s the idea you’re trying out. Then write the Experimental section (ie get the results). Add your results tables, create your graphs. Then write the Discussion &amp; Conclusion sections (what did we learn from this?) Finally write the Introduction (expand #1 by framing the research question, and introducing relevant background work) Write the Abstract last. ReferencesSimon Peyton Jones’s 7 simple suggestions","categories":[{"name":"Academic","slug":"Academic","permalink":"https://imbowei.com/categories/Academic/"},{"name":"Writing","slug":"Academic/Writing","permalink":"https://imbowei.com/categories/Academic/Writing/"}],"tags":[{"name":"Write-a-paper","slug":"Write-a-paper","permalink":"https://imbowei.com/tags/Write-a-paper/"},{"name":"Conference-papers","slug":"Conference-papers","permalink":"https://imbowei.com/tags/Conference-papers/"}]},{"title":"配置便捷的开发环境（PyCharm & Jupyter）","slug":"Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook","date":"2018-09-17T11:39:43.000Z","updated":"2018-09-20T14:51:18.532Z","comments":true,"path":"2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/","link":"","permalink":"https://imbowei.com/2018/09/17/Configuring-the-best-development-environment-with-pycharm-and-jupyter-notebook/","excerpt":"由于在PyCharm中进行统计整理数据、画图等操作有诸多的不便。在本地的jupyter notebook进行处理又显得步骤繁琐（传输文件），故萌生在服务器搭建jupyter notebook的想法。两种工具优势互补，从而最大程度上集中注意力在项目本身，提升开发效率。","text":"由于在PyCharm中进行统计整理数据、画图等操作有诸多的不便。在本地的jupyter notebook进行处理又显得步骤繁琐（传输文件），故萌生在服务器搭建jupyter notebook的想法。两种工具优势互补，从而最大程度上集中注意力在项目本身，提升开发效率。 “工欲善其事，必先利其器”，接下来看看如何用PyCharm和Jupyter配置最便捷的python开发环境。 PyCharm 一打开软件界面，满满的科幻感迎面扑来。用色块构建的魔幻画面好似一张变形金刚的面庞。最新的版本加入了默认的Vim编辑模式，让强大的PyCharm更如猛虎添翼一般。 基础配置打开设置界面的快捷键是Ctrl+Alt+S。 背景色：软件默认的背景是白色的，这显然不符合我们广大程序员的审美。File -&gt; Appearance &amp;Behaior -&gt; Appearance 中可以修改， Darcula 是常用的黑色主题。 字体：不出意外的话，你会认为它的字体有些小。File -&gt; Editor -&gt; Font 中可以放大，console中的代码和编辑区的代码设置方式类似。 主题：如果对默认主题的配色不满意，可以在 File -&gt; Editor -&gt; Color Scheme 中修改。 代码风格：在 File -&gt; Editor -&gt; Code Style 中，可以对不同类型的代码文件可以分别进行个性化设置。 代码模板懒人改变世界，而程序员往往都很懒。。。能让计算机手工完成的内容绝对不会自己动手重复添加。 不难发现，在程序开发过程中，有一些代码基本没有变化，而且我们会经常性的重复使用。那么，这种傻傻很麻烦的事情最适合计算机来自动完成了。显然，开发PyCharm的程序员小哥想到了这一用户痛点。 在 File -&gt; Editor -&gt; File and Code Templates 中，我们可以将常用的文件类型中的一些常用代码写入该类型文件的默认模板中，例如。 1# -*- coding: utf-8 -*- 除此之外，还可以在文件开头添加一些注释信息。如下所示： 版本控制一个好的开发环境不可能没有版本控制系统。 PyCharm内置了CVS、Git、Mercurial、Subversion等多种版本控制工具，我们只需要简单的配置即可使用。 从github上Clone 代码，上传保存，进行版本控制，多人协同开发，统统可以在软件内轻松地完成。 远程调试这是一个超级良心的免费功能，我相信即使这个功能收费，也会有很多程序员小哥继续使用PyCharm。在其他的地方写代码，我们都需要在本地调试好，再上传服务器。出问题后，再次修改，再次上传，非常浪费时间。那么如何简化本地代码和服务器代码之间的沟通工作呢？PyCharm也帮我们内置好了。 在Tools -&gt; Deployment -&gt; Configurtion中可以配置好多台服务器，如果服务器中的python环境配置良好，我们就不需要再单独在本地配置一遍。配置如下所示： 在对应的位置填写好服务器的位置，自己的用户名和密码，以及想要打开的根目录（节省重复打开文件夹的时间）。 第二个选项卡Mappings中配置本地项目和服务器项目对应的映射关系。这里有个需要注意的地方，建议只将代码和训练语料分开存储，不要使训练语料成为映射项目的一部分，加快加载速度。在第一次配置好开发环境的时候，需要将服务器的一些文件下载到本地，需要稍等几分钟，以后就很幸福了！ 在Tools -&gt; Deployment -&gt; Configurtion中选择本地文件的上传方式，我这里将Ctrl+S设置为本地保存并上传服务器。 Jupyter-notebook对于jupyter notebook来说，它的缺点还是十分明显的。没有一个很好的框架，不能清晰的构建大型项目。也不曾拥有IDECtrl+点击函数名就可以跳转的方便功能，导致阅读代码吃力。 但同样的，它的对于PyCharm的优点也是无可替代的。 PyCharm简直是一个科学计算的神奇，在做数据挖掘的时候，代码和报告（支持latex公式）高度融合，无需二次撰写。 在处理数据的时候，所有中间结果不会被擦除，都显示在对应的cell下面。方便调试，减轻记忆的工作量。 方便的图表展示，不像PyCharm那样，会新弹出一个窗口展示图片，图文融合在一起。 丰富的插件支持，高度自定义。 等等…… 虽然优点众多，但如果只能在本地运行也只能算是鸡肋。经常将工程中的部分文件从服务器传输到本地再分析，这是一件很累人的事情。 服务器jupyter搭建 首先保证我们的linux服务器的python(Anaconda)环境已经配置好了。 打开Ipython,输入如下两行代码后，会生成一个字符串，例如”sha1:9305015210b4:32cad364c85e7f7a13b9efa137cfadf633cc62d“。请复制出来暂时保存，稍后会使用。 12from notebook.auth import passwdpasswd() 如果~/.jupyter路径下没有 jupyter_notebook_config.py ，则输入如下命令新建它。 1jupyter notebook --generate-config 新产生的文件中的所有内容都以注释的形式存在，直接在文件末尾加入如下几行代码，并根据自己的环境调整路径。 12345c.NotebookApp.ip = &apos;*&apos; # 允许访问此服务器的 IP，星号表示任意 IPc.NotebookApp.password = u&apos;sha1:xxx:xxx&apos; # 之前生成的密码 hash 字串c.NotebookApp.open_browser = False # 运行时不打开本机浏览器c.NotebookApp.port = 12035 # 使用的端口c.NotebookApp.enable_mathjax = True # 启用 MathJax 由于大家公用的服务器，我并没有管理员权限，不能将jupyter notebook添加为系统级别的服务。我们只需执行如下命令就可以方便的在本地调用jupyter notebook了(服务器不会经常重启)。 1nohup jupyter notebook &gt; notebook.file 2&gt;&amp;1 &amp; 调用方式：在本地浏览器中输入`服务器地址:设置的端口号`即可。例如：165.32.65.109:7060 Jupyter 优化 感谢造轮子的大佬 jupyter-themes ，为优化jupyter 做了一个很好的包。 更换主题 对于程序员来说，Jupyter默认的白色背景不是很友好，为了和黑色的Pycharm更加搭配，可以先执行如下命令安装其他主题 pip install jupyterthemes --user 安装好之后的操作很简单，如下例所示。 1234567891011121314151617# list available themes# onedork | grade3 | oceans16 | chesterish | monokai | solarizedl | solarizedd# 列出所有可用的主题jt -l# select theme...# jt -t 主题名jt -t chesterish# restore default theme# NOTE: Need to delete browser cache after running jt -r# If this doesn&apos;t work, try starting a new notebook session.# 恢复默认主题jt -r# 更改主题，改变代码字体，改变代码大小，改变cell占屏幕宽度，jt -t oceans16 -f fira -fs 12 -cellw 90% 自动代码补全 虽然Jupyter也可以代码补全，但是总是需要多此一举的按一个Tab键，与PyCharm风格不搭配。 方法一：执行ipython profile create 命令， vim ~/.ipython/profile_default/ipython_config.py，修改成如下样子。重启jupyter后生效 1234567891011121314## Activate greedy completion PENDING DEPRECTION. this is now mostly taken care# of with Jedi.## This will enable completion on elements of lists, results of function calls,# etc., but can be unsafe because the code is actually evaluated on TAB.c.Completer.greedy = True## Experimental: restrict time (in milliseconds) during which Jedi can compute# types. Set to 0 to stop computing types. Non-zero value lower than 100ms may# hurt performance by preventing jedi to build its cache.c.Completer.jedi_compute_type_timeout = 400## Experimental: Use Jedi to generate autocompletions. Off by default.c.Completer.use_jedi = True 方法二：安装如下插件，如果报错，还需要更新配置一些包环境： 12pip install jupyter_contrib_nbextensions --userpip install jupyter_nbextensions_configurator --user 1234pip install --upgrade ipykernel --userchmod 777 ~/.local/share/jupyter/pip install --upgrade --user nbconvertpip install --upgrade jupyter_core jupyter_client --user 总结至此，PyCharm 和 Jupyter 都已经配置完毕。今后PyCharm仍然是主力的代码编辑工具。但在工程构建过程中，免不了许多中间结果需要分析和查看，这个时候Jupyter就可以派上用场。进行轻量的模块化分析任务。另外，Jupyter也可以打开文本文件进行编辑（可以自由选择Vim/Sublime等编辑模式），这样就不用使用WinSCP来单独查看文件；Jupyter也可以打开Terminal，这样我们就不用再单独使用Xshell，Xming等软件。释放本地内存。 我们只需要开启浏览器和PyCharm就可以方便交互服务器，进行代码的版本控制，以及进行数据分析。接下来可以更加愉快的干活了！","categories":[{"name":"Tool","slug":"Tool","permalink":"https://imbowei.com/categories/Tool/"},{"name":"Server","slug":"Tool/Server","permalink":"https://imbowei.com/categories/Tool/Server/"}],"tags":[{"name":"PyCharm","slug":"PyCharm","permalink":"https://imbowei.com/tags/PyCharm/"},{"name":"Jupyter","slug":"Jupyter","permalink":"https://imbowei.com/tags/Jupyter/"}]},{"title":"Win10平台下的常用软件","slug":"win10-software","date":"2018-09-09T07:56:09.000Z","updated":"2018-09-17T11:38:15.703Z","comments":true,"path":"2018/09/09/win10-software/","link":"","permalink":"https://imbowei.com/2018/09/09/win10-software/","excerpt":"由于电脑系统最近崩溃两次，让我有了备份常用软件清单的想法。工欲善其事必先利其器，不断追求效率的提升是一件很幸福的事情。清单不定期更新。","text":"由于电脑系统最近崩溃两次，让我有了备份常用软件清单的想法。工欲善其事必先利其器，不断追求效率的提升是一件很幸福的事情。清单不定期更新。 楔子 由于组里面配备的电脑是金胜维硬盘，前一个月系统崩溃了两次，硬盘报废了。导致我花费了大量的时间重装系统，配置环境。 在此特地致谢良心的金胜维公司锻炼我重装系统的耐心。 🙃╮(╯▽╰)╭🙃 现在新换了三星的SSD，但还是决定记录一下常用的软件环境配置，为以后可能的迁移系统做准备（虽然也有可能直接入坑Linux了）。 操作系统 对于很多组织（学校/公司）来说，都会统一购买正版的win10系统，从相应的资源站点下载正版系统，并获取激活码即可。 在这里或者这里可以下载Ultraiso,将我们的正版系统制作成U盘安装。 台式机启动的时候按Fn+F12选择U盘启动（这里是Dell台式机），然后先格式化掉原有系统，重装正版系统。 安装系统后，登陆微软账号就可以将之前的主题配置找回。（前提在快捷键win+i后的更新与安全选项卡中同意配置同步） 双屏配置很简单（免去Alt+Tab之苦，还能多看几行代码），但找一个漂亮的壁纸就不简单了。可以在 沙沙野 找到很多漂亮的高清原图，然后按照显示器分辨率PS两张图出来就好了。 软件 工欲善其事必先利其器，记录一下常用的一下软件。 日常必备Shadowsocks(SS)如果学校/公司没有搭梯子，那只能自力更生了，梯子在这里，你只需要一台国外的服务器就好了~ Chrome可高度自定义的浏览器，搭配Google使用口味更佳哦（可以直接同步其他电脑的设置）。介绍一些有用的的插件（啧啧啧~）插件商店 Grammarly： 搭配 overleaf , 用于学术写作。 Google schoolar： 常用的学术搜索。 Google translate： 页面划词翻译。 Markdown here： 写漂亮得电子邮件。 qiniu upload files：七牛云插件（如果你用markdown写作的话） 低价保护/惠惠购物助手/购物党：淘宝京东等购物网站的比价插件~ Firefox有时候一些网站会有个人/公司，两个账号，浏览器记住密码的时候不方便，chrome搭配火狐使用。 Git这是一个没有办法不用的东西啊。 下载地址 Bandzip口碑较好的一个压缩软件。 Offices这个没什么好说的，必须安装。就算你每天写markdown或者latex，但是别人会给你发word啊，┏┛墓┗┓…(((m -__-)m Teamviwer非常棒的远程连接软件，QQ什么的远程连接就别提了。。。有了它，在家加班再也不是梦想了！（这追求……） 注册账号登陆就可以免去忘了记密码，请别人帮忙的尴尬。 切记，设置电脑永不休眠。要不然还是要麻烦别人了。 Anaconda虽然可以远程服务器调试代码，但本地常备一个python环境调试代码也是必须的。 不想用，但必须用的聊天软件微信还不是因为生活所迫……有本事别装啊 😀&lt;(＿ ＿)&gt;😀 TIM还有少量的QQ交流的需要，但是又不想要哪些花里胡哨的没用功能，那就选择TIM吧，它的共享文档还是一个能用的功能。当然，如果没有交流需要，还是不要安装了，共享文档找Google。 可选软件Flux虽然现在win10已经内置了护眼功能，但是我还是一直使用这款简洁的软件（直接开机自启就好了）。 百度网盘毕竟2T的存储空间，还是有很多人在使用的。如果嫌弃它上传/下载速度慢又不想充网费，那就DIY吧。BaiduPCS-Go（估计百度的程序员小哥哥假装自己没看见吧）。 Photoshop虽然不是专业人士，但是工作中遇到稍微处理一下图片的情景还不少，手边预备一个PS是不错的选择。 关于英语 Aboboo：如果你练习英语口语，这是一个不错的选择。 有道词典：如果你经常查看英文论文/文档，但是英语又不太好。网易有道的划词翻译还是有很大帮助的。 灵格斯：专业强大的英文词典。 文本编辑器任选一种或多种皆可。 Sublime：常用的文本编辑器，满足轻量级的代码查看需求，也有人将其自定义成轻量IDE，不能连接远程服务器是硬伤。 Atom：基于github社区的开源编辑器，可谓是含着金钥匙出生。可高度自定义（程序员的最爱），完全可以变成一个IDE…… Vs code：相比于它兄弟vs studio，这款代码查看软件还是可以考虑的。（不过我没考虑） Notepad++：相比于前面三位选手，Notepad++最主要的优势是容量小，启动快，速度快，不占内存，其他功能也不差的。麻雀虽小，balabala~ Everything电脑文件多而杂怎么办，windows 自带的搜索功能太慢怎么办？这款软件值得拥有。 PDF阅读器 Adobe reader：广大科研工作者的第一选择（我看很多老师们都用它……） SumatraPDF：一个广受好评的PDF阅读器。 Gaaiho Reader：一个功能齐全的阅读器。 Pdf element：好用的编辑功能，当初为了它的OCR功能而下载。 Foxit pdf reader：用过一段时间的轻量、快速的PDF阅读器，但是标注不是很方便。 Drawbroad：windows 下一个很不错的产品，漂亮也方便标注，但是……还挺贵的，全价67￥，不过有打折甚至免费的时候，看看你能不能遇到了。 Xodo：漂亮简洁的界面，运行快速，批注方便，而且免费。但是！它暂时不支持撤销操作，不支持中文…… textstudio其实网页版的overleaf写论文已经很方便了。但是，遇到ddl，免费帐户还是有点吃力，可以在电脑上安装一个text studio,以备不时之需。 Typora专业的markdown编辑器，优点很多。昧着良心不列举了，虽然我此刻正在使用它记笔记。 Xmind画思维导图的软件，不想安装，也有网页版的百度脑图可以替代使用，百度为数不多的良心产品啊。 Mendeleywindow 平台常见的文献管理软件，虽然做的丑的一点，虽然会把你的文档在电脑里另外复制一份……但还是有一些用户的…… PE制作大白菜/老毛桃这两个软件任选其一即可（这名字谁起的啊……）。 开发环境 Pycharm： 配置导入，方便的代码跳转，自定义快捷键设定，还提供免费的远程服务器连接功能，还等什么啊？！真不明白用jupyter的人们是怎么写工程代码的…… Download jupyter：存在即合理，虽然jupyter notebook 在工程构建方面略差pycharm一筹，但由于其便捷性的特点，处理数据的时候非常方便，广受数据科学家的喜爱。它与pycharm一起可以构建出最便捷的开发环境。 Xshell：连接服务器利器，可以改变常用服务器配置文件的存储位置，防止重装系统后再配置一遍……都是泪啊 Xming：提供远程服务器的图形界面。 winSCP：可以获取服务器的目录，通过本地的文本编辑器打开服务器上的文件。 下载软件 迅雷极速版：下载速度尚可，重点是没有广告！ IDM：下载速度很快，但是是收费软件。 uTorren：同样好用，但只有十五天试用期的下载软件。 电脑管理如果对于电脑很熟悉，可以忽略以下软件。 玩具大师（鲁大师）：有硬件检测，驱动更新，电脑温度异常等等不太常用的功能，但保不准需要偶尔用一下…… 腾讯管家：可以方便地搜索一些国内的常见软件，管理开机时间等等。当然如果习惯自己配置电脑，也就不需要它了。 仅剩的娱乐 网易云音乐：不多说，要不是因为版权问题，它会是一家独大的音乐软件吧~ 当然不安装也有网页版可以使用。 Potpalyter：一款小巧强大的视频播放器。 尾声 上面列举了很多的软件，并且以后还会不定期的更新名单。 但其实，工具只是工具，它们能发挥出多大的生产力，最直接的影响因素还是用户本身。加油吧，皮卡丘~","categories":[{"name":"Operating-system","slug":"Operating-system","permalink":"https://imbowei.com/categories/Operating-system/"},{"name":"Win10","slug":"Operating-system/Win10","permalink":"https://imbowei.com/categories/Operating-system/Win10/"}],"tags":[{"name":"Flux","slug":"Flux","permalink":"https://imbowei.com/tags/Flux/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://imbowei.com/tags/Shadowsocks/"},{"name":"Pycharm","slug":"Pycharm","permalink":"https://imbowei.com/tags/Pycharm/"},{"name":"Teamviwer","slug":"Teamviwer","permalink":"https://imbowei.com/tags/Teamviwer/"},{"name":"Tpyora","slug":"Tpyora","permalink":"https://imbowei.com/tags/Tpyora/"}]},{"title":"双网卡配置：同时使用公司（学校/实验室）内网和外网","slug":"Dual-NIC-configuration","date":"2018-09-07T13:37:09.000Z","updated":"2018-09-07T14:27:05.250Z","comments":true,"path":"2018/09/07/Dual-NIC-configuration/","link":"","permalink":"https://imbowei.com/2018/09/07/Dual-NIC-configuration/","excerpt":"没有一个好用的网络根本是没有办法好好工作的呀。最近通过改变路由表、调整网卡优先级，实现了内外网络的同时使用，终于可以愉快的上网了。","text":"没有一个好用的网络根本是没有办法好好工作的呀。最近通过改变路由表、调整网卡优先级，实现了内外网络的同时使用，终于可以愉快的上网了。 why实验室的内网实在是太慢了……即使是查资料也会有令人不悦的卡顿，更别说下载大规模数据。然而，学校的无线网还是不错的。但是，用学校的无线网怎么用实验室的服务器呢？ 开始折腾。 How首先，自购一块无线网卡。并确认其可以正常工作。 这个时候，我们其实已经可以通过临时禁用有线网络，来使用无线网络下载数据等等…… 但是，有线网络每次禁用启用都需要若干秒钟的时间，等待的滋味不好受呐。 改变路由表 快捷键win+R ，然后键入cmd回车。在cmd中键入命令route print 可以查看自己的当前路由表。 route delete #ip 命令可以删除当前的路由表。在执行route delete 0.0.0.0后可以彻底禁用有线网络。 接着要添加内网的ip地址，以及无线外网的ip地址。用 route add #ip命令。 总的来说，我们只需将上述三行代码写入一个.bat脚本中，以管理员权限运行就好了。比频繁的手动操作，等待网卡切换，节省很多时间。代码如下： 12345route delete 0.0.0.0route -p add 172.0.0.0 mask 255.0.0.0 172.31.202.1route add 0.0.0.0 mask 0.0.0.0 10.1.88.1 调整优先级完成上述部分，貌似大功告成了，内网和外网都可以使用了。但是，此时很多国内的网站速度会非常之慢，慢到没有朋友…… 这个时候就需要设置一下两块网卡的工作优先级。流程非常简单，如下图所示： 从控制面板打开网络连接设置； 右键无线网络图标，选’属性‘； 双击“IPV4”，选取”高级”； 将自动跃点数改为固定的 10,一路确定保存。 同理，可以将有线网卡的自动跃点数设置为 20。 两张网卡的自动跃点数越小表示优先级越高。 此时，我们就可以在实验室愉快的上网啦！","categories":[{"name":"Tool","slug":"Tool","permalink":"https://imbowei.com/categories/Tool/"},{"name":"Computer-network","slug":"Tool/Computer-network","permalink":"https://imbowei.com/categories/Tool/Computer-network/"}],"tags":[{"name":"Hop-number","slug":"Hop-number","permalink":"https://imbowei.com/tags/Hop-number/"},{"name":"Routing-table","slug":"Routing-table","permalink":"https://imbowei.com/tags/Routing-table/"}]},{"title":"算法的时间复杂度和空间复杂度","slug":"Summary-of-time-complexity-and-space-complexity","date":"2018-08-17T10:37:34.000Z","updated":"2018-09-05T14:33:22.963Z","comments":true,"path":"2018/08/17/Summary-of-time-complexity-and-space-complexity/","link":"","permalink":"https://imbowei.com/2018/08/17/Summary-of-time-complexity-and-space-complexity/","excerpt":"趁假期复习了算法基础的时间复杂度和空间复杂度，整理一遍。","text":"趁假期复习了算法基础的时间复杂度和空间复杂度，整理一遍。 算法的有效性要想理解时间复杂度和空间复杂度这两个概念，首先要明白算法的含义。所谓算法，是解决一类问题的通法，即一系列清晰无歧义的计算指令。 具体的，一个算法应该有以下五个方面的特性： 输入（Input）：算法必须有输入量，用以刻画算法的初始条件（特殊情况也可以没有输入量，这时算法本身定义了初始状态）； 输出（Output）：算法应有一个或以上输出量，输出量是算法计算的结果。没有输出的算法毫无意义。 明确性（Definiteness）：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。 有限性（Finiteness）：算法必须在有限个步骤内完成任务。 有效性（Effectiveness）：算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现（又称可行性）。 根据以上的定义，不难发现。每个算法只能解决具有特定特征的一类问题。然而，每个有固定输入输出的问题可以采取多种算法来决解。那么，要怎么来比较解决同一个问题的不同算法之间的优劣呢？这个时候，时间复杂度和空间复杂度就有了用武之地。 时间复杂度算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，在很大程度上能很好反映出算法的优劣与否。验证算法的时间复杂度，我们有以下两个方法。 事后统计一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。所以就有了事后统计的方法。计算算法的时间复杂度，往往是为了评测算法的性能，设计更好的算法。这就给事后统计的方法带来了两个弊端。 需要先实现算法设计，并至少运行一次。 统计算法时间容易受到计算机硬件、编程语言效率等环境因素影响。 事前分析由于事后统计的方法有上述的弊端，我们通常采取事先估计的方法来评价算法的时间复杂度。为了更好的比较不同算法在处理统一问题上的效率，通常从算法中选取一种对于所研究的问题（或算法类型）来说是基本操作的原操作，以该基本操作的重复执行的次数作为算法的时间量度，记为T(n)。在这里，n为输入问题的规模。对于同一个问题来说，他的输入规模越大，往往时间复杂度也就越大。关于输入问题规模n，有辅助函数f(n),来统计算法基本操作的频度。因此，算法的时间复杂度往往记为$T(n)=O(f(n))$。 为了简便，我们一般在计算时间复杂度往往选取最简单的f(n)表示。例如：$O(2n^2+n+1) = O (3n^2+n+3) = O(7n^2+n) = O(n_2)$ ，一般都只用$O(n_2)$表示就可以了。也就是说，两个算法的时间频度不一样，但很有可能拥有相同的时间复杂度。例如：$T(n)=n^2+3n+4$ 与 $T(n)=4n^2+2n+1$它们的频度不同，但时间复杂度相同，都为$O(n^2)$。 常见的算法时间复杂度由小到大依次为： $O(1)&lt;O(log_2(n))&lt;O(n)&lt;O(nlog_2(n))&lt;O(n^2)&lt;O(n^3)&lt;…&lt;O(n!)$ 下面的图片直观的表示他们之间复杂度关系。 时间复杂度的分类 最坏时间复杂度：输入数据状态最不理想情况下的时间复杂度，也就是算法时间复杂度的上界。若没有特别声明，时间复杂度就是指最坏时间复杂度。 平均时间复杂度：在所有可能的输入实例均以等概率出现的情况下，算法的期望时间复杂度。 最好时间复杂度：输入数据状态最理想情况下的时间复杂度。 时间复杂度预估步骤 找出基本语句：算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。 计算基本语句的执行次数的数量级：只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。 用O()表示算法的时间性能：将基本语句执行次数的数量级放入O()中。 时间复杂度分析技巧 简单语句：程序的输入输出、赋值等语句都近似认为需要$O(1)$时间。 顺序结构：需要依次执行一系列语句所用的时间可采用O()的”求和法则”， 选择结构：如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要$O(1)$时间。 循环结构：循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用O()的”乘法法则”。 复杂算法：将其分成几个容易估算的部分,然后利用求和法则和乘法法则计算整个算法的时间复杂度。 其他准则 若$g(n)=O(f(n))$,则$O(f(n))+ O(g(n))= O(f(n))$ $O(Cf(n)) = O(f(n))$ , 其中C是一个正常数。 乘法法则: 是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$和 $T_2(n)=O(g(n))$,则 $T_1 T_2=O(f(n) g(n))$ 求和法则:是指若算法的2个部分时间复杂度分别为 $T_1(n)=O(f(n))$ 和 $T_2(n)=O(g(n))$,则 $T_1(n)+T_2(n)=O(max(f(n), g(n)))$特别地,若$T_1(m)=O(f(m))$, $T_2(n)=O(g(n))$,则 $T_1(m)+T_2(n)=O(f(m)+g(n))$ 实际演练 三个简单语句，$T(n)=O(1)$。123Temp=i;i=j;j=temp; 如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是$O(1)$。 因为 $O(n^2+1)=n^2$ ，忽略低阶项， 所以$T(n)=O(n^2)$；1234sum=0； （一次）for(i=1;i&lt;=n;i++) for(j=1;j&lt;=n;j++) sum++； （n^2次） 一般情况下，循环语句只需考虑循环体中语句的执行次数，忽略该语句中步长加1、终值判别、控制转移等成分，当有若干个循环语句嵌套时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。 语句①的频度是$n-1$,语句②的频度是$(n-1)*(2n+1)=2n^2-n-1$（乘法法则）, 所以$f(n)=2n^2-n-1+(n-1)=2n^2-2$（加法法则）, 最终 $O(2n^2-2)=n^2 $ , 即该程序的时间复杂度$T(n)=O(n^2)$。 123456for (i=1;i&lt;n;i++) &#123; y=y+1; ① for (j=0;j&lt;=(2*n);j++) x++; ② &#125; 语句①的频度：2；语句②的频度一般不考虑；语句③的频度：n-1；语句④的频度：n-1；语句⑤的频度：n-1；$T(n)=2+3(n-1)=3n-1=O(n)$。 12345678a=0; ①b=1; ①for (i=1;i&lt;=n;i++) ②&#123; s=a+b; ③ b=a; ④ a=s; ⑤&#125; 语句①的频度是1；设语句②的频度是f(n), 则：$f(n)&lt;=log_2(n)$。取最大值$f(n)=log_2(n)$,$T(n)=O(log_(n))$ 123i=1; ①while (i&lt;=n) i=i*2; $T(n)=O((n)(n+1)(n-1)/6)=O(n^3)$ 12345678for(i=0;i&lt;n;i++) &#123; for(j=0;j&lt;i;j++) &#123; for(k=0;k&lt;j;k++) x=x+2; ① &#125; &#125; 空间复杂度设计算法的时候，我们还会关注空间复杂度，空间复杂度是算法在运行过程中临时占用的存储空间大小的度量, 同样是关于问题规模n的函数。但根本上，算法的时间运行效率才是最重要的。只要算法占用的存储空间不要达到计算机无法接受的程度即可。所以，常常通过牺牲空间复杂度来换取算法更加高效的运行时间效率。 算法在计算机存储器上占用的空间包括三个部分。 输入输出算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不会随算法的不同而改变。这不是我们需要考虑的部分。 算法本身存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这部分存储空间，就必须编写出较短的算法。然而，算法想要实际应用需要根据需求采取不同的编程语言来实现，不同编程语言实现的代码长短差别很大，然而存储空间都在可接受范围之内（通常不同编程语言的效率更受关注）。 运行临时占用根据算法在运行过程中临时占用存储空间的不同，可以将算法分为两类。 原地算法（in-place algorithm）：只需要占用少量的临时工作单元，而且 不随问题规模的大小而改变 ，我们称这种算法是“就地”进行的，是节省存储的算法, 空间复杂度为O(1) 。 非原地算法（not-in-place）：需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元。算法临时占用空间是考虑算法空间复杂度时主要考虑的部分。相比于随着问题输入规模扩大而扩大的非原地算法，原地算法是更加简洁高效的算法（仅考虑空间复杂度时）。 实际例子假设我们想要将拥有n个项目的数组反过来。一个最简单作这件事的方式是这样：12345function reverse(a[0..n]) allocate b[0..n] for i from 0 to n b[n - i] = a[i] return b 不幸地，这样需要$O(n)$的空间来创建b数组，且配置存储器通常是一件缓慢的运算。如果我们不再需要a，我们可使用这个原地算法，用它自己反转的内容来覆盖掉：123function reverse-in-place(a[0..n]) for i from 0 to floor(n/2) swap(a[i], a[n-i]) 排序算法分析了解算法的时间复杂度和空间复杂度之后，再看一些常用算法总结的时候就不会再向原来一样有雾里探花之感了。 参考文献算法的时间复杂度和空间复杂度-总结原地算法","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://imbowei.com/categories/Algorithm/"}],"tags":[{"name":"Time-complexity","slug":"Time-complexity","permalink":"https://imbowei.com/tags/Time-complexity/"},{"name":"Space-complexity","slug":"Space-complexity","permalink":"https://imbowei.com/tags/Space-complexity/"}]},{"title":"AI发电厂——数据标注公司（国内数据标注公司服务调研）","slug":"Investigate-domestic-data-labeling-companies","date":"2018-08-07T11:07:28.000Z","updated":"2018-09-04T10:19:18.466Z","comments":true,"path":"2018/08/07/Investigate-domestic-data-labeling-companies/","link":"","permalink":"https://imbowei.com/2018/08/07/Investigate-domestic-data-labeling-companies/","excerpt":"众所周知，深度学习需要大量的标记数据和高效的运算来做支撑。计算资源只要从黄老板的公司订购就可以了，但大规模的高质量有标记数据却不是那么容易获得，让科研人员头疼不已。应用时代而生的就是一大批数据众包公司和平台。正好借着一个数据众包任务，对于国内的数据标注公司服务有了更深一步的了解。","text":"众所周知，深度学习需要大量的标记数据和高效的运算来做支撑。计算资源只要从黄老板的公司订购就可以了，但大规模的高质量有标记数据却不是那么容易获得，让科研人员头疼不已。应用时代而生的就是一大批数据众包公司和平台。正好借着一个数据众包任务，对于国内的数据标注公司服务有了更深一步的了解。 AI的老师：画框的这些人 伴随着AI兴起的最关键的技术莫过于深度学习，作为深度学习的基础，神经网络是一种以输入为导向的算法，其结果的准确性取决于接近“无穷”量级的数据。所以摒除那些复杂的中间环节，深度学习最关键的就是需要大量的数据训练，这也是为什么在互联网大数据的时代，AI可以崛起。而在数据训练之前，又必须先对大量的数据进行标注，作为机器学习的先导经验。 因此，催生了大量数据标注公司的诞生。 什么是数据标注要理解数据标注，得先理解AI其实是部分替代人的认知功能。回想一下我们是如何学习的，例如我们学习认识苹果，那么就需要有人拿着一个苹果到你面前告诉你，这是一个苹果。然后以后你遇到了苹果，你才知道这玩意儿叫做“苹果”。类比机器学习，我们要教他认识一个苹果，你直接给它一张苹果的图片，它是完全不知道这是个啥玩意的。我们得先有苹果的图片，上面标注着“苹果”两个字，然后机器通过学习了大量的图片中的特征，这时候再给机器任意一张苹果的图片，它就能认出来了。 根据应用场景的不同，数据标注有许多类型。大体上分为图像、语音、自然语言三大类。其中由于图像研究领域的水文热潮，图像标注的任务也尤为众多。。。无人驾驶、人脸识别、物体检测……语音和语言相对来说，数据标注难度更大一点。价格也相对高昂一些。 在进行数据标注之前，我们首先要对数据进行清洗，得到符合我们要求的数据。数据的清洗包括去除无效的数据、整理成规整的格式等等。具体的数据要求可以和算法人员确认。 众包标注的困难众包标注由于是非专业标注，自然会遇到很多问题。这困难主要由以下三个方面组成： 标注者的水平由于标注者是众包标注，因此其标注者的水平也参差不齐，其背景知识和行为习惯可能有较大的差异。这就相当于是给若干个已训练好的模型来做预测一样，其不同的模型有不同的输出结果。那么这种情况下，基本上使用多数投票的方法来解决。 评价困难标注的内容可以分为两类，一类是有明确标签的，就好比是试卷里的客观题一样，尽管各个标注都不同，但是还是在有限集合内的。另一类是开放式回答，这种标注如同试卷里的主观题一样，可能会有无限种可能的结果。甚至是截然相反的结果，比如什么是美，什么是丑，每个人的评价标准是不同的。我们本次想要的数据众包也是这个类型的。 标注稀疏性如果一个需要标注的训练集中的数据本身就比较稀疏，而我们又需要把它们分割成一个个小块，这就有可能造成数据稀疏。比如，我们要进行鸟类图片标注，如果本身鸟类种类很多，而分给每个人的鸟的种类也很多的话，由于每个人认识的鸟的种类是不多的，因此可能存在每个人的标注都会有很高的错误率。这时候我们可能就需要让标注者之间有重叠的部分，然后使用多数表决来解决。 数据众包公司调研由于我们需要众包的数据是中文数据，所以只关心国内的一些数据众包公司。国外的Amazon Mechanical Turk、CrowdFlower、Mighty AI等公司不在考察范围之内。 据悉，在国内的数据标注行业实行这样一套分工流程：上游的科技巨头把任务交给中游的数据标注公司，再由中游众包给下游的小公司、小作坊，有的小作坊还会进一步众包给“散兵游勇”，比如学生或家庭主妇。这条产业链上，分包现象越严重，最终落到最底层的数据服务公司的价格就越低，一层层的“数据黄牛”压缩了利润空间，所以一些任务经过数手转包，酬劳已低得惊人。目前的数据标注工作主要是集中在河北、河南、山东、山西等劳动力密集的地区，这样的选址也因为能够以更加低廉的劳动力成本去完成大量的数据标注工作。 下面是我对国内的数据众包公司做的一些调研（按照我搜索得知该公司的顺序排序）。不知道是否是我们的标注任务太难的缘故，绝大多数公司没有任何反馈。 1.百度数据众包、百度云众包百度不愧是靠PC端的网页搜索起家的，其前端技术还是不错，网站做的还是比较精致的。但是我提出了数据标注任务之后，贵司的这个相应效率可就有点搞笑了。完全没有反应…… 2.泛函科技第二天下午有反馈, 0.35元/条, 后来涨价到1.5元/条……而且拿走我的数据，试标结果都没有反馈。但是客户经理态度还比较好，最后给出这样一个方案“您确定一个期望的价格，我们也可以把他发到我们的平台上，我们抽取一定佣金后，按您意愿的价格发布任务。看是否有用户愿意标注，这样的工期我们不敢保证。”，我是不敢采取的，23333。 3.京东众智数据标注的需求申请是真难用！京东公司就没有一个会前端的人嘛？但是，京东的效率很高，反应很快（第二天就有回复），对接服务还比较周到细致，测评试标注有标注结果反馈，且效果尚可。最后谈妥的价格是0.55元/条，含6个点的税，增值税普通发票。关键是，京东平台只接受5W元以上的订单。这一点为什么不在官网说明？浪费我那么多的联系时间。 4.数据堂联系之后没有反馈 5.龙猫数据联系之后没有反馈 6.阿里众包联系之后没有反馈 7.星辰数据网页做的很好看，但是联系之后没有反馈 8.爱数智慧第二天下午有反应，但进展比较慢。问我要走了样例数据试标注却没有结果反馈。难道不需要顾客审查标注质量么？最后报出的定价是0.45元/条，但是谁知道他们标注的质量呢？ 9.倍赛公司联系之后没有反馈 10.tagger联系之后没有反馈 总的来说，我眼中国内最靠谱的数据标注公司是京东众智。不论是客户经理的对接工作，还是数据的试标注反馈，完成的都比较高效和到位。但也有一个致命的缺陷，它们只接受5W元以上的标注任务订单，，，这就基本把高校的科研组统统拒之门外了。另外，泛函科技和爱数智慧的服务以及价格尚可，只是没有京东众志应答迅速，没有试标注的结果反馈。至于其他一些公司，统统没有反馈，令人失望。 PS:上文中，BA已经出镜，不给T家一个机会貌似不太公平。那就给他们一个亮相机会吧。 参考文献众包数据标注中的隐类别分析谈谈人工智能数据标注那些事儿数据标注员，最后一批被AI取代的人","categories":[{"name":"Machine-learning","slug":"Machine-learning","permalink":"https://imbowei.com/categories/Machine-learning/"},{"name":"Data-labeling","slug":"Machine-learning/Data-labeling","permalink":"https://imbowei.com/categories/Machine-learning/Data-labeling/"}],"tags":[{"name":"Machine-learning","slug":"Machine-learning","permalink":"https://imbowei.com/tags/Machine-learning/"},{"name":"Data-labeling","slug":"Data-labeling","permalink":"https://imbowei.com/tags/Data-labeling/"},{"name":"Crowdsourcing","slug":"Crowdsourcing","permalink":"https://imbowei.com/tags/Crowdsourcing/"}]},{"title":"用Github和Coding双线绑定自定义域名","slug":"Github-and-Coding-bulid-blog","date":"2018-07-29T09:26:57.000Z","updated":"2018-09-04T10:19:10.941Z","comments":true,"path":"2018/07/29/Github-and-Coding-bulid-blog/","link":"","permalink":"https://imbowei.com/2018/07/29/Github-and-Coding-bulid-blog/","excerpt":"本来博客已经搭建好了，可是总觉得用Github一个二级域名怪怪的，非要折腾自己来绑定自己的域名，并申请SSL（就是喜欢看那个小绿锁！）前前后后花了不少时间，走了不少弯路，将踩过的坑记录下来。","text":"本来博客已经搭建好了，可是总觉得用Github一个二级域名怪怪的，非要折腾自己来绑定自己的域名，并申请SSL（就是喜欢看那个小绿锁！）前前后后花了不少时间，走了不少弯路，将踩过的坑记录下来。 域名设计原则域名的设置应该根据什么原则呢？参考域名价值评估，我们可以根据如下因素来 域名的长短:1位：10万，2位：5万，3位：1万，4位：5000，5位以上1000，6位以上500域名的组成结构：纯字母的*2，数字与字母杂的*1，中划线/3域名的组合方式：单词*3，纯数及单词组合*2，拼音及其它*1域名的形式分类：行业词*3，通用词*2，创单词*1域名的商业价值：搜索数量：1000以下/3，1000到1万/2，1万到10万*1，10万到100万*2，100万*3，100万以后搜索数量多一个0就*3的倍数，百度以100万，google以300万为参数。域名的后缀：com结尾的大于net，net结尾的大约cn的，cn结尾的大于http://com.cn(org、gov排除例外一般不属于商业险域名)，http://com.cn大于其他尾缀域名域名的历史记录：自己衡量。域名记忆性标准：跟实际生活中某些词汇重叠，跟语言、语音发声重叠适用性较强域名的合法性标准：域名是否符合法律，是否涉及到知识产品争议方面。域名的潜在商业价值：域名所涉及的行业规模及互联网的相关性。 域名服务商选择心中构思好了自己的域名后，就可以着手选择一个靠谱的域名购买商。如果懒得备案，那就将我们的目光锁定在国外。参考分析域名购买商，2018最佳国外域名注册商，不需要备案这两篇文章，我将目光初步锁定在namesilo和namecheap两家口碑较好、服务稳定、价格尚可的服务商身上。 这里有两个网站来查询你所想好的域名目前的状况，以及价格对比。查域名是否被注册（中文站），domcomp——国外多家域名购买网站的价格对比如果准备购买，从domcomp内点击对应的域名服务商还有额外的优惠。 我最终选择的是Namesilo，因为更便宜……口碑也还不错。namesilo传送门 Namesilo还免费提供隐私服务（即不公开域名持有者的信息）。对了， Namesilo 支持支付宝付款。从传送门进去，注册新用户，选好合适的域名后填入下面两个优惠码其中任意一个都可以优惠一美元。（截止日期：2020年12月31日） NameSilo 新用户购物优惠码一 imbowei NameSilo 新用户购物优惠码二 miaomiao 域名购买及配置namesilo购买域名之前记得填写优惠码，并且提交（提交按钮一直都是灰色的！），提交后可以便宜一美元。经过以上步骤，就可以最终购买域名了。 购买得到域名，要紧接着配置。新域名默认有四条停靠的广告记录，不要犹豫，直接全部删除！然后我选用了DNSpod的域名解析服务。中文网站，简单易懂。它有两个默认的解析记录，我们直接添加到namesilo购买的域名中，如下图所示。（注意：不需要第三条记录。）这样就可以放心关闭Namesilo的网站了。 Coding配置如果Coding和GitHub的用户名和注册邮箱完全一样，就不用再次配置Git，只要找到.ssh文件夹下对应的id_ras.pub文件，再去coding以相同的方式设置一次公钥即可。 如果用户名或者注册邮箱并不是完全一致，那么按照如下步骤在进行一遍配置。注意，需要先将配置GitHub时候生成的公钥密钥文件备份，或者生成Coding配置的时候改掉生成的文件名。 git config --global user.name &quot;OnlyChristmas&quot; 设置Coding用户名 git config --global user.email &quot;OnlyChristmas@hh.com&quot;设置注册Coding邮箱 ssh-keygen -t rsa &quot;OnlyChristmas@hh.com&quot; 在bash中执行命令，连着三个回车（不需要密码）。 生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。生成文件目录`C:/用户/你的用户名/ 输入 ssh -T git@coding.net 如果出现如下字样不要慌张，因为可能是本地网络禁止了22端口，我们换个端口就好。 ssh: connect to host coding.net port 22: Connection refused 再次输入 ssh -T -p 443 git@git-ssh.coding.net 出现如下字样，说明配置coding成功。 The authenticity of host …………………Coding 提示: Hello OnlyChristmas, You’ve connected to Coding.net via SSH. This is a personal key.OnlyChristmas，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥 将博客托管到Coding和GitHub首先，在本地博客根目录/source/下建立一个名为 CNAME的文件，里面写填入你购买的域名。例如imbowei.com, 不需要任何的其他字符，例如“www”,”https”之类。 在本地博客文件夹下的srouce文件夹下新建Staticfile文件，接下来就可以同时向coding和GitHub上传博客了。 向coding提交代码遇到了如下问题怎么办？ remote: Coding 提示: Authentication failed! 认证失败，请确认您输入了正确的账号密码 我是因为配置出现了问题，改成如下样式，即可同时上传github和coding123456deploy: type: git repo: github: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git coding: git@git.coding.net:OnlyChristmas/OnlyChristmas.git branch: master 代码上传之后，在coding项目的代码/pages 服务中选取master分支，开启静态pages服务，即可访问coding的主页了。 Github and Coding 双线部署并申请SSL现在Coding pages和Github pages 已经都可以使用了。那么我们现在要做的就是设置他们同时解析到我们刚才购买的域名imbowei.com，实现双线访问。这里的坑比较多。首先要在DNSpod先设置解析Coding，并且在Coding项目的pages界面申请SSL证书。申请配置如下图所示。否则Let’s Encrypt主机根据域名解析记录验证域名所有权时，会定位到GitHub Page的主机上，导致Let’s EncryptSSL证书申请失败。 然后在DNSpod再配置Github pages的解析，并在Github博客项目的设置中绑定主页。 然而，Github pages 出现了如下的错误信息， Domain’s DNS record could not be retrieved.不要着急，这是因为github pages的自定义HTTPS请求没有配置成功（2018年5月1日新推出的良心服务），在刚才的DNSpod中添加一条A记录即可,其中IP指向在下面的地址中任选其一即可（一项不行，就换另外一个）1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 Gituhb pages的配置成功界面如下所示。最终的DNSpod解析配置如下图所示。 去除Coding的广告……配置好之后很开心，然而发现，Coding会自动给你的博客加一个滞留好几秒钟的跳转页面，感觉非常非常的不好。还好除了升级为它的黄金会员之外还有其他解决方法。 只要在博客主页为它打一点点广告就好了（要两个工作日才会通过！）……毕竟托管在上面还是很方便的。12&lt;div&gt;Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/div&gt; 对于Next主题来说，在themes/next/layout/_partials/footer.swig的文件末尾加入上述代码就可以把Coding要求的小广告加入到主页的页脚位置。 但是Coding这种强制要求真的很烦人，一点互联网精神都没有！货比货，感觉Coding距离Github还差几个光年吧。既然打广告，也顺便带上良心的Github吧！ 资源配置现在部署好了HTTPS，那为什么还是没有出现小绿锁？刷新页面出现的小绿锁一闪而过，让我们空欢喜一场！因为网站没有全站HTTPS，也就是说，我们引用了http的资源，要将对应资源全部换成HTTPS才能出现小绿锁。 怎么知道自己什么还没有换成HTTPS资源？很简单，F12打开调式界面就可以发现警告信息。例如我的站点就是因为加载了一个自定义的鼠标图片，如鼠标图片引用了HTTP的资源，将该段代码注释掉，或者换一个HTTPS的资源连接即可。 然后，就有心心念的小绿锁了！ 另外由于主页地址的改变，我还更新了如下资源配置： gitment评论系统的Authorization callback URL主页设置为自定义域名。 SEO相关设置 在 站点配置文件 中更改默认站点，使得文档末尾的copyright链接生成正确。 还在阿里云申请了一个为期一年的SSL免费证书，用于一些资源网站的验证使用。","categories":[{"name":"blog","slug":"blog","permalink":"https://imbowei.com/categories/blog/"}],"tags":[{"name":"Github-pages","slug":"Github-pages","permalink":"https://imbowei.com/tags/Github-pages/"},{"name":"Coding-pages","slug":"Coding-pages","permalink":"https://imbowei.com/tags/Coding-pages/"},{"name":"DNSpod","slug":"DNSpod","permalink":"https://imbowei.com/tags/DNSpod/"},{"name":"SSL","slug":"SSL","permalink":"https://imbowei.com/tags/SSL/"},{"name":"Domain","slug":"Domain","permalink":"https://imbowei.com/tags/Domain/"}]},{"title":"Linux服务器命令行上传数据到百度云盘","slug":"linux-uploading-baiduyunpan","date":"2018-07-25T23:25:35.000Z","updated":"2018-09-04T10:19:48.743Z","comments":true,"path":"2018/07/26/linux-uploading-baiduyunpan/","link":"","permalink":"https://imbowei.com/2018/07/26/linux-uploading-baiduyunpan/","excerpt":"每次想把服务器上的数据上传到百度云盘都要先下载到本地，然后再上传百度云。这一点都不优雅，既浪费时间，还占用电脑本来的带宽。如果Linux命令行能够直接上传百度云盘岂不美哉？说干就干，磨刀不误砍柴工！","text":"每次想把服务器上的数据上传到百度云盘都要先下载到本地，然后再上传百度云。这一点都不优雅，既浪费时间，还占用电脑本来的带宽。如果Linux命令行能够直接上传百度云盘岂不美哉？说干就干，磨刀不误砍柴工！ 准备 CentOS Linux, python3 配置环境 pip install bypy --user 配置 输入bypy info，得到如下显示。 12345Please visit:https://openapi.baidu.com/oauth/2.0/authorize?client_id=q8WE4EpCsau1oS0MplgMKNBn&amp;response_type=code&amp;redirect_uri=oob&amp;scope=basic+netdiskAnd authorize this appPaste the Authorization Code here within 10 minutes.Press [Enter] when you are done 访问该链接，获得授权码，复制回来。确认。得到类似信息即配置成功。 12Quota: 2.008TBUsed: 1.272TB 使用再也不用把一些实验结果保存到本地，从实验室服务器折腾到本地再进行上传。写两条命令就可以继续干活了，感觉真好！下面是一些常用命令 12345bypy list # 显示文档bypy upload filename -v # 上传某文件，显示进度bypy -c # 取消令牌文件。一段时间后要重新授权bypy downdir filename # 下载bypy compare # 比较本地目录和网盘目录 执行上传命令之后有如下的显示，说明正在上传 ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.[=___] 9% (20.0MB/214.1MB) ETA: 6m52s (481kB/s, 42s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK.[===_] 18% (40.0MB/214.1MB) ETA: 6m10s (481kB/s, 1m25s gone) ‘Wiki50.tar.gz’ &gt;&gt;==&gt; ‘/apps/bypy/Wiki50.tar.gz’ OK. 参考文献Linux命令行上传文件到百度网盘","categories":[{"name":"Linux","slug":"Linux","permalink":"https://imbowei.com/categories/Linux/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://imbowei.com/tags/Shell/"},{"name":"Bypy","slug":"Bypy","permalink":"https://imbowei.com/tags/Bypy/"}]},{"title":"wikipedia 训练繁（简）体中文 embedding(word2vec)模型","slug":"wikipedia-train-traditional-chinese-embedding（word2vec）model","date":"2018-07-22T14:52:39.000Z","updated":"2018-09-25T08:52:59.796Z","comments":true,"path":"2018/07/22/wikipedia-train-traditional-chinese-embedding（word2vec）model/","link":"","permalink":"https://imbowei.com/2018/07/22/wikipedia-train-traditional-chinese-embedding（word2vec）model/","excerpt":"由于课题任务需要一个繁体中文的word3vec, 折腾经过记录在此。希望以后少掉几个坑。训练好的embedding放在网盘中， 密码：2um0后来又按照这个方法训练了简体中文维度分别为50、100、200、300的embedding，一并放出来网盘链接 密码：751d","text":"由于课题任务需要一个繁体中文的word3vec, 折腾经过记录在此。希望以后少掉几个坑。训练好的embedding放在网盘中， 密码：2um0后来又按照这个方法训练了简体中文维度分别为50、100、200、300的embedding，一并放出来网盘链接 密码：751d get wiki最新的wiki data下载地址，目前有1.6G大小。 里面的内容以XML格式保存。节点信息如下：12345678&lt;page&gt; &lt;title&gt;&lt;/title&gt; &lt;id&gt;&lt;/id&gt; &lt;timestamp&gt;&lt;/timestamp&gt; &lt;username&gt;&lt;/username&gt; &lt;comment&gt;&lt;/comment&gt; &lt;text xml:space=&quot;preserve&quot;&gt;&lt;/text&gt;&lt;/page&gt; 初步处理我顺手直接解压真的too young。为了节省时间，免去自己写代码处理Wiki的烦恼，Wikipedia Extractor先初步处理。（服务器非root用户，安装命令加上--user） 1234git clone https://github.com/attardi/wikiextractor.git wikiextractorcd wikiextractorpython setup.py install --userpython WikiExtractor.py -b 1024M -o extracted zhwiki-latest-pages-articles.xml.bz2 执行过程如下，可以看到一共处理了1012693篇文章，输出如下所示： INFO: 6205533 手語新聞INFO: 6205536 班傑明·古根海姆INFO: 6205549 同意INFO: 6205556 2018年荷蘭網路監控法公民投票INFO: 6205594 李儒新INFO: 6205610 深圳信息职业技术学院INFO: 6205626 停下來等著你 (2018年電視劇)INFO: 6205642 簡單矩陣的快速演算法設計INFO: 6205644 斯義桂INFO: 6205646 焦耳效应INFO: 6205648 1925年世界大賽INFO: 6205653 True (方力申專輯)INFO: 6205657 华睿2号INFO: 6205664 河內郡 (大阪府)INFO: 6205691 京都寺町三条商店街的福爾摩斯INFO: 6205675 莫莉·比什死亡事件INFO: 6205703 都筑郡INFO: 6205701 皇座法庭所屬分庭庭長INFO: 6205709 冬瓜餅INFO: 6205710 吸血鬼莫比亞斯INFO: 6205712 淘綾郡INFO: 6205714 明石香織INFO: Finished 71-process extraction of 1012693 articles in 1114.1s (909.0 art/s) 通过以上抽取后得到两个文件wiki_00和wiki_01。里面的格式类似下面123&lt;doc id=&quot;5323477&quot; url=&quot;https://zh.wikipedia.org/wiki?curid=5323477&quot; title=&quot;結構與能動性&quot;&gt;文章内容&lt;/doc&gt; 在上面的基础上，我们在去掉一些不需要的特殊符号。12345678910111213141516import reimport sysimport codecsdef filte(input_file): p5 = re.compile(&apos;&lt;doc (.*)&gt;&apos;) p6 = re.compile(&apos;&lt;/doc&gt;&apos;) outfile = codecs.open(&apos;std_&apos; + input_file, &apos;w&apos;, &apos;utf-8&apos;) with codecs.open(input_file, &apos;r&apos;, &apos;utf-8&apos;) as myfile: for line in myfile: line = p5.sub(&apos;&apos;, line) line = p6.sub(&apos;&apos;, line) outfile.write(line) outfile.close()if __name__ == &apos;__main__&apos;:filte(input_file) input_file = sys.argv[1] 简体转繁体首先安装opencc-python网上一大堆教程，全是深坑！其实直接按照代码仓库作者的方法安装就好了。123git clone https://github.com/yichen0831/opencc-python.gitcd opencc-pythonpython setup.py install --user 但是，如果追求效率，可以安装opencc C++ 版本，python代码的效率堪忧。 看文档不难发现，繁体字也分为香港区和台湾省，要用怎么样的转换看具体需求就好12345678910from opencc import OpenCCopencc = OpenCC('s2hk')for filename in ['wiki_01','wiki_00']:truewith open('std_'+filename,'r',encoding='utf-8') as fin, open('hk_'+filename,'w',encoding='utf-8') as fou:truetruefor index , line in enumerate(fin.readlines()):truetruetruehk = opencc.convert(line) if index % 10000 == 0:truetruetruetrueprint(index,hk)truetruetruefou.write(hk) 得到了两个文件分别大小为 1024M 和154M jieba Segment先把两个wiki文件合并cat hk_wiki_00 hk_wiki_01 &gt; hk_wiki 1python -m jieba -d \" \" ./hk_wiki &gt; ./SegHk_wiki train word2vec运行下面写好的脚本，1234567891011121314151617# -*- coding: utf-8 -*-from gensim.models import word2vecfrom gensim.models import KeyedVectorsimport loggingimport osif not os.path.exists('./word2vec_tradiCN/'):trueos.makedirs('./word2vec_tradiCN/')logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)sentences = word2vec.LineSentence('./SegHk_wiki')for number in [50,100,200,300]:truemodel = word2vec.Word2Vec(sentences,size=number,window=5,min_count=5,workers=20)true# min-count 表示设置最低频率，默认为5，如果一个词语在文档中出现的次数小于该阈值，那么该词就会被舍弃; size代表词词向量的维度true# 为了后续建模读取vector方便，我们的保存格式应该和glove vector 保持一致truemodel.wv.save_word2vec_format('./word2vec_tradiCN/Wiki'+str(number)+'.txt', binary=False) 然而出现了Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.这个错误运行conda install nomkl安装nomkl，这是anaconda的问题。 test word2vec如果用python2，运行下面的测试脚本可能会出现如下错误KeyError: &quot;word &#39;\\xe7\\xb8\\xbd\\xe7\\xb5\\xb1&#39; not in vocabulary&quot;这个是python2对于中文的支持不太友好造成的，用python3即可表现正常。123456# -*- coding: utf-8 -*-from gensim.models.keyedvectors import KeyedVectorsfor number in [50,100,200,300]: wv = KeyedVectors.load_word2vec_format('./word2vec_tradiCN/Wiki'+ str(number)+'.txt', binary=False) print(number, wv.similarity('總統','民國')) #两个词的相关性 print(number, wv.most_similar(['倫敦','中國'],['北京']),'\\n\\n') # 北京is to中国 as 伦敦is to？ 注意，繁体中文，测试的时候也要用繁体的 这里直接测试了四组不同大小的embedding，可以对比效果。以这个简单的测试来说，200d embedding效果比较好。 当然，在实际中，效果怎么样，还是要实际测试。 50 0.0890698850 [(‘美國’, 0.8497380614280701), (‘英國’, 0.8156374096870422), (‘荷蘭’, 0.7635571956634521), (‘加拿大’, 0.7618951201438904), (‘蘇格蘭’, 0.7564111948013306), (‘法國’, 0.7498287558555603), (‘冰島’, 0.7447660565376282), (‘愛爾蘭’, 0.7290477752685547), (‘德國’, 0.7261558175086975), (‘哥倫比亞’, 0.715803861618042)] 100 0.0021609096100 [(‘英國’, 0.7518529891967773), (‘美國’, 0.716768741607666), (‘蘇格蘭’, 0.706271767616272), (‘德國’, 0.6398693323135376), (‘法國’, 0.6289862394332886), (‘愛爾蘭’, 0.6286278963088989), (‘荷蘭’, 0.6277433633804321), (‘英格蘭’, 0.625410795211792), (‘加拿大’, 0.6076068878173828), (‘威爾斯’, 0.6075741052627563)] 200 0.044366393200 [(‘英國’, 0.6959728598594666), (‘蘇格蘭’, 0.6404226422309875), (‘美國’, 0.6401909589767456), (‘英格蘭’, 0.6158463358879089), (‘愛爾蘭’, 0.5740842223167419), (‘德國’, 0.5558757781982422), (‘威爾斯’, 0.5539498925209045), (‘法國’, 0.5375431776046753), (‘荷蘭’, 0.5276069641113281), (‘威爾士’, 0.5051602721214294)] 300 0.034565542300 [(‘英國’, 0.6512337923049927), (‘蘇格蘭’, 0.5884094834327698), (‘英格蘭’, 0.5666802525520325), (‘美國’, 0.5420516729354858), (‘愛爾蘭’, 0.5202239751815796), (‘威爾斯’, 0.48060378432273865), (‘荷蘭’, 0.4763559103012085), (‘德國’, 0.4744102358818054), (‘法國’, 0.4675533175468445), (‘北愛爾蘭’, 0.46320733428001404)] 网盘链接训练好的四个embedding包含892594个词，都放到了网盘中，可以按需下载。 密码：2um0 参考文献word2vec实战：获取和预处理中文维基百科(Wikipedia)语料库，并训练成word2vec模型","categories":[{"name":"NLP","slug":"NLP","permalink":"https://imbowei.com/categories/NLP/"},{"name":"Word2vex","slug":"NLP/Word2vex","permalink":"https://imbowei.com/categories/NLP/Word2vex/"}],"tags":[{"name":"Wikipedia","slug":"Wikipedia","permalink":"https://imbowei.com/tags/Wikipedia/"},{"name":"Gensim","slug":"Gensim","permalink":"https://imbowei.com/tags/Gensim/"},{"name":"Embedding","slug":"Embedding","permalink":"https://imbowei.com/tags/Embedding/"},{"name":"Opencc","slug":"Opencc","permalink":"https://imbowei.com/tags/Opencc/"}]},{"title":"Hexo_Next_博客搭建记","slug":"Hexo_Next_博客搭建记","date":"2018-07-14T04:43:07.000Z","updated":"2018-09-30T00:59:25.221Z","comments":true,"path":"2018/07/14/Hexo_Next_博客搭建记/","link":"","permalink":"https://imbowei.com/2018/07/14/Hexo_Next_博客搭建记/","excerpt":"与我而言，建立个人博客存在的意义有两个。一方面，当作自己的备忘录，记录零散的知识点，避免重复的搜索工作；另一方面，可以更好的分享一些自己的心得，方便与大家交流。选择GitHub Hexo Next的组合的主要原因就是方便、便宜、简单，为从来没有接触过前端的自己降低难度。为了能让博客漂亮一点，这几天来的折腾过程记录整理在此，以备遗忘。","text":"与我而言，建立个人博客存在的意义有两个。一方面，当作自己的备忘录，记录零散的知识点，避免重复的搜索工作；另一方面，可以更好的分享一些自己的心得，方便与大家交流。选择GitHub Hexo Next的组合的主要原因就是方便、便宜、简单，为从来没有接触过前端的自己降低难度。为了能让博客漂亮一点，这几天来的折腾过程记录整理在此，以备遗忘。 博客搭建 本地构建博客我的环境是win10系统，经过一下步骤可以构建好一个运行在本地的静态博客（电脑不能占用localhost:4000端口） 安装Node.js, 这是建立Hexo的基础。在powershell中验证是否安装成功用后面两条命令 node -v、 npm -v。 建立一个存放博客文件的新文件夹。按住shift单击右键点击‘在此处打开Powershell’ 安装Hexo，并初始化博客（需要几分钟） 12npm install -g hexo-clihexo init blog 开启本地服务器 123hexo new &quot;我就是试试博客搭建好没&quot;hexo ghexo s 关联GitHub要想将本地博客部署到gitpages上，按照下面步骤操作即可。 安装分布式版本控制系统Git， 这是下载地址 、这是git教程 没有github账户的先注册一个 要将本地的git和github账户绑定，打开git bash ,配置如下信息。 12git config --global user.name &quot;OnlyChristmas&quot;git config --global user.email &quot;OnlyChristmas@hh.com&quot; 生成ssh密钥文件的命令：ssh-keygen -t rsa -C &quot;OnlyChristmas@hh.com&quot;,中间不需要设置什么，直接三个回车。 在这里 点击 New SSH key 新建一个链接，并将C://users/用户名/.ssh/id_rsa.pub文件中的密钥复制进去（标题随便填）。 bash中输入ssh git@github.com验证是否配置成功。如果出现 Hi 你的用户名！You&#39;ve successfully authenticated ,,,bala,,,Connection to github.com closed证明连接成功，以后推送的时候只需第一次输入密码，以后直接推送即可。 在github中新建一个仓库，名字是默认写法用户名.github.io 例如:OnlyChristmas.github.io 在 站点配置文件 配置如下信息： 1234deploy: type: git repo: https://github.com/OnlyChristmas/OnlyChristmas.github.io.git # 你的代码仓库地址，记得后面加上`.git` branch: master 然后保存你的配置文件 1npm install hexo-deployer-git --save 让你的博客上线！ 123hexo cleanhexo ghexo d 博客上线后，chrome浏览器页面通常会直接载入缓存，无法正常显示我们上传的新内容。 这时按`F12`进入后台，然后右键单击浏览器的刷新按钮，选择清空缓存并硬性重新加载即可正常浏览页面 绑定域名不来不准备弄的，但是不折腾不舒服啊，最终还是配置完成了，链接如下。用Github和Coding双线绑定自定义域名,并申请全站SSL 初探Hexo 下面是常用的及条命令以及简写，更多命令参考官方文档 12345678910111213141516npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客# 主要命令的含义以及简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署# 可能用到的设置命令hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令 图片是博客必不可少的一部分，但它们会造成加载缓慢。所以对于我们严肃的技术博客来说，就要少贴图，多敲代码，哈哈~。但是偶尔也是要贴几张图，才能说得更明白，这个时候推荐使用七牛云的外链，来提高速度。为什么选用七牛云 虽然我们是个严肃的技术博客，要有学术风格（就是丑！），但也不能太丑吧！？所以我这里换用Next主题，配置方式如下。当然也有更多的漂亮主题可供挑选，只是在配置的时候如是出现问题，更难解决，新手慎用。在blog文件夹下的shell中输入，下载主题文件。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 然后在 站点配置文件 配置如下信息： 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# theme: landscapetheme: next Next内置优化 优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。 选择Next主题中的风格样式 在 主题配置文件 中搜索到如下这部分，并在四种风格中选择一个即可。12345# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini algolia搜索 首先在 algolia 注册账号。此处优化需注意，官方文档不够完善。 创建APIKey HEXO_ALGOLIA_INDEXING_KEY 进入Algolia的API Keys页面ALL API KEYS选项卡 创建APIKey Description：HEXO_ALGOLIA_INDEXING_KEY Indices：&lt;此处选择之前创建的Index&gt; ACL：Add records，Delete records，List indices，Delete index 也就是说，我们有两个APIKey，其中一个是Search-only API Key（我们后面需要进行用它配置），另一个是HEXO_ALGOLIA_INDEXING_KEY（新建好即可）。具体的配置步骤如下： 在 站点配置文件 中需要添加 12345algolia: applicationID: # Application ID apiKey: # Search-only API Key indexName: # 此处选择之前创建的Index chunkSize: 5000 在 主题配置文件 中搜索到如下这部分，只需将enable改为true，最后两个搜索提示信息有需要的话也可以修改。 12345678algolia_search: enable: true hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: &quot;不好意思，木有&apos;$&#123;query&#125;&apos;的搜索结果😂&quot; hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot; 接下来，我采取的配置方法和官方文档有点出入，但是亲测有效(我是win10系统)。 ​ 1. 在博客文件夹根目录右键打开git bash here ​ 2. export HEXO_ALGOLIA_INDEXING_KEY=&#39;Search-only API Key&#39; ​ 3. hexo algolia bash中出现类似提示说明配置成功 123INFO [Algolia] Identified 6 pages and posts to index.INFO [Algolia] Indexing chunk 1 of 1 (50 items each)INFO [Algolia] Indexing done. 选择动画背景 在 主题配置文件 中搜索并配置如下信息，最好四选一。1234567891011# Canvas-nestcanvas_nest: true # 背景有降落伞# three_wavesthree_waves: false # 背景有像海浪一样的小球球# canvas_linescanvas_lines: false # 背景有立体蜘蛛网# canvas_spherecanvas_sphere: false # 屏幕中央有一个爆炸状的球球 代码块语法高亮设置 在 站点配置文件 设置12345highlight: enable: true line_number: true auto_detect: true tab_replace: true 注意，网上的自定义样式优化代码中，有对代码块的优化，那部分代码需要注释掉。 添加RSS 打开博客根目录，shell安装插件，用如下代码: 1npm install --save hexo-generator-feed 在 站点配置文件 配置如下信息： 1234567891011121314# Extensions## Plugins: http://hexo.io/plugins/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &apos; &apos; 在 主题配置文件 中搜索并配置如下信息。 1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: &quot;/atom.xml&quot; 最后重新生成，只要在./public中看到atom.xml说明生成成功。 修改文章底部的tag图标 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;,当然也可以切换成任何你喜欢的小图标。 busuanzi统计访客人数在 主题配置文件 中搜索并配置如下信息，也可以根据自己的喜欢修改其他配置。1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 你是第 site_uv_footer: 个小伙伴 # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问 site_pv_footer: 人次 # custom pv span for one page only page_pv: false page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; page_pv_footer: 文章“热度” 首先要注册leancloud 左上角创建一个新的应用，获取AppID and AppKey。并且在网站的设置-&gt;安全中心中设置Web安全域名。 在 主题配置文件 中搜索并配置如下信息: 123456# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt; 打开/themes/next/layout/_macro/post.swig,我的代码修改成如下样子，也可以自由发挥。 1234567891011121314151617&#123;# LeanCould PageView #&#125;&#123;% if theme.leancloud_visitors.enable %&#125; &lt;span id=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; class=&quot;leancloud_visitors&quot; data-flag-title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;!-- 注释掉了图片 --&gt;&lt;!-- &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; &lt;/span&gt; --&gt; &#123;% if theme.post_meta.item_text %&#125; &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123;__(&apos;post.visitors&apos;)&#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;span class=&quot;leancloud-visitors-count&quot;&gt;&lt;/span&gt; &lt;span&gt;℃&lt;/span&gt; &lt;/span&gt;&#123;% endif %&#125; 最后，在/themes/next/languages/zh-Hans.yml,可以任意修改文字信息,我的代码如下所示: 12345678910post: created: 创建于 modified: 更新于 sticky: 置顶 posted: &apos;发表于:&apos; in: &apos;类别:&apos; read_more: 阅读全文 untitled: 未命名 toc_empty: 此文章未包含目录 visitors: 热度 字数统计功能配置 切换到根目录下，然后运行如下代码 1$ npm install hexo-wordcount --save 然后在 主题配置文件 中自定义如下配置： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: false totalcount: true separated_meta: true 这里我遇到一个大坑，在正文中写``标签一定要用代码块包括，否则可能会造成wordcount无法正常统计字数！一直显示为0 解决readme问题在github手动添加readme文件总是会被擦掉，会很麻烦，现在有两种解决方法。 第一种，在/blog/source中添加一个README.MDOWN文件，每次推送到github都可以正常解析。 第二种，在 站点配置文件 配置如下信息：1skip_render: README.md 自定义网站图标 在 主题配置文件 中搜索到如下这部分，1234567891011favicon: # small: /images/favicon-16x16-next.png # medium: /images/favicon-32x32-next.png # apple_touch_icon: /images/apple-touch-icon-next.png # safari_pinned_tab: /images/logo.svg small: # 你的图像 medium: # 你的图像 apple_touch_icon: # 你的图像 safari_pinned_tab: # 你的图像 #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 网站顶部加载条 已经被Next主题做成了默认的设置，在 主题配置文件 中配置：12345678910111213141516171819# Progress bar in the top during page loading.pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal 版权信息 已经被Next主题做成了默认的设置，在 主题配置文件 中配置： 12345678910111213141516171819footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2018 # Icon between year and copyright info. icon: heart # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: true 可以在每天博文生成的时候，将它作为一个文章模板。这样可以灵活地对于每篇文章设定是否需要版权信息。 我在/blog/scaffolds/中新建了一个next博文模板，代码如下： 12345678910---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;comments: truecategories: NLPtags: [tag1, tag2]post_copyright: true--- This is a summary&lt;!-- more --&gt; 在 站点配置文件 配置如下信息,每次新生成的文章都会使用此模板。 123#### Writingnew_post_name: :title.md # File name of new postsdefault_layout: next SEO配置 想要让我们的站点被搜索引擎收录，要提交给他们站点文件。 首先安装两个插件,并生成两个站点文件，sitemap.xml与baidusitemap.xml文件 1234npm install hexo-generator-sitemap --save-devhexo d -gnpm install hexo-generator-baidu-sitemap --save-devhexo d -g 在 站点配置文件 配置如下信息: 12345# SEO 优化sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下 12345678910User-agent: * Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://imbowei.com/sitemap.xmlSitemap: http://imbowei.com/baidusitemap.xml 在 主题配置文件 中配置如下。 12# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true 当然还要去百度站长和谷歌站长验证,bing验证 google_analytics 在 主题配置文件 中有若干种分析工具可以配置，我这里只配置了谷歌分析12# Google Analyticsgoogle_analytics: UA-balbalbal 20180809更新 为了提升新浏览器的性能，将Next主题原有的blog/themes/next/layout/_third_party/analytics/google_analytics.js脚本改为异步加载。如果 IE 9 以及不识别 async 脚本属性的旧版移动浏览器中会自动降级为同步加载和执行。 12345678&lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i['GoogleAnalyticsObject']=r;i[r]=i[r]||function()&#123; (i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) &#125;)(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); ga('create', '&#123;&#123; theme.google_analytics &#125;&#125;', 'auto'); ga('send', 'pageview');&lt;/script&gt; 123456&lt;script&gt;window.ga=window.ga||function()&#123;(ga.q=ga.q||[]).push(arguments)&#125;;ga.l=+new Date;ga('create', '&#123;&#123; theme.google_analytics &#125;&#125;', 'auto');ga('send', 'pageview');&lt;/script&gt;&lt;script async src='https://www.google-analytics.com/analytics.js'&gt;&lt;/script&gt; gitment评论系统先注册gitment,这是作者博客，按照官方文档搭建即可12345678910111213141516# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: false # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more language: # Force language, or auto switch by theme github_user: OnlyChristmas # MUST HAVE, Your Github ID github_repo: OnlyChristmas.github.io # MUST HAVE, The repo you use to store Gitment comments client_id: 8fc5c43242323koljoa # MUST HAVE, Github client id for the Gitment client_secret: 4ff9a214325312515151b04c400d46 # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled Mathjax数学公式支持 08.22更新 首先，在 主题配置文件 中修改如下配置：enable 为 true 12345# MathJax Supportmathjax: enable: false per_page: true cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML 在/scaffolds/draft.md文件中添加mathjax: false默认不启用mathjax（想要启用的文章再改为true），加快页面加载速度。 Hexo默认使用hexo-renderer-marked引擎进行网页渲染，其中对许多字符诸如划线、下划线、中括号等定义了转义。因此，在进行网页渲染时，数学公式中的这些字符先通过hexo-renderer-marked进行转义，就发生了歧义，而再通过MathJax渲染出来的数学公式，自然就显示不正常了。根据这种情况，我们更换渲染器。 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 在做完工作上面的工作后，行间公式就可以被正确渲染了，但行内公式却还存在着部分问题，这是因为对行间定义的转义字符和对行内定义的转义字符并不相同，还有部分已定义的行间转义字符会与数学公式中可能用到的字符发生冲突，用到这些字符的数学公式在渲染前仍被进行了转义。 打开node_modules\\kramed\\lib\\rules\\inline.js文件，做出如下两处修改。 1234567line 11,// escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,-&gt; escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,line 20,// em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,-&gt; em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 不要安装 `hexo-math` 和 `hexo-renderer-markdown-it-plus` 这两个包，否则出错。 自定义优化 优化虽好，可不要贪多哦。全打开的话网页加载会很慢。。。 百度分享next内置的代码在服务器升级https之后，百度分享的js请求不了。但是在 github上的轮子 可以修改后再其启用这一功能。 下载后得到static文件夹，放入到/themes/next/source/目录下。 将themes/next/layout/_partials/share/baidushare.swig中末尾处的代码进行替换。原代码 123&lt;script&gt; with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt; 替换代码 &lt;script&gt; with(document)0[(getElementsByTagName(&#39;head&#39;)[0]||body).appendChild(createElement(&#39;script&#39;)).src=&#39;/static/api/js/share.js?v=89860593.js?cdnversion=&#39;+~(-new Date()/36e5)]; &lt;/script&gt; 最后一定记得先hexo g再hexo s，否则可能会出现问题。 自定义网页title 在next\\source\\js\\src下新建脚本custom_title.js,将下面代码复制进去。 js脚本来源 1234567891011121314151617&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&apos;visibilitychange&apos;, function () &#123; if (document.hidden) &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/img/TEP.ico&quot;); document.title = &apos;╭(°A°`)╮ 爱我别走 ~&apos;; clearTimeout(titleTime); &#125; else &#123; $(&apos;[rel=&quot;icon&quot;]&apos;).attr(&apos;href&apos;, &quot;/favicon.ico&quot;); document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 这才对嘛~&apos; + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); 在next\\layout\\_layout.swig的&lt;body&gt; &lt;/body&gt;标签体内添加 12&lt;!--崩溃欺骗--&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom_title.js&quot;&gt;&lt;/script&gt; 鼠标点击桃心样式 在/themes/next/source/js/src/中新建love.js,其中写入的代码如下。 1!function(e,t,a)&#123;function r()&#123;for(var e=0;e&lt;n.length;e++)n[e].alpha&lt;=0?(t.body.removeChild(n[e].el),n.splice(e,1)):(n[e].y--,n[e].scale+=.004,n[e].alpha-=.013,n[e].el.style.cssText=&quot;left:&quot;+n[e].x+&quot;px;top:&quot;+n[e].y+&quot;px;opacity:&quot;+n[e].alpha+&quot;;transform:scale(&quot;+n[e].scale+&quot;,&quot;+n[e].scale+&quot;) rotate(45deg);background:&quot;+n[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;var n=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,function(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),function()&#123;var a=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;a&amp;&amp;a(),function(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,n.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;),t.body.appendChild(a)&#125;(e)&#125;&#125;(),r()&#125;(window,document); 在/themes/next/layout/_layout.swig中的&lt;body&gt;&lt;/body&gt;标签体内添加下面代码。 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 鼠标点击烟花爆炸样式 在/themes/next/source/js/src/中新建fireworks.js,其中写入的代码如下。 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 在/themes/next/layout/_layout.swig中的&lt;body&gt;&lt;/body&gt;标签体内添加下面代码。 123456 &lt;!-- 页面点击烟花爆炸 --&gt;&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 在 主题配置文件 中添加如下配置： 12# Fireworks 鼠标点击烟花爆炸fireworks: true 自定义鼠标图片 在themes/next/source/css/_custom/custom.styl中，添加如下代码 12345678// 鼠标样式&#123;cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important&#125;:active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important&#125;​ 123456789- 上面的url必须是ico 图片，想要自定义图片可以自行上传七牛云获取外链（加速），也可以本地加载。我就偷懒直接用其他博主的链接了。#### 网易云音乐添加歌单进正文页面[怎么生成歌单的外链看这里](https://jingyan.baidu.com/article/d7130635dcdf6813fdf475c7.html)然后将生成的代码加入到想要放入的位置就好了（适当调整大小）。 1234567#### 设置fork me on github- [在这里挑选样式并复制代码](http://tholman.com/github-corners/) 或者[这里](https://blog.github.com/2008-12-19-github-ribbons/)也可以。- 刚才复制的代码放到`themes/next/layout/_layout.swig`文件中，`&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;`的下面，并且记得`herf`改为自己的github地址。#### 配置文章结束模板- 在`\\themes\\next\\layout\\_macro`文件夹中，新建`passage-end-tag.swig`，并且写入如下代码(当然也可以自由发挥): -------------本文结束 感谢您的时间------------- 1- 接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在`post-body` 之后， `post-footer` 之前添加如下代码。（在我文件大约360的位置） &lt;div&gt; {% if not is_index %} {% include 'passage-end-tag.swig' %} {% endif %} &lt;/div&gt; 1- 最后在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中添加如下配置： 文章末尾添加“本文结束”标记passage_end_tag: enabled: true123456789101112131415161718192021222324252627282930- 实现效果如本文结尾所示#### 头像制作按照**NEXT**主题，上传的网站图片需要满足一定的规格要求。- 网站图标：我这里在一个在线艺术字网站，设计了一个汉字，下载图片（转换SVG），并且尽量在保证图片清晰度的情况下减小图片大小，以保证网站的加载速度。[很棒的免费在线图片压缩网站](https://tinypng.com/)- 个人头像：这里涉及到方照片裁剪呈圆形图片的问题。 - 首先，你需要安装一个PS； - 然后，左上角选取圆形套索。按住`SHIFT`键的同时选取图片满意的部分； ![方头像变成圆形_1.png](https://i.loli.net/2018/09/07/5b928d3d3221d.png) - 在图片中，右键”通过拷贝的图层“。然后勾选掉下面图层的眼睛标识，得到下图所示的样子。 ![方头像变成圆形_2.png](https://i.loli.net/2018/09/07/5b928e5905fdc.png) - 接下来用裁剪工具可以去掉多余的透明背景。 - 在顶部选项卡，”图像--&gt;图像大小“可以根据需要调整图像的大小。 - 最后，照例为了保证网站的加载速度，尽可能的在保证图片质量的前提下压缩图片。[很棒的免费在线图片压缩网站](https://tinypng.com/)#### 头像旋转- 首先打开头像选项,在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中。 in theme directory(source/images): # 你的头像 in site directory(source/uploads): /uploads/avatar.gifavatar: # 你的头像1- 打开`\\themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author.styl`，在里面添加如下代码： .site-author-image { display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; / 头像圆形 / border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; / 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]/ / 鼠标经过头像旋转360度 / -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;}img:hover { / 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;/ / 鼠标经过头像旋转360度 / -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);}/ Z 轴旋转动画 /@-webkit-keyframes play { 0% { -webkit-transform: rotateZ(0deg); } 100% { -webkit-transform: rotateZ(-360deg); }}@-moz-keyframes play { 0% { -moz-transform: rotateZ(0deg); } 100% { -moz-transform: rotateZ(-360deg); }}@keyframes play { 0% { transform: rotateZ(0deg); } 100% { transform: rotateZ(-360deg); }}123#### 站点上线时间- 在`/themes/next/layout/_partials/footer.swig`文件尾部加上，并且修改你的上线时间。 载入天数…载入时分秒… var now = new Date(); function createtime() { var grt= new Date(\"07/06/2018 11:11:00\");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 ){hnum = \"0\" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = \"0\" + mnum;} seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 ){snum = \"0\" + snum;} document.getElementById(\"timeDate\").innerHTML = \"本站已安全运行 \"+dnum+\" 天 \"; document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\"; } setInterval(\"createtime()\",250); 1234567#### daovoice- 在[daovoice](https://dashboard.daocloud.io/)注册账号可以得到 app_id- 在&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;中添加如下配置 # Online contact daovoice: true daovoice_app_id: # 这里填你刚才获得的 app_id 12- 在`/themes/next/layout/_partials/head.swig`,添加如下代码： 123#### 阅读排行榜- `hexo n page top`新建页面，编辑自动生成的index.md文件，代码如下,替换好你的 __leancloud账号__ 和页面链接（一共三处） AV.initialize(\"leancloud_appid\", \"leancloud_appkey\"); var time=0 var title=\"\" var url=\"\" var query = new AV.Query('Counter'); query.notEqualTo('id',0); query.descending('time'); query.limit(1000); query.find().then(function (todo) { for (var i=0;i 768px & < 991px // ================================================= +tablet() { // Posts in blocks. .content-wrap { padding: $content-tablet-padding; background: white; } 123456789#### 添加代码块复制按钮- 下载[clipboard.min.js](https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js)并将其放到`.\\themes\\next\\source\\js\\src\\`目录下。- 在`.\\themes\\next\\source\\js\\src\\`目录下，创建`clipboard-use.js`，文件内容如下： /*页面载入完成后，创建复制按钮*/ !function (e, t, a) { /* code */ var initCopyCode = function(){ var copyHtml = ''; copyHtml += ''; copyHtml += ' copy'; copyHtml += ''; $(\".highlight .code pre\").before(copyHtml); new ClipboardJS('.btn-copy', { target: function(trigger) { return trigger.nextElementSibling; } }); } initCopyCode(); }(window, document); 1- 在`.\\themes\\next\\source\\css\\_custom\\custom.styl`样式文件中添加下面代码： //代码块复制按钮 .highlight{ //方便copy代码按钮（btn-copy）的定位 position: relative; } .btn-copy { display: inline-block; cursor: pointer; background-color: #eee; background-image: linear-gradient(#fcfcfc,#eee); border: 1px solid #d5d5d5; border-radius: 3px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-appearance: none; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; -webkit-transition: opacity .3s ease-in-out; -o-transition: opacity .3s ease-in-out; transition: opacity .3s ease-in-out; padding: 2px 6px; position: absolute; right: 5px; top: 5px; opacity: 0; } .btn-copy span { margin-left: 5px; } .highlight:hover .btn-copy{ opacity: 1; } 1- 在`.\\themes\\next\\layout\\_layout.swig`文件中，添加引用要在`&lt;body&gt;&lt;/body&gt;`标签内： 1234567891011#### high一下- 打开 `blog\\themes\\next\\layout\\_partials\\header.swig` ，在`&lt;ul&gt; ... /ul&gt;` 标签之间加入以下代码： &lt;a title=”把这个链接拖到你的工具栏中,任何网页都可以High” href=’javascript:( function go() { var songs = [ “http://www.170mv.com/kw/other.web.ri01.sycdn.kuwo.cn/resource/n3/43/85/4088203395.mp3“, “http://www.170mv.com/kw/other.web.rm01.sycdn.kuwo.cn/resource/n3/10/77/3147640053.mp3“, “http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3“, “”]; function c() {var e = document.createElement(“link”);e.setAttribute(“type”, “text/css”);e.setAttribute(“rel”, “stylesheet”);e.setAttribute(“href”, f);e.setAttribute(“class”, l);document.body.appendChild(e)} function h() {var e = document.getElementsByClassName(l);for (var t = 0; t &lt; e.length; t++) { document.body.removeChild(e[t])}} function p() {var e = document.createElement(“div”);e.setAttribute(“class”, a);document.body.appendChild(e);setTimeout(function() { document.body.removeChild(e)}, 100)} function d(e) {return { height : e.offsetHeight, width : e.offsetWidth}} function v(i) {var s = d(i);return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r} function m(e) {var t = e;var n = 0;while (!!t) { n += t.offsetTop; t = t.offsetParent}return n} function g() {var e = document.documentElement;if (!!window.innerWidth) { return window.innerHeight} else if (e &amp;&amp; !isNaN(e.clientHeight)) { return e.clientHeight}return 0} function y() {if (window.pageYOffset) { return window.pageYOffset}return Math.max(document.documentElement.scrollTop, document.body.scrollTop)} function E(e) {var t = m(e);return t &gt;= w &amp;&amp; t &lt;= b + w} function S() {var e = document.getElementById(“audio_element_id”);if(e != null){ var index = parseInt(e.getAttribute(“curSongIndex”)); if(index &gt; songs.length - 2) { index = 0; } else { index++; } e.setAttribute(“curSongIndex”, index); N();} e.src = i;e.play()} function x(e) {e.className += “ “ + s + “ “ + o} function T(e) {e.className += “ “ + s + “ “ + u[Math.floor(Math.random() * u.length)]} function N() {var e = document.getElementsByClassName(s);var t = new RegExp(“\\\\b” + s + “\\\\b”);for (var n = 0; n &lt; e.length; ) { e[n].className = e[n].className.replace(t, “”)}} function initAudioEle() {var e = document.getElementById(“audio_element_id”);if(e === null){ e = document.createElement(“audio”); e.setAttribute(“class”, l); e.setAttribute(“curSongIndex”, 0); e.id = “audio_element_id”; e.loop = false; e.bgcolor = 0; e.addEventListener(“canplay”, function() { setTimeout(function() { x(k) }, 500); setTimeout(function() { N(); p(); for (var e = 0; e &lt; O.length; e++) { T(O[e]) } }, 15500)}, true);e.addEventListener(“ended”, function() { N(); h(); go();}, true);e.innerHTML = “ If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser. “;document.body.appendChild(e);}} initAudioEle();var e = 30;var t = 30;var n = 350;var r = 350; var curSongIndex = parseInt(document.getElementById(“audio_element_id”).getAttribute(“curSongIndex”));var i = songs[curSongIndex]; var s = “mw-harlem_shake_me”;var o = “im_first”;var u = [“im_drunk”, “im_baked”, “im_trippin”, “im_blown”];var a = “mw-strobe_light”; / harlem-shake-style.css，替换成你的位置，也可以直接使用：//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css /var f = “//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css”; var l = “mw_added_css”;var b = g();var w = y();var C = document.getElementsByTagName(“*”);var k = null;for (var L = 0; L &lt; C.length; L++) {var A = C[L];if (v(A)) { if (E(A)) { k = A; break }}}if (A === null) {console.warn(“Could not find a node of the right size. Please try a different page.”);return}c();S();var O = [];for (var L = 0; L &lt; C.length; L++) {var A = C[L];if (v(A)) { O.push(A)}}})()’&gt;High一下&lt;/a&gt; &lt;/li&gt; 12345678910- &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;这段代码貌似有个bug，在播放曲目为空的时候，博客就会尬舞，退出high一下，刷新界面就好&lt;/p&gt;&lt;/div&gt;#### 跳动的心- 在&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 配置如下信息： footer: icon: heart1- 打开 `/blog/themes/next/layout/_partials/footer.swig`文件， 将 `&lt;span class=&quot;with-love&quot;&gt;`换成下面代码： 1- 打开`/blog/themes/next/source/css/_custom/custom.styl`文件，下面代码(颜色可以自定义)： // 自定义页脚跳动的心样式@keyframes heartAnimate { 0%,100%{transform:scale(1);} 10%,30%{transform:scale(0.9);} 20%,40%,60%,80%{transform:scale(1.1);} 50%,70%{transform:scale(1.1);}} heart {animation: heartAnimate 1.33s ease-in-out infinite; }.with-love { color: rgb(255, 113, 168);}12345#### 添加404页面- 在`blog/source/`文件夹下新建`404.html`并加入如下代码： &lt;!DOCTYPE HTML&gt; &lt;/html&gt;123456789#### 调试优化- 在`blog/package.json`中并列`&quot;dependencies&quot;: &#123;&#125;`添加如下代码： “scripts”: { “dev”: “hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server —debug” }12345678- 现在我们只需 `npm run dev` 一条命令就可以启动本地的调试环境#### 博客内容压缩- 在`blog/package.json`中 `&quot;dependencies&quot;: &#123;&#125;`后面平行的添加如下内容： “devDependencies”: { “gulp-asset-rev”: “^0.0.15”, “gulp-clean-css”: “^3.9.0”, “gulp-concat”: “^2.6.1”, “gulp-debug”: “^3.1.0”, “gulp-htmlclean”: “^2.7.15”, “gulp-htmlmin”: “^3.0.0”, “gulp-if”: “^2.0.2”, “gulp-changed”: “^3.1.0”, “gulp-make-css-url-version”: “^0.0.13”, “gulp-modify-css-urls”: “^0.2.2”, “gulp-plumber”: “^1.1.0”, “gulp-uglify”: “^3.0.0”, “gulp-useref”: “^3.1.2”, “gulp-util”: “^3.0.8”, “hexo-deployer-git”: “^0.3.1”, “hexo-encrypt”: “^0.5.1”, “hexo-generator-json-content”: “^3.0.1”, “hexo-generator-search”: “^2.1.1”, “hexo-generator-searchdb”: “^1.0.8”, “hexo-server”: “^0.2.2”, “run-sequence”: “^2.2.0”}1- 然后输入以下命令安装依赖包 npm config set registry https://registry.npm.taobao.orgnpm install1- 在`blog/gulpfile.js`中添加如下代码（没有的话则新建）： / npm install 超时请使用：(两条命令在当前文件目录下执行) npm config set registry https://registry.npm.taobao.org npm install 或者： npm install -g cnpm —registry=https://registry.npm.taobao.org cnpm install /var gulp = require(‘gulp’);var debug = require(‘gulp-debug’);var cleancss = require(‘gulp-clean-css’); //css压缩组件var cssversion = require(‘gulp-make-css-url-version’); //css资源添加版本号var uglify = require(‘gulp-uglify’); //js压缩组件var htmlmin = require(‘gulp-htmlmin’); //html压缩组件var htmlclean = require(‘gulp-htmlclean’); //html清理组件var assetRev = require(‘gulp-asset-rev’); //版本控制插件var runSequence = require(‘run-sequence’); //异步执行组件var changed = require(‘gulp-changed’); //文件更改校验组件var gulpif = require(‘gulp-if’) //任务 帮助调用组件var plumber = require(‘gulp-plumber’); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件// 压缩js文件gulp.task(‘compressJs’, function () { var option = { // preserveComments: ‘all’,//保留所有注释 mangle: true, //类型：Boolean 默认：true 是否修改变量名 compress: true //类型：Boolean 默认：true 是否完全压缩 } return gulp.src([‘./public//*.js’,’!./public//.min.js’]) //排除的js .pipe(gulpif(!isScriptAll, changed(‘./public’))) .pipe(gulpif(isDebug,debug({title: ‘Compress JS:’}))) .pipe(plumber()) .pipe(uglify(option)) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest(‘./public’)); //输出到目标目录});// 压缩css文件gulp.task(‘compressCss’, function () { return gulp.src(‘./public/**/.css’) .pipe(gulpif(!isScriptAll, changed(‘./public’))) .pipe(gulpif(isDebug,debug({title: ‘Compress CSS:’}))) .pipe(plumber()) .pipe(cleancss({rebase: false})) .pipe(gulp.dest(‘./public’));});// 压缩html文件gulp.task(‘compressHtml’, function () { var cleanOptions = { protect: /&lt;!—%fooTemplate\\b.?%—&gt;/g, //忽略处理 unprotect: /]\\btype=”text\\/x-handlebars-template”[\\s\\S]+?&lt;\\/script&gt;/ig //特殊处理 } var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 ==&gt; removeEmptyAttributes: true, //删除所有空格作属性值 ==&gt; removeScriptTypeAttributes: true, //删除的type=”text/javascript” removeStyleLinkTypeAttributes: true,//删除和的type=”text/css” removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp.src(‘./public/*/.html’) .pipe(gulpif(isDebug,debug({title: ‘Compress HTML:’}))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest(‘./public’));});// 默认任务gulp.task(‘default’, function () { runSequence.options.ignoreUndefinedTasks = true; runSequence(‘compressHtml’,’compressCss’,’compressJs’);}); 1- 然后我们的上传命令就变成了 hexo ggulphexo d1&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;其实还可以继续偷懒，没办法，就是懒人才能改变世界……在刚才添加的`&quot;devDependencies&quot;: &#123;&#125;`后面平行的添加如下代码&lt;/p&gt;&lt;/div&gt; “scripts”: { “submit”: “hexo clean &amp;&amp; hexo generate &amp;&amp; gulp &amp;&amp; hexo d” }123456789&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;这样之后，上传就变为了一条命令`npm run sumbit`&lt;/p&gt;&lt;/div&gt;#### 自动打开脚本- 为了每次新建博文我们可以直接编辑，而不是在一堆文件中找到它再打开。我们需要在博客根目录新建`script`文件夹（已有就不用新建）- 在新建的文件夹新建一个`.js`文件，其中填写的代码如下所示。[代码来自这里](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)win用户 var spawn = require(‘child_process’).exec; // Hexo 2.x 用户复制这段hexo.on(‘new’, function(path){ spawn(‘start “markdown编辑器绝对路径.exe” ‘ + path);}); // Hexo 3 用户复制这段hexo.on(‘new’, function(data){ spawn(‘start “markdown编辑器绝对路径.exe” ‘ + data.path);});1Mac用户 var exec = require(‘child_process’).exec; // Hexo 2.x 用户复制这段hexo.on(‘new’, function(path){ exec(‘open -a “markdown编辑器绝对路径.app” ‘ + path);});// Hexo 3 用户复制这段hexo.on(‘new’, function(data){ exec(‘open -a “markdown编辑器绝对路径.app” ‘ + data.path);});12345678#### 仓库备份博客- 依次执行下列命令 git init # 初始化仓库git remote add origin git@github.com # 从仓库复制你的地址 .gitgit pull origin master1- 在`/blog/`目录下新建`.gitignore`文件（如果没有的话），里面内容如下。主要是为了忽略`./public`等无需备份的文件，加快备份速度。 .DS_StoreThumbs.dbdb.json.lognode_modules/public/.deploy/1- 本地写完博客上传后，只要依次运行下列命令就可以备份文件。 git add .git commit -m “更新hexo源文件”git push origin master1- 当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。 git pull origin master1234567891011121314151617- 在你的其他电脑，只要`git clone git@github.com #你的仓库地址`就可以同步博客文件了。&lt;!-- - &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;有在coding备份代码上传不成功的情况，一种比较懒得解决办法就是将配置好的博客在另一台电脑配置一下，反正我们每次需要同步的文件是以博客为主。&lt;/p&gt;&lt;/div&gt; --&gt;#### 自动备份博客脚本- 程序员在变懒这件事情上绝对有着永无止境的追求！我们不仅会担心博客本地源文件的丢失，还会烦恼多台电脑文件同步困难。那么我们怎么解决这样的困境呢？- `npm install --save shelljs`安装这个模块- 在`/blog/scripts/`文件夹下新建一个js脚本（任意名字）,如果没有`/blog/scripts/`目录，请新建一个。脚本内容如下：&lt;span id=&quot;inline-black&quot;&gt;更改第十七行的内容&lt;/span&gt; require(‘shelljs/global’); try { hexo.on(‘deployAfter’, function() {//当deploy完成后执行备份 run(); });} catch (e) { console.log(“产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：” + e.toString());} function run() { if (!which(‘git’)) { echo(‘Sorry, this script requires git’); exit(1); } else { echo(“======================Auto Backup Begin===========================”); cd(‘####你的地址’); //此处修改为博客根目录路径 if (exec(‘git add —all’).code !== 0) { echo(‘Error: Git add failed’); exit(1); } if (exec(&#39;git commit -am &quot;Form auto backup script\\&#39;s commit&quot;&#39;).code !== 0) { echo(&#39;Error: Git commit failed&#39;); exit(1); } if (exec(&#39;git push origin master&#39;).code !== 0) { echo(&#39;Error: Git push failed&#39;); exit(1); } echo(&quot;==================Auto Backup Complete============================&quot;) } }1&lt;div class=&quot;note success&quot;&gt;&lt;p&gt; 这样在每次`hexo d`命令之后就能自动备份博客到设置好的代码仓库。成功后会显示如下类似内容 &lt;/p&gt;&lt;/div&gt; INFO Deploy done: git======================Auto Backup Begin===========================[master cea81b4] Form auto backup script’s commit 1 file changed, 1 insertion(+), 1 deletion(-)To #你的仓库地址 8f2653b..cea81b4 master -&gt; master==================Auto Backup Complete============================123456789101112&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt; 此脚本在blog文件夹没有任何改动的情况下会报错，但不会影响上传。 &lt;/p&gt;&lt;/div&gt;#### 博客自定义写作样式- 这里从[neveryu的建站日志](https://neveryu.github.io/categories/Hexo/)引用部分代码，放入到`themes/next/source/css/_custom/custom.styl`中,即可生效。 // 下载样式a#download { display: inline-block; padding: 0 10px; color: #000; background: transparent; border: 2px solid #000; border-radius: 2px; transition: all .5s ease; font-weight: bold; &amp;:hover { background: #000; color: #fff; }} //阅读全文样式.post-more-link .btn { position:relative; border: 2px solid #000; border-radius: 2px; padding: 0 10px; font-weight: bold; background: transparent; transition: all .5s ease; &amp;:hover { background: #000; color: #eee; }}// // 颜色块-黄span#inline-yellow { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #f0ad4e;}// 颜色块-黑span#inline-black { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: black;}// 颜色块-绿span#inline-green { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #5cb85c;}// 颜色块-蓝span#inline-blue { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #2780e3;}// 颜色块-紫span#inline-purple { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #9954bb;}// 颜色块-红span#inline-red { display:inline; padding:.2em .6em .3em; font-size:80%; font-weight:bold; line-height:1; color:#fff; text-align:center; white-space:nowrap; vertical-align:baseline; border-radius:0; background-color: #df3e3e;} // 左侧边框红色块级p#div-border-left-red { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #df3e3e;}// 左侧边框黄色块级p#div-border-left-yellow { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #f0ad4e;}// 左侧边框绿色块级p#div-border-left-green { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #5cb85c;}// 左侧边框蓝色块级p#div-border-left-blue { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #2780e3;}// 左侧边框紫色块级p#div-border-left-purple { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #9954bb;}// 右侧边框红色块级p#div-border-right-red { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #df3e3e;}// 右侧边框黄色块级p#div-border-right-yellow { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #f0ad4e;}// 右侧边框绿色块级p#div-border-right-green { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #5cb85c;}// 右侧边框蓝色块级p#div-border-right-blue { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #2780e3;}// 右侧边框紫色块级p#div-border-right-purple { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-right-width: 5px; border-radius: 3px; border-right-color: #9954bb;}// 上侧边框红色p#div-border-top-red { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #df3e3e;}// 上侧边框黄色p#div-border-top-yellow { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #f0ad4e;}// 上侧边框绿色p#div-border-top-green { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #5cb85c;}// 上侧边框蓝色p#div-border-top-blue { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #2780e3;}// 上侧边框紫色p#div-border-top-purple { display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-top-width: 5px; border-radius: 3px; border-top-color: #9954bb;} //动画模块//第一篇博客中-精于心，简于形-的动画（https://neveryu.github.io/page/2/）span#top-down-samll { display:inline; position:relative; border-top:1px solid #222; border-bottom:1px solid #222; font-size:110%; cursor:pointer; &amp;:hover { background-color: #000; color: #fff; animation: animate-yu-1 3s ease-in; }}@keyframes animate-yu-1 { 0% { left:-10px; top:0px; } 10% { left:10px; top:0px; } 20% { left:-8px; top:0px; } 30% { left:8px; top:0px; } 40% { left:-5px; top:0px; } 50% { left:5px; top:0px; } 60% { left:-3px; top:0px; } 70% { left:3px; top:0px; } 80% { left:-1px; top:0px; } 90% { left:1px; top:0px; } 100% { left:0px; top:0px; }}//留言页面-[最近访客]-的样式span#top-down { display:inline; position:relative; border-top:1px solid #222; border-bottom:1px solid #222; font-size:130%;}123456789101112131415161718192021---### 写作辅助---#### 新建文件类型- `hexo new post &quot;title&quot;` 用来创建新文章- `hexo new page &quot;title&quot;` 用来创建新菜单页面- `hexo new draft &quot;title&quot;` 用来创建新草稿- `hexo new &quot;title&quot;` 用来创建新文章(默认)#### 关于目录- 目录的层级靠`###`和`####`来维护，相差几个#就是相差几级的目录。- 目录的最高层级为`##`#### 主题自带样式 note 标签&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;首先要在&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 配置如下信息：&lt;/p&gt;&lt;/div&gt; Note tag (bs-callout).note: Note tag style values:- simple bs-callout old alert style. Default.- modern bs-callout new (v2-v3) alert style.- flat flat callout style with background, like on Mozilla or StackOverflow.- disabled disable all CSS styles import of note tag. style: flat icons: true border_radius: 3 Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 012 default灰色样式调用方式 &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;primary紫色样式调用方式 &lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;success绿色样式调用方式 &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;info蓝色样式调用方式 &lt;div class=&quot;note info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;warning橙色样式调用方式 &lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;danger红色样式调用方式 &lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;danger no-icon红色无图标样式调用方式 &lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;1234567891011121314151617&lt;div class=&quot;note default&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt; just try &lt;/p&gt;&lt;/div&gt;#### 自定义数字块- `~/themes/next/source/css/_custom/custom.styl`中添加下列代码： // 自定义的数字块 span#inline-toc { display: inline-block; border-radius: 80% 100% 90% 20%; background-color: rgb(227, 242, 253); color: #555; padding: 0.05em 0.4em; margin: 2px 5px 2px 0px; line-height: 1.5;}1234567- 这是调用方式`&lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt;`和样式展示 &lt;span id=&quot;inline-toc&quot;&gt;1.&lt;/span&gt;#### 自定义颜色块自定义的**颜色块**标签，这么用: &lt;span id=&quot;inline-yellow&quot;&gt;yellow&lt;/span&gt;&lt;span id=&quot;inline-black&quot;&gt;black&lt;/span&gt;&lt;span id=&quot;inline-green&quot;&gt;green&lt;/span&gt;&lt;span id=&quot;inline-blue&quot;&gt;blue&lt;/span&gt;&lt;span id=&quot;inline-red&quot;&gt;red&lt;/span&gt;&lt;span id=&quot;inline-purple&quot;&gt;purple&lt;/span&gt; 颜色块标签内容123&lt;p id=&apos;div-border-right-red&apos;&gt; 块级框该这么用（自定义的比Next主题内置的优化要更加清晰好用）:&lt;/p&gt;&lt;p id=&apos;div-border-top-red&apos;&gt; 上侧块级框总共5个类型 &lt;/p&gt;&lt;p id=&apos;div-border-left-red&apos;&gt; 类似的，侧边块级框比颜色块少一个黑色，分左右两种，总共十个类型 &lt;/p&gt; 12&lt;span id=&quot;top-down&quot;&gt;文字的上下加横线&lt;/span&gt; 文字的上下加横线12&lt;span id=&quot;top-down-samll&quot;&gt;鼠标放这里有惊喜&lt;/span&gt; 小一号文字，上下加横线12345678#### 文本居中&#123;% cq %&#125;人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！&#123;% endcq %&#125; 人生乃是一面镜子，从镜子里认识自己，我要称之为头等大事，也只是我们追求的目的！ ``` 参考文献 打造个性超赞博客Hexo+NexT+GithubPages的超深度优化 Hexo的Hnext主题个性化教程(33个小优化) neveryu的建站日志 thief的建站日志 很好的写作辅助","categories":[{"name":"blog","slug":"blog","permalink":"https://imbowei.com/categories/blog/"}],"tags":[{"name":"Github-pages","slug":"Github-pages","permalink":"https://imbowei.com/tags/Github-pages/"},{"name":"Hexo","slug":"Hexo","permalink":"https://imbowei.com/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://imbowei.com/tags/Next/"},{"name":"Web-design","slug":"Web-design","permalink":"https://imbowei.com/tags/Web-design/"}]},{"title":"【NLP competition】中文信息学会 文本溯源技术评测（SMP ETST）Ranking First","slug":"【NLP比赛】中国中文信息学会文本溯源技术评测（SMP-ETST）Ranking-First","date":"2018-07-09T00:10:43.000Z","updated":"2018-09-08T01:38:00.821Z","comments":true,"path":"2018/07/09/【NLP比赛】中国中文信息学会文本溯源技术评测（SMP-ETST）Ranking-First/","link":"","permalink":"https://imbowei.com/2018/07/09/【NLP比赛】中国中文信息学会文本溯源技术评测（SMP-ETST）Ranking-First/","excerpt":"此次的文本溯源项目我们以n-gram为核心思想，构建候选句子对的评测标准。用TF-IDF和词袋模型的的思想来预筛选候选句子对，大大提升算法效率。最后用了两种切词方式的模型融合和规则后处理（提升很小）。Final-Leaderboard Ranking First","text":"此次的文本溯源项目我们以n-gram为核心思想，构建候选句子对的评测标准。用TF-IDF和词袋模型的的思想来预筛选候选句子对，大大提升算法效率。最后用了两种切词方式的模型融合和规则后处理（提升很小）。Final-Leaderboard Ranking First 2018.07.24更新经过组委会测试算法的高效性和原创性，我们最终获得了SMP-ETSE测评的第一名。最终获奖名单评测任务介绍测评代码开源 序以前没有参加过NLP类型的比赛和测评，每天看论文想idea的日子有些许的枯燥和单调。就和一个同学趁着期末考试复习期间（实力作死）的空闲时间，抽出时间玩了玩这个比赛。SMP 2018 测评地址 题目分析本次的文本溯源题目和同期的另外两个比赛其实很相似。蚂蚁金服计算句子相似度拍拍贷识别相似的问题句子但文本溯源又和另外两个题有着本质的不同，因为主办方放出的数据并没有任何标签。很明显，我们需要一个无监督的算法来找到句子之间的潜在语义关系，红的发紫的深度学习在此没有用武之地。恐怕这也是为什么这个测评的参加人数如此之少的主要原因吧。 验证集 待溯源句子1000 候选句子约10W 测试集 待溯源句子4000 候选句子约500W 思路一根据我们之前的一些经验，探讨两个句子之前的相似性的时候，n-gram就是一个简单，并且行之有效的方法。这也是我们最早的想法。 思路二另一个想法，传统的NLP parsing技术在理论上会比简单的n-gram 方法更好的分析句子结构，从而帮助计算机理解句子语义，找到对应的句子。但是，整个代码构建工程量大，实现难度较高。 我们的当然要从简单的第一种思路入手尝试。（也是我们最后采用的方案） 预处理按照思路一构建一个简单的baseline，在没有调参和仔细预处理之前，在验证集上取得了0.8737 的成绩，这也给了我们继续这一方法的信心。 随后我们反过头来仔细进行预处理。 处理影响分词效果的杂乱字符 直接删除 将他们替换为空格 对于数据进行全半角格式转换（计算机并不认为相同字符的全半角格式是一样的字符） 符号预处理之后，在验证集获得了0.9008的表现 ，然后又轻微调参（根据不等式，我们知道，P、R相等的时候，F值表现会是最好的），验证集表现上涨到了0.9087。 切词在预处理方面，切词是最令人头疼的第一个地方。我们有了很多开源的切词工具，最终选了用了thulac和jieba两种。 我们发现这两种切词方法的本身都有一定的局限性，但是又有一定的互补性。虽然用两种切词工具在时间上会对花费很多，但是为了更好的算法效果，我们采用两种切词方式（后来想想好像有点亏，这样的处理大约只能带来一个点的提升，但花费了大量的时间）。 python 代码运行效率的低效众所周知，对于测试集500W句子的数据量来说，可谓是十分头疼。 解决方式也很简单，直接调用两种切词方法的c++接口就好了。就可以体验飞一般的速度。 值得注意的是，thulac 的切词包在大数据量的情况下，会有崩溃的情况，原因未知。我们的处理方式是将500W数据切分成了四份，调用四次thulac的c++接口（多了三次的model载入时间），切词后再将所有数据合并起来。 TF-IDFn-gram 方法固然简单高效，但也很容易想到一个缺陷。我们不应该对于所有的gram“一视同仁”！ 所以我们建立了TF-IDF，根据每个词语在文档中的几个句子中出现，设立TF。并且设立反向的IDF，为了不同频次的词语反向加权。 这使我们的验证集F值表现达到了0.9356。 优化目标对于深度学习，大家都知道。当我们的loss和最后的评价指标越相近的时候，模型的训练效果也往往是更好的。 一个简单的n-gram 通常是仅仅考虑精确率，我们为什么不进一步的考虑召回率呢？甚至直接对于F值进行优化？这里有一篇ACL2014的文章作为参考 这样的优化操作之后，我们的验证集表现达到了0.9430 倒排索引（词袋模型）以上主要是在算法精度上的优化，并且没有可以的优化算法效率。导致我们在每一次对齐的时候都要对10W数据做遍历比较…… 为了使算法快点出结果，我们用了多进程的方法，但这显然不是长久之计。 经过观察发现。10W句子中的绝大多数句子，算法评价两个句子的相关性，都极低，对于我们的溯源任务造不成任何干扰，那么如何去掉他们呢？ 不难想到，我们的算法基于n-gram，而对齐表现差的句子显然和目标句子重合的n-gram非常少。那么，我们为什么不讲这样的句子直接过滤掉呢？可以减少句子对的评价次数几百倍，大大提升算法运行效率！ 具体的，我们首先用one gram对句子进行过滤（候选句子中连一个词语都没有出现在目标句子中，全部去掉不考虑）；进一步的，还可以对 two gram 设定一定的阈值。让我们在算法精度和运行速度上进行权衡。 最终，我们算法经过此处理后。在10W验证集上的表现，从单进程500min缩短为了40s 以下，还没有损失精度！ 模型融合 &amp; 后处理以上提到了两种切词方式，以及两种预处理方式。为了取得更好的算法效果。我们从它们排列组合后的四种方法中挑取了两个互补性较强的model进行模型融合。验证集达到了0.9549的数值水准。 然后我们肉眼观察一些阈值附近的“疑似”对齐错误的句子。建立几个规则性的后处理操作。验证集达到了0.96036的数值水准。 最终测试集结果 硬件环境 Intel(R) Xeon(R) CPU E5-2697 v4 @ 2.30GHz 内存 188 GB Linux version 3.10.0-514.el7.x86_64 ， gcc version 4.8.5 20150623 (Red Hat 4.8.5-11) Python 3.4.5 ，numpy 运行时间参考 预处理时间共 1267秒 （21.1分钟) 符号处理 &amp; 编码格式转换：218秒 THULAC分词（c++版本）：272秒 jieba分词（c++版本）：112秒 计算TF-IDF 164秒 建立倒排索引表 501秒 核心算法：115秒 (1.9分钟） 最后数值表现 F1-Measure ： 0.801258108905052 Precision： 0.7133356667833392 Recall ： 0.9139013452914798 Ranking： First 尾声虽然时间紧迫，经验不足。在比赛中和队友都有一些失误，但最终侥幸排名第一。 做的不够好的地方： 预处理不够精细 切词处理没有去增加一个字典 懒得去寻找同义词源，或者训练一个词语级别的翻译模型。理论上可以进一步提高算法表现。 由于留给测试集出结果的时间只有24h，事先准备的代码不够充分。 在测试集阈值设定的时候陷入了思维误区，算法最终的F值结果损失精度百分之三以上。 做得比较好的地方： 基本的n-gram 思路简单而高效。 TF-IDF使算法的评价方式更加合理。 倒排索引是使算法高效，简洁。 艰苦卓绝的后处理和肉眼调参…… 最后：感谢队友这些天的付出，也感谢努力的自己。","categories":[{"name":"NLP","slug":"NLP","permalink":"https://imbowei.com/categories/NLP/"},{"name":"Competition","slug":"NLP/Competition","permalink":"https://imbowei.com/categories/NLP/Competition/"}],"tags":[{"name":"Paraphrase","slug":"Paraphrase","permalink":"https://imbowei.com/tags/Paraphrase/"},{"name":"N-gram","slug":"N-gram","permalink":"https://imbowei.com/tags/N-gram/"},{"name":"Segment","slug":"Segment","permalink":"https://imbowei.com/tags/Segment/"},{"name":"Information-retrieval","slug":"Information-retrieval","permalink":"https://imbowei.com/tags/Information-retrieval/"},{"name":"BoW","slug":"BoW","permalink":"https://imbowei.com/tags/BoW/"},{"name":"Inverted-index","slug":"Inverted-index","permalink":"https://imbowei.com/tags/Inverted-index/"}]}]}